
DroneSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a1c0  0800a1c0  0000b1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a610  0800a610  0000c290  2**0
                  CONTENTS
  4 .ARM          00000008  0800a610  0800a610  0000b610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a618  0800a618  0000c290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a618  0800a618  0000b618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a620  0800a620  0000b620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000290  20000000  0800a628  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000290  0800a8b8  0000c290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0800a8b8  0000c8a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001309d  00000000  00000000  0000c2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326d  00000000  00000000  0001f356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  000225c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d82  00000000  00000000  000236c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7e5  00000000  00000000  0002444a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185ee  00000000  00000000  0003fc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009452e  00000000  00000000  0005821d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec74b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  000ec790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f2168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000290 	.word	0x20000290
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1a4 	.word	0x0800a1a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000294 	.word	0x20000294
 800014c:	0800a1a4 	.word	0x0800a1a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_DMA_Init+0x38>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <MX_DMA_Init+0x38>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_DMA_Init+0x38>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	200e      	movs	r0, #14
 8000fa8:	f001 ffe5 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000fac:	200e      	movs	r0, #14
 8000fae:	f001 fffe 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a36      	ldr	r2, [pc, #216]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a30      	ldr	r2, [pc, #192]	@ (80010cc <MX_GPIO_Init+0x10c>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <MX_GPIO_Init+0x10c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <MX_GPIO_Init+0x10c>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <MX_GPIO_Init+0x10c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_13_GPIO_Port, LED_13_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800103a:	4825      	ldr	r0, [pc, #148]	@ (80010d0 <MX_GPIO_Init+0x110>)
 800103c:	f002 fc0f 	bl	800385e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WHILE_STATE_GPIO_Port, WHILE_STATE_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001046:	4823      	ldr	r0, [pc, #140]	@ (80010d4 <MX_GPIO_Init+0x114>)
 8001048:	f002 fc09 	bl	800385e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_13_Pin */
  GPIO_InitStruct.Pin = LED_13_Pin;
 800104c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2302      	movs	r3, #2
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_13_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	481a      	ldr	r0, [pc, #104]	@ (80010d0 <MX_GPIO_Init+0x110>)
 8001066:	f002 fa5f 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_Killswitch_Pin PWM_Pitch_Pin PWM_Thrust_Pin PWM_Yaw_Pin
                           PWM_Roll_Pin */
  GPIO_InitStruct.Pin = PWM_Killswitch_Pin|PWM_Pitch_Pin|PWM_Thrust_Pin|PWM_Yaw_Pin
 800106a:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800106e:	613b      	str	r3, [r7, #16]
                          |PWM_Roll_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_GPIO_Init+0x118>)
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <MX_GPIO_Init+0x114>)
 8001080:	f002 fa52 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHILE_STATE_Pin */
  GPIO_InitStruct.Pin = WHILE_STATE_Pin;
 8001084:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2302      	movs	r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WHILE_STATE_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <MX_GPIO_Init+0x114>)
 800109e:	f002 fa43 	bl	8003528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	200a      	movs	r0, #10
 80010a8:	f001 ff65 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f001 ff7e 	bl	8002fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2017      	movs	r0, #23
 80010b8:	f001 ff5d 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010bc:	2017      	movs	r0, #23
 80010be:	f001 ff76 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40011000 	.word	0x40011000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	10310000 	.word	0x10310000

080010dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_I2C1_Init+0x50>)
 80010e2:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <MX_I2C1_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_I2C1_Init+0x50>)
 80010e8:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <MX_I2C1_Init+0x58>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_I2C1_Init+0x50>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_I2C1_Init+0x50>)
 800111a:	f002 fbe9 	bl	80038f0 <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 fcbc 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200002ac 	.word	0x200002ac
 8001130:	40005400 	.word	0x40005400
 8001134:	000186a0 	.word	0x000186a0

08001138 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <HAL_I2C_MspInit+0x70>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d123      	bne.n	80011a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_I2C_MspInit+0x74>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <HAL_I2C_MspInit+0x74>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_I2C_MspInit+0x74>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001170:	23c0      	movs	r3, #192	@ 0xc0
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001174:	2312      	movs	r3, #18
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <HAL_I2C_MspInit+0x78>)
 8001184:	f002 f9d0 	bl	8003528 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_I2C_MspInit+0x74>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <HAL_I2C_MspInit+0x74>)
 800118e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001192:	61d3      	str	r3, [r2, #28]
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_I2C_MspInit+0x74>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	00000000 	.word	0x00000000

080011b8 <main>:

// Security
bool KILL_SWITCH = false;

int main(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b090      	sub	sp, #64	@ 0x40
 80011bc:	af08      	add	r7, sp, #32
  HAL_Init();
 80011be:	f001 fd7d 	bl	8002cbc <HAL_Init>
  SystemClock_Config();
 80011c2:	f000 fae3 	bl	800178c <_Z18SystemClock_Configv>
  MX_GPIO_Init(); 			// GPIO init (normal ones and exti)
 80011c6:	f7ff fefb 	bl	8000fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ca:	f7ff fedb 	bl	8000f84 <MX_DMA_Init>
  MX_USART1_UART_Init(); 	// usart
 80011ce:	f001 fbcb 	bl	8002968 <MX_USART1_UART_Init>
  MX_I2C1_Init();			// i2c
 80011d2:	f7ff ff83 	bl	80010dc <MX_I2C1_Init>
  MX_TIM1_Init();			// Timer for the measures of the PWM
 80011d6:	f001 fa81 	bl	80026dc <MX_TIM1_Init>
  MX_TIM2_Init();			// Timer for the generation of the PWM
 80011da:	f001 facf 	bl	800277c <MX_TIM2_Init>

  // Starting the timer for the PWM measures
  HAL_TIM_Base_Start(&htim1);
 80011de:	4826      	ldr	r0, [pc, #152]	@ (8001278 <main+0xc0>)
 80011e0:	f004 f84c 	bl	800527c <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim1,0);
 80011e4:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <main+0xc0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24
	   * PWM are generated based on the counter of timer2 ; between 0 to 36'000
	   * If you want 50% duty cycle, you must put the TIM_CHANNEL_X at 18'000
	   * The normal use of the PWM for the motors to turn (with FS-i10AB receiver)
	   * is between 5% and 10% at 50Hz - 1'800 to 3'600
	   */
	  HAL_TIM_Base_Start(&htim2);
 80011ec:	4823      	ldr	r0, [pc, #140]	@ (800127c <main+0xc4>)
 80011ee:	f004 f845 	bl	800527c <HAL_TIM_Base_Start>
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <main+0xc4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011fa:	2100      	movs	r1, #0
 80011fc:	481f      	ldr	r0, [pc, #124]	@ (800127c <main+0xc4>)
 80011fe:	f004 f8df 	bl	80053c0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001202:	2104      	movs	r1, #4
 8001204:	481d      	ldr	r0, [pc, #116]	@ (800127c <main+0xc4>)
 8001206:	f004 f8db 	bl	80053c0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800120a:	2108      	movs	r1, #8
 800120c:	481b      	ldr	r0, [pc, #108]	@ (800127c <main+0xc4>)
 800120e:	f004 f8d7 	bl	80053c0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001212:	210c      	movs	r1, #12
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <main+0xc4>)
 8001216:	f004 f8d3 	bl	80053c0 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1750); // Gestion du PWM avec le Thrust
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <main+0xc4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1750); // Gestion du PWM avec le Thrust
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <main+0xc4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800122c:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1750); // Gestion du PWM avec le Thrust
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <main+0xc4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8001236:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1750); // Gestion du PWM avec le Thrust
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <main+0xc4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8001240:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  HAL_Delay(3500); // Wait 3 seconds
 8001242:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001246:	f001 fd9b 	bl	8002d80 <HAL_Delay>

  // MPU6050 Sampling
  while(MPU6050_Init(&hi2c1) == 1);
 800124a:	bf00      	nop
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <main+0xc8>)
 800124e:	f000 fca5 	bl	8001b9c <_Z12MPU6050_InitP17I2C_HandleTypeDef>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f4      	bne.n	800124c <main+0x94>
  sprintf(TXBuffer, "Calculating offset");
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <main+0xcc>)
 8001264:	4808      	ldr	r0, [pc, #32]	@ (8001288 <main+0xd0>)
 8001266:	f006 fe67 	bl	8007f38 <siprintf>
  debug_uart(TXBuffer);
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <main+0xd0>)
 800126c:	f001 fc24 	bl	8002ab8 <debug_uart>


  for(int i {0}; i < SAMPLE_MCU_OFFSET; i++){
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e03a      	b.n	80012ec <main+0x134>
 8001276:	bf00      	nop
 8001278:	20000638 	.word	0x20000638
 800127c:	20000680 	.word	0x20000680
 8001280:	200002ac 	.word	0x200002ac
 8001284:	0800a1c0 	.word	0x0800a1c0
 8001288:	20000300 	.word	0x20000300
	  // X axis
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 800128c:	4998      	ldr	r1, [pc, #608]	@ (80014f0 <main+0x338>)
 800128e:	4899      	ldr	r0, [pc, #612]	@ (80014f4 <main+0x33c>)
 8001290:	f000 fcde 	bl	8001c50 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>
	  X_Offset += MPU6050.KalmanAngleX;
 8001294:	4b96      	ldr	r3, [pc, #600]	@ (80014f0 <main+0x338>)
 8001296:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800129a:	4b97      	ldr	r3, [pc, #604]	@ (80014f8 <main+0x340>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7fe ff64 	bl	800016c <__adddf3>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4993      	ldr	r1, [pc, #588]	@ (80014f8 <main+0x340>)
 80012aa:	e9c1 2300 	strd	r2, r3, [r1]
	  Y_Offset += MPU6050.KalmanAngleY;
 80012ae:	4b90      	ldr	r3, [pc, #576]	@ (80014f0 <main+0x338>)
 80012b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80012b4:	4b91      	ldr	r3, [pc, #580]	@ (80014fc <main+0x344>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7fe ff57 	bl	800016c <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	498e      	ldr	r1, [pc, #568]	@ (80014fc <main+0x344>)
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(50);
 80012c8:	2032      	movs	r0, #50	@ 0x32
 80012ca:	f001 fd59 	bl	8002d80 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_13_GPIO_Port, LED_13_Pin);
 80012ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d2:	488b      	ldr	r0, [pc, #556]	@ (8001500 <main+0x348>)
 80012d4:	f002 fadb 	bl	800388e <HAL_GPIO_TogglePin>
	  sprintf(TXBuffer, ".");
 80012d8:	498a      	ldr	r1, [pc, #552]	@ (8001504 <main+0x34c>)
 80012da:	488b      	ldr	r0, [pc, #556]	@ (8001508 <main+0x350>)
 80012dc:	f006 fe2c 	bl	8007f38 <siprintf>
	  debug_uart(TXBuffer);
 80012e0:	4889      	ldr	r0, [pc, #548]	@ (8001508 <main+0x350>)
 80012e2:	f001 fbe9 	bl	8002ab8 <debug_uart>
  for(int i {0}; i < SAMPLE_MCU_OFFSET; i++){
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80012f2:	dbcb      	blt.n	800128c <main+0xd4>
  }

  X_Offset /= SAMPLE_MCU_OFFSET;
 80012f4:	4b80      	ldr	r3, [pc, #512]	@ (80014f8 <main+0x340>)
 80012f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fa:	a37b      	add	r3, pc, #492	@ (adr r3, 80014e8 <main+0x330>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff fa14 	bl	800072c <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	497b      	ldr	r1, [pc, #492]	@ (80014f8 <main+0x340>)
 800130a:	e9c1 2300 	strd	r2, r3, [r1]
  Y_Offset /= SAMPLE_MCU_OFFSET;
 800130e:	4b7b      	ldr	r3, [pc, #492]	@ (80014fc <main+0x344>)
 8001310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001314:	a374      	add	r3, pc, #464	@ (adr r3, 80014e8 <main+0x330>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff fa07 	bl	800072c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4976      	ldr	r1, [pc, #472]	@ (80014fc <main+0x344>)
 8001324:	e9c1 2300 	strd	r2, r3, [r1]

  sprintf(TXBuffer, "\nOffsetX: %f\nOffsetY: %f\n", X_Offset, Y_Offset);
 8001328:	4b73      	ldr	r3, [pc, #460]	@ (80014f8 <main+0x340>)
 800132a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132e:	4b73      	ldr	r3, [pc, #460]	@ (80014fc <main+0x344>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	e9cd 2300 	strd	r2, r3, [sp]
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4973      	ldr	r1, [pc, #460]	@ (800150c <main+0x354>)
 800133e:	4872      	ldr	r0, [pc, #456]	@ (8001508 <main+0x350>)
 8001340:	f006 fdfa 	bl	8007f38 <siprintf>
  debug_uart(TXBuffer);
 8001344:	4870      	ldr	r0, [pc, #448]	@ (8001508 <main+0x350>)
 8001346:	f001 fbb7 	bl	8002ab8 <debug_uart>

  HAL_Delay(1500);
 800134a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800134e:	f001 fd17 	bl	8002d80 <HAL_Delay>
  HAL_GPIO_WritePin(LED_13_GPIO_Port, LED_13_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001358:	4869      	ldr	r0, [pc, #420]	@ (8001500 <main+0x348>)
 800135a:	f002 fa80 	bl	800385e <HAL_GPIO_WritePin>

  // PID
  PID_Roll.Kp = 10;
 800135e:	4b6c      	ldr	r3, [pc, #432]	@ (8001510 <main+0x358>)
 8001360:	220a      	movs	r2, #10
 8001362:	601a      	str	r2, [r3, #0]
  PID_Roll.Ki = 0;
 8001364:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <main+0x358>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  PID_Roll.Kd = 0;
 800136a:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <main+0x358>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  PID_Roll.setpoint = 0;
 8001370:	4967      	ldr	r1, [pc, #412]	@ (8001510 <main+0x358>)
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID_Roll.integral = 0;
 800137e:	4964      	ldr	r1, [pc, #400]	@ (8001510 <main+0x358>)
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID_Roll.previous_error = 0;
 800138c:	4960      	ldr	r1, [pc, #384]	@ (8001510 <main+0x358>)
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	e9c1 2308 	strd	r2, r3, [r1, #32]

  PID_Pitch.Kp = 10;
 800139a:	4b5e      	ldr	r3, [pc, #376]	@ (8001514 <main+0x35c>)
 800139c:	220a      	movs	r2, #10
 800139e:	601a      	str	r2, [r3, #0]
  PID_Pitch.Ki = 0;
 80013a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001514 <main+0x35c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  PID_Pitch.Kd = 0;
 80013a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001514 <main+0x35c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  PID_Pitch.setpoint = 0;
 80013ac:	4959      	ldr	r1, [pc, #356]	@ (8001514 <main+0x35c>)
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID_Pitch.integral = 0;
 80013ba:	4956      	ldr	r1, [pc, #344]	@ (8001514 <main+0x35c>)
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID_Pitch.previous_error = 0;
 80013c8:	4952      	ldr	r1, [pc, #328]	@ (8001514 <main+0x35c>)
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

  while (1) // 518 Hz (At 72Mhz clock)
  {
	  HAL_GPIO_TogglePin(WHILE_STATE_GPIO_Port, WHILE_STATE_Pin);
 80013d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013da:	484f      	ldr	r0, [pc, #316]	@ (8001518 <main+0x360>)
 80013dc:	f002 fa57 	bl	800388e <HAL_GPIO_TogglePin>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80013e0:	4943      	ldr	r1, [pc, #268]	@ (80014f0 <main+0x338>)
 80013e2:	4844      	ldr	r0, [pc, #272]	@ (80014f4 <main+0x33c>)
 80013e4:	f000 fc34 	bl	8001c50 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>

	  if(TX_is_Sent){
 80013e8:	4b4c      	ldr	r3, [pc, #304]	@ (800151c <main+0x364>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d035      	beq.n	800145c <main+0x2a4>
		  TX_is_Sent = false;
 80013f0:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <main+0x364>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
		  int data_length = snprintf(TXBuffer, sizeof(TXBuffer), "%f, %f, %f, %f\n", MPU6050.KalmanAngleX - X_Offset, MPU6050.KalmanAngleY - Y_Offset, -90.f, 90.f);
 80013f6:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <main+0x338>)
 80013f8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80013fc:	4b3e      	ldr	r3, [pc, #248]	@ (80014f8 <main+0x340>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7fe feb1 	bl	8000168 <__aeabi_dsub>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4614      	mov	r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <main+0x338>)
 8001410:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001414:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <main+0x344>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7fe fea5 	bl	8000168 <__aeabi_dsub>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <main+0x368>)
 800142c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <main+0x36c>)
 8001436:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800143a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800143e:	e9cd 4500 	strd	r4, r5, [sp]
 8001442:	4a39      	ldr	r2, [pc, #228]	@ (8001528 <main+0x370>)
 8001444:	2130      	movs	r1, #48	@ 0x30
 8001446:	4830      	ldr	r0, [pc, #192]	@ (8001508 <main+0x350>)
 8001448:	f006 fd42 	bl	8007ed0 <sniprintf>
 800144c:	61b8      	str	r0, [r7, #24]
		  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)TXBuffer, data_length);
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	b29b      	uxth	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	492c      	ldr	r1, [pc, #176]	@ (8001508 <main+0x350>)
 8001456:	4835      	ldr	r0, [pc, #212]	@ (800152c <main+0x374>)
 8001458:	f004 fe4a 	bl	80060f0 <HAL_UART_Transmit_DMA>
	  }

	  if(KILL_SWITCH){
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <main+0x378>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <main+0x2b0>
		  Error_Handler();
 8001464:	f000 fb1c 	bl	8001aa0 <Error_Handler>
	  }

	  if(MOTOR_CAN_TURN){
		  if(PWM_Thrust.getAverage() < 1100){ // Security : Motor cannot turn below 1.1ms of PWM
 8001468:	4832      	ldr	r0, [pc, #200]	@ (8001534 <main+0x37c>)
 800146a:	f001 fbad 	bl	8002bc8 <_ZNVK13MovingAverage10getAverageEv>
 800146e:	4603      	mov	r3, r0
 8001470:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001474:	4293      	cmp	r3, r2
 8001476:	bf94      	ite	ls
 8001478:	2301      	movls	r3, #1
 800147a:	2300      	movhi	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d05c      	beq.n	800153c <main+0x384>
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1750); // Gestion du PWM avec le Thrust
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <main+0x380>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1750); // Gestion du PWM avec le Thrust
 800148c:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <main+0x380>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8001494:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1750); // Gestion du PWM avec le Thrust
 8001496:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <main+0x380>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800149e:	63da      	str	r2, [r3, #60]	@ 0x3c
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1750); // Gestion du PWM avec le Thrust
 80014a0:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <main+0x380>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80014a8:	641a      	str	r2, [r3, #64]	@ 0x40

			  PID_Roll.integral = 0;
 80014aa:	4919      	ldr	r1, [pc, #100]	@ (8001510 <main+0x358>)
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  PID_Roll.previous_error = 0;
 80014b8:	4915      	ldr	r1, [pc, #84]	@ (8001510 <main+0x358>)
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

			  PID_Pitch.integral = 0;
 80014c6:	4913      	ldr	r1, [pc, #76]	@ (8001514 <main+0x35c>)
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  PID_Pitch.previous_error = 0;
 80014d4:	490f      	ldr	r1, [pc, #60]	@ (8001514 <main+0x35c>)
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80014e2:	e778      	b.n	80013d6 <main+0x21e>
 80014e4:	f3af 8000 	nop.w
 80014e8:	00000000 	.word	0x00000000
 80014ec:	4072c000 	.word	0x4072c000
 80014f0:	20000550 	.word	0x20000550
 80014f4:	200002ac 	.word	0x200002ac
 80014f8:	200005a8 	.word	0x200005a8
 80014fc:	200005b0 	.word	0x200005b0
 8001500:	40011000 	.word	0x40011000
 8001504:	0800a1d4 	.word	0x0800a1d4
 8001508:	20000300 	.word	0x20000300
 800150c:	0800a1d8 	.word	0x0800a1d8
 8001510:	200005c8 	.word	0x200005c8
 8001514:	200005f0 	.word	0x200005f0
 8001518:	40010800 	.word	0x40010800
 800151c:	20000000 	.word	0x20000000
 8001520:	40568000 	.word	0x40568000
 8001524:	c0568000 	.word	0xc0568000
 8001528:	0800a1f4 	.word	0x0800a1f4
 800152c:	200006c8 	.word	0x200006c8
 8001530:	20000618 	.word	0x20000618
 8001534:	20000440 	.word	0x20000440
 8001538:	20000680 	.word	0x20000680
		  }

		  else{
			  //PWM_ALL_MOTORS = (PWM_Thrust.getAverage() - 10) * 1800/1000;
			  PWM_ALL_MOTORS = map(PWM_Thrust.getAverage(), 1000, 2000, 1800, 3600);
 800153c:	4885      	ldr	r0, [pc, #532]	@ (8001754 <main+0x59c>)
 800153e:	f001 fb43 	bl	8002bc8 <_ZNVK13MovingAverage10getAverageEv>
 8001542:	4603      	mov	r3, r0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	f107 0410 	add.w	r4, r7, #16
 8001562:	f107 020c 	add.w	r2, r7, #12
 8001566:	f107 0108 	add.w	r1, r7, #8
 800156a:	1d38      	adds	r0, r7, #4
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4623      	mov	r3, r4
 8001574:	f001 fb42 	bl	8002bfc <_Z3mapRKmS0_S0_S0_S0_>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b76      	ldr	r3, [pc, #472]	@ (8001758 <main+0x5a0>)
 800157e:	601a      	str	r2, [r3, #0]
			  PWM_ALL_MOTORS = Constrain(MIN_PWM_COUNTER, MAX_PWM_COUNTER, PWM_ALL_MOTORS);
 8001580:	4b75      	ldr	r3, [pc, #468]	@ (8001758 <main+0x5a0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800158a:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800158e:	f001 fb57 	bl	8002c40 <_Z9Constrainmmm>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	4b70      	ldr	r3, [pc, #448]	@ (8001758 <main+0x5a0>)
 8001598:	601a      	str	r2, [r3, #0]

			  correction_Roll = Compute_PID(PID_Roll, MPU6050.KalmanAngleX - X_Offset);
 800159a:	4b70      	ldr	r3, [pc, #448]	@ (800175c <main+0x5a4>)
 800159c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80015a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001760 <main+0x5a8>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7fe fddf 	bl	8000168 <__aeabi_dsub>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	486d      	ldr	r0, [pc, #436]	@ (8001764 <main+0x5ac>)
 80015b0:	f000 fe9c 	bl	80022ec <_Z11Compute_PIDR3PIDd>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	496b      	ldr	r1, [pc, #428]	@ (8001768 <main+0x5b0>)
 80015ba:	e9c1 2300 	strd	r2, r3, [r1]
			  correction_Pitch = Compute_PID(PID_Pitch, MPU6050.KalmanAngleY - Y_Offset);
 80015be:	4b67      	ldr	r3, [pc, #412]	@ (800175c <main+0x5a4>)
 80015c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80015c4:	4b69      	ldr	r3, [pc, #420]	@ (800176c <main+0x5b4>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fdcd 	bl	8000168 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4867      	ldr	r0, [pc, #412]	@ (8001770 <main+0x5b8>)
 80015d4:	f000 fe8a 	bl	80022ec <_Z11Compute_PIDR3PIDd>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4965      	ldr	r1, [pc, #404]	@ (8001774 <main+0x5bc>)
 80015de:	e9c1 2300 	strd	r2, r3, [r1]

			  PWM_FL = PWM_ALL_MOTORS + correction_Roll + correction_Pitch;
 80015e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001758 <main+0x5a0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff0c 	bl	8000404 <__aeabi_i2d>
 80015ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001768 <main+0x5b0>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7fe fdbb 	bl	800016c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <main+0x5bc>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe fdb2 	bl	800016c <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fa12 	bl	8000a38 <__aeabi_d2iz>
 8001614:	4603      	mov	r3, r0
 8001616:	4a58      	ldr	r2, [pc, #352]	@ (8001778 <main+0x5c0>)
 8001618:	6013      	str	r3, [r2, #0]
			  PWM_FR = PWM_ALL_MOTORS + correction_Roll - correction_Pitch;
 800161a:	4b4f      	ldr	r3, [pc, #316]	@ (8001758 <main+0x5a0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fef0 	bl	8000404 <__aeabi_i2d>
 8001624:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <main+0x5b0>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe fd9f 	bl	800016c <__adddf3>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	4b4f      	ldr	r3, [pc, #316]	@ (8001774 <main+0x5bc>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe fd94 	bl	8000168 <__aeabi_dsub>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff f9f6 	bl	8000a38 <__aeabi_d2iz>
 800164c:	4603      	mov	r3, r0
 800164e:	4a4b      	ldr	r2, [pc, #300]	@ (800177c <main+0x5c4>)
 8001650:	6013      	str	r3, [r2, #0]
			  PWM_BL = PWM_ALL_MOTORS - correction_Roll + correction_Pitch;
 8001652:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <main+0x5a0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fed4 	bl	8000404 <__aeabi_i2d>
 800165c:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <main+0x5b0>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fd81 	bl	8000168 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <main+0x5bc>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe fd7a 	bl	800016c <__adddf3>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff f9da 	bl	8000a38 <__aeabi_d2iz>
 8001684:	4603      	mov	r3, r0
 8001686:	4a3e      	ldr	r2, [pc, #248]	@ (8001780 <main+0x5c8>)
 8001688:	6013      	str	r3, [r2, #0]
			  PWM_BR = PWM_ALL_MOTORS - correction_Roll - correction_Pitch;
 800168a:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <main+0x5a0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe feb8 	bl	8000404 <__aeabi_i2d>
 8001694:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <main+0x5b0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe fd65 	bl	8000168 <__aeabi_dsub>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <main+0x5bc>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe fd5c 	bl	8000168 <__aeabi_dsub>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f9be 	bl	8000a38 <__aeabi_d2iz>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a31      	ldr	r2, [pc, #196]	@ (8001784 <main+0x5cc>)
 80016c0:	6013      	str	r3, [r2, #0]

			  PWM_FL = Constrain(1800, 3600, PWM_FL);
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <main+0x5c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80016cc:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 80016d0:	f001 fab6 	bl	8002c40 <_Z9Constrainmmm>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <main+0x5c0>)
 80016da:	601a      	str	r2, [r3, #0]
			  PWM_FR = Constrain(1800, 3600, PWM_FR);
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <main+0x5c4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80016e6:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 80016ea:	f001 faa9 	bl	8002c40 <_Z9Constrainmmm>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b22      	ldr	r3, [pc, #136]	@ (800177c <main+0x5c4>)
 80016f4:	601a      	str	r2, [r3, #0]
			  PWM_BL = Constrain(1800, 3600, PWM_BL);
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <main+0x5c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001700:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8001704:	f001 fa9c 	bl	8002c40 <_Z9Constrainmmm>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <main+0x5c8>)
 800170e:	601a      	str	r2, [r3, #0]
			  PWM_BR = Constrain(1800, 3600, PWM_BR);
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <main+0x5cc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800171a:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800171e:	f001 fa8f 	bl	8002c40 <_Z9Constrainmmm>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <main+0x5cc>)
 8001728:	601a      	str	r2, [r3, #0]

			  // VERIFIER L'ORDRE DES MOTEURS !
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM_FL); // Gestion du PWM avec le Thrust
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <main+0x5c0>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <main+0x5d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM_FR); // Gestion du PWM avec le Thrust
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <main+0x5c4>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <main+0x5d0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM_BL); // Gestion du PWM avec le Thrust
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <main+0x5c8>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <main+0x5d0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM_BR); // Gestion du PWM avec le Thrust
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <main+0x5cc>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <main+0x5d0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
		  }
	  }
  }
 8001752:	e640      	b.n	80013d6 <main+0x21e>
 8001754:	20000440 	.word	0x20000440
 8001758:	20000004 	.word	0x20000004
 800175c:	20000550 	.word	0x20000550
 8001760:	200005a8 	.word	0x200005a8
 8001764:	200005c8 	.word	0x200005c8
 8001768:	200005b8 	.word	0x200005b8
 800176c:	200005b0 	.word	0x200005b0
 8001770:	200005f0 	.word	0x200005f0
 8001774:	200005c0 	.word	0x200005c0
 8001778:	20000008 	.word	0x20000008
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000010 	.word	0x20000010
 8001784:	20000014 	.word	0x20000014
 8001788:	20000680 	.word	0x20000680

0800178c <_Z18SystemClock_Configv>:
}

void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b090      	sub	sp, #64	@ 0x40
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	2228      	movs	r2, #40	@ 0x28
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f006 fc2f 	bl	8007ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017bc:	2302      	movs	r3, #2
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f8f3 	bl	80049bc <HAL_RCC_OscConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80017e6:	f000 f95b 	bl	8001aa0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ea:	230f      	movs	r3, #15
 80017ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ee:	2302      	movs	r3, #2
 80017f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2102      	movs	r1, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fb5b 	bl	8004ec0 <HAL_RCC_ClockConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 800181a:	f000 f941 	bl	8001aa0 <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3740      	adds	r7, #64	@ 0x40
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_EXTI_Callback>:
/* Redefinition of __weak HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 * This function is called each time a rising or falling edge is detected
 * on a EXTI pin.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	// Callbacks
	if(GPIO_Pin == PWM_Killswitch_Pin){ // Killswitch PWM measure
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2b10      	cmp	r3, #16
 8001836:	d150      	bne.n	80018da <HAL_GPIO_EXTI_Callback+0xb2>
		uint32_t Current_Ticks = __HAL_TIM_GET_COUNTER(&htim1); // Not outside the if condition because time measure
 8001838:	4b8a      	ldr	r3, [pc, #552]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x23c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	60bb      	str	r3, [r7, #8]
		uint32_t PWM_Time = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
		static uint32_t Previous_Killswitch_Ticks = 0;

		if(HAL_GPIO_ReadPin(PWM_Killswitch_GPIO_Port, PWM_Killswitch_Pin)){
 8001844:	2110      	movs	r1, #16
 8001846:	4888      	ldr	r0, [pc, #544]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x240>)
 8001848:	f001 fff2 	bl	8003830 <HAL_GPIO_ReadPin>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_EXTI_Callback+0x3c>
			Previous_Killswitch_Ticks = Current_Ticks;
 800185c:	4a83      	ldr	r2, [pc, #524]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x244>)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e011      	b.n	8001888 <HAL_GPIO_EXTI_Callback+0x60>
		}
		else{
			if(Current_Ticks >= Previous_Killswitch_Ticks){
 8001864:	4b81      	ldr	r3, [pc, #516]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x244>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	d305      	bcc.n	800187a <HAL_GPIO_EXTI_Callback+0x52>
				PWM_Time = Current_Ticks - Previous_Killswitch_Ticks;
 800186e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x244>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_EXTI_Callback+0x60>
			}
			else{
				PWM_Time = 0xFFFF - Previous_Killswitch_Ticks + Current_Ticks + 1;
 800187a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x244>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001886:	61fb      	str	r3, [r7, #28]
			}
		}

		if(PWM_Time > 1300){
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f240 5214 	movw	r2, #1300	@ 0x514
 800188e:	4293      	cmp	r3, r2
 8001890:	f240 80e4 	bls.w	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
			KILL_SWITCH = true;
 8001894:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x248>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]

			PWM_ALL_MOTORS = 1750;
 800189a:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <HAL_GPIO_EXTI_Callback+0x24c>)
 800189c:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80018a0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1750);
 80018a2:	4b75      	ldr	r3, [pc, #468]	@ (8001a78 <HAL_GPIO_EXTI_Callback+0x250>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80018aa:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1750);
 80018ac:	4b72      	ldr	r3, [pc, #456]	@ (8001a78 <HAL_GPIO_EXTI_Callback+0x250>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80018b4:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1750);
 80018b6:	4b70      	ldr	r3, [pc, #448]	@ (8001a78 <HAL_GPIO_EXTI_Callback+0x250>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80018be:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1750);
 80018c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001a78 <HAL_GPIO_EXTI_Callback+0x250>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80018c8:	641a      	str	r2, [r3, #64]	@ 0x40

			HAL_GPIO_TogglePin(LED_13_GPIO_Port, LED_13_Pin);
 80018ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ce:	486b      	ldr	r0, [pc, #428]	@ (8001a7c <HAL_GPIO_EXTI_Callback+0x254>)
 80018d0:	f001 ffdd 	bl	800388e <HAL_GPIO_TogglePin>
			Error_Handler();
 80018d4:	f000 f8e4 	bl	8001aa0 <Error_Handler>
			else{
				PWM_Yaw.addValue(0xFFFF - Previous_Yaw_Ticks + Current_Ticks + 1);
			}
		}
	}
}
 80018d8:	e0c0      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
	else if(GPIO_Pin == PWM_Roll_Pin){
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e0:	d12d      	bne.n	800193e <HAL_GPIO_EXTI_Callback+0x116>
		uint32_t Current_Ticks = __HAL_TIM_GET_COUNTER(&htim1); // Not outside the if condition because time measure
 80018e2:	4b60      	ldr	r3, [pc, #384]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x23c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	60fb      	str	r3, [r7, #12]
		if(HAL_GPIO_ReadPin(PWM_Roll_GPIO_Port, PWM_Roll_Pin)){
 80018ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ee:	485e      	ldr	r0, [pc, #376]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x240>)
 80018f0:	f001 ff9e 	bl	8003830 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_EXTI_Callback+0xe4>
			Previous_Roll_Ticks = Current_Ticks;
 8001904:	4a5e      	ldr	r2, [pc, #376]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0x258>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	e0a7      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
			if(Current_Ticks >= Previous_Roll_Ticks){
 800190c:	4b5c      	ldr	r3, [pc, #368]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0x258>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	429a      	cmp	r2, r3
 8001914:	d308      	bcc.n	8001928 <HAL_GPIO_EXTI_Callback+0x100>
				PWM_Roll.addValue(Current_Ticks - Previous_Roll_Ticks);
 8001916:	4b5a      	ldr	r3, [pc, #360]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0x258>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4619      	mov	r1, r3
 8001920:	4858      	ldr	r0, [pc, #352]	@ (8001a84 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001922:	f001 f910 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 8001926:	e099      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
				PWM_Roll.addValue(0xFFFF - Previous_Roll_Ticks + Current_Ticks + 1);
 8001928:	4b55      	ldr	r3, [pc, #340]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0x258>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001934:	4619      	mov	r1, r3
 8001936:	4853      	ldr	r0, [pc, #332]	@ (8001a84 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001938:	f001 f905 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 800193c:	e08e      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
	else if(GPIO_Pin == PWM_Pitch_Pin){
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	2b20      	cmp	r3, #32
 8001942:	d12c      	bne.n	800199e <HAL_GPIO_EXTI_Callback+0x176>
		uint32_t Current_Ticks = __HAL_TIM_GET_COUNTER(&htim1); // Not outside the if condition because time measure
 8001944:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	613b      	str	r3, [r7, #16]
		if(HAL_GPIO_ReadPin(PWM_Pitch_GPIO_Port, PWM_Pitch_Pin)){
 800194c:	2120      	movs	r1, #32
 800194e:	4846      	ldr	r0, [pc, #280]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x240>)
 8001950:	f001 ff6e 	bl	8003830 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_EXTI_Callback+0x144>
			Previous_Pitch_Ticks = Current_Ticks;
 8001964:	4a48      	ldr	r2, [pc, #288]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0x260>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	6013      	str	r3, [r2, #0]
}
 800196a:	e077      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
			if(Current_Ticks >= Previous_Pitch_Ticks){
 800196c:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0x260>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	429a      	cmp	r2, r3
 8001974:	d308      	bcc.n	8001988 <HAL_GPIO_EXTI_Callback+0x160>
				PWM_Pitch.addValue(Current_Ticks - Previous_Pitch_Ticks);
 8001976:	4b44      	ldr	r3, [pc, #272]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0x260>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4619      	mov	r1, r3
 8001980:	4842      	ldr	r0, [pc, #264]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x264>)
 8001982:	f001 f8e0 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 8001986:	e069      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
				PWM_Pitch.addValue(0xFFFF - Previous_Pitch_Ticks + Current_Ticks + 1);
 8001988:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0x260>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001994:	4619      	mov	r1, r3
 8001996:	483d      	ldr	r0, [pc, #244]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x264>)
 8001998:	f001 f8d5 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 800199c:	e05e      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
	else if(GPIO_Pin == PWM_Thrust_Pin){
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	2b40      	cmp	r3, #64	@ 0x40
 80019a2:	d12c      	bne.n	80019fe <HAL_GPIO_EXTI_Callback+0x1d6>
		uint32_t Current_Ticks = __HAL_TIM_GET_COUNTER(&htim1); // Not outside the if condition because time measure
 80019a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x23c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	617b      	str	r3, [r7, #20]
		if(HAL_GPIO_ReadPin(PWM_Thrust_GPIO_Port, PWM_Thrust_Pin)){
 80019ac:	2140      	movs	r1, #64	@ 0x40
 80019ae:	482e      	ldr	r0, [pc, #184]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x240>)
 80019b0:	f001 ff3e 	bl	8003830 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_EXTI_Callback+0x1a4>
			Previous_Thrust_Ticks = Current_Ticks;
 80019c4:	4a32      	ldr	r2, [pc, #200]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x268>)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	6013      	str	r3, [r2, #0]
}
 80019ca:	e047      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
			if(Current_Ticks >= Previous_Thrust_Ticks){
 80019cc:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x268>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d308      	bcc.n	80019e8 <HAL_GPIO_EXTI_Callback+0x1c0>
				PWM_Thrust.addValue(Current_Ticks - Previous_Thrust_Ticks);
 80019d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x268>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	482c      	ldr	r0, [pc, #176]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0x26c>)
 80019e2:	f001 f8b0 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 80019e6:	e039      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
				PWM_Thrust.addValue(0xFFFF - Previous_Thrust_Ticks + Current_Ticks + 1);
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0x268>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80019f4:	4619      	mov	r1, r3
 80019f6:	4827      	ldr	r0, [pc, #156]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0x26c>)
 80019f8:	f001 f8a5 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 80019fc:	e02e      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
	else if(GPIO_Pin == PWM_Yaw_Pin){
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	2b80      	cmp	r3, #128	@ 0x80
 8001a02:	d12b      	bne.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
		uint32_t Current_Ticks = __HAL_TIM_GET_COUNTER(&htim1); // Not outside the if condition because time measure
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	61bb      	str	r3, [r7, #24]
		if(HAL_GPIO_ReadPin(PWM_Yaw_GPIO_Port, PWM_Yaw_Pin)){
 8001a0c:	2180      	movs	r1, #128	@ 0x80
 8001a0e:	4816      	ldr	r0, [pc, #88]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x240>)
 8001a10:	f001 ff0e 	bl	8003830 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_EXTI_Callback+0x204>
			Previous_Yaw_Ticks = Current_Ticks;
 8001a24:	4a1c      	ldr	r2, [pc, #112]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x270>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	6013      	str	r3, [r2, #0]
}
 8001a2a:	e017      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
			if(Current_Ticks >= Previous_Yaw_Ticks){
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d308      	bcc.n	8001a48 <HAL_GPIO_EXTI_Callback+0x220>
				PWM_Yaw.addValue(Current_Ticks - Previous_Yaw_Ticks);
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4816      	ldr	r0, [pc, #88]	@ (8001a9c <HAL_GPIO_EXTI_Callback+0x274>)
 8001a42:	f001 f880 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 8001a46:	e009      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x234>
				PWM_Yaw.addValue(0xFFFF - Previous_Yaw_Ticks + Current_Ticks + 1);
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001a54:	4619      	mov	r1, r3
 8001a56:	4811      	ldr	r0, [pc, #68]	@ (8001a9c <HAL_GPIO_EXTI_Callback+0x274>)
 8001a58:	f001 f875 	bl	8002b46 <_ZNV13MovingAverage8addValueEm>
}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000638 	.word	0x20000638
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	2000061c 	.word	0x2000061c
 8001a70:	20000618 	.word	0x20000618
 8001a74:	20000004 	.word	0x20000004
 8001a78:	20000680 	.word	0x20000680
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	20000620 	.word	0x20000620
 8001a84:	20000330 	.word	0x20000330
 8001a88:	20000624 	.word	0x20000624
 8001a8c:	200003b8 	.word	0x200003b8
 8001a90:	20000628 	.word	0x20000628
 8001a94:	20000440 	.word	0x20000440
 8001a98:	2000062c 	.word	0x2000062c
 8001a9c:	200004c8 	.word	0x200004c8

08001aa0 <Error_Handler>:

void Error_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  __disable_irq();
  if(MOTOR_CAN_TURN){
	  HAL_TIMEx_PWMN_Stop(&htim2, TIM_CHANNEL_1);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4808      	ldr	r0, [pc, #32]	@ (8001acc <Error_Handler+0x2c>)
 8001aac:	f004 f964 	bl	8005d78 <HAL_TIMEx_PWMN_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim2, TIM_CHANNEL_2);
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4806      	ldr	r0, [pc, #24]	@ (8001acc <Error_Handler+0x2c>)
 8001ab4:	f004 f960 	bl	8005d78 <HAL_TIMEx_PWMN_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim2, TIM_CHANNEL_3);
 8001ab8:	2108      	movs	r1, #8
 8001aba:	4804      	ldr	r0, [pc, #16]	@ (8001acc <Error_Handler+0x2c>)
 8001abc:	f004 f95c 	bl	8005d78 <HAL_TIMEx_PWMN_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim2, TIM_CHANNEL_4);
 8001ac0:	210c      	movs	r1, #12
 8001ac2:	4802      	ldr	r0, [pc, #8]	@ (8001acc <Error_Handler+0x2c>)
 8001ac4:	f004 f958 	bl	8005d78 <HAL_TIMEx_PWMN_Stop>
  }

  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <Error_Handler+0x28>
 8001acc:	20000680 	.word	0x20000680

08001ad0 <HAL_UART_TxCpltCallback>:
  {

  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	TX_is_Sent = true;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_UART_TxCpltCallback+0x18>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <_Z41__static_initialization_and_destruction_0ii>:
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d114      	bne.n	8001b3a <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10f      	bne.n	8001b3a <_Z41__static_initialization_and_destruction_0ii+0x3a>
volatile MovingAverage PWM_Roll(30);
 8001b1a:	211e      	movs	r1, #30
 8001b1c:	4813      	ldr	r0, [pc, #76]	@ (8001b6c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001b1e:	f000 ffe1 	bl	8002ae4 <_ZN13MovingAverageC1Em>
volatile MovingAverage PWM_Pitch(30);
 8001b22:	211e      	movs	r1, #30
 8001b24:	4812      	ldr	r0, [pc, #72]	@ (8001b70 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001b26:	f000 ffdd 	bl	8002ae4 <_ZN13MovingAverageC1Em>
volatile MovingAverage PWM_Thrust(30);
 8001b2a:	211e      	movs	r1, #30
 8001b2c:	4811      	ldr	r0, [pc, #68]	@ (8001b74 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001b2e:	f000 ffd9 	bl	8002ae4 <_ZN13MovingAverageC1Em>
volatile MovingAverage PWM_Yaw(30);
 8001b32:	211e      	movs	r1, #30
 8001b34:	4810      	ldr	r0, [pc, #64]	@ (8001b78 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001b36:	f000 ffd5 	bl	8002ae4 <_ZN13MovingAverageC1Em>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d110      	bne.n	8001b62 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10b      	bne.n	8001b62 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8001b4a:	480b      	ldr	r0, [pc, #44]	@ (8001b78 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001b4c:	f000 fff1 	bl	8002b32 <_ZN13MovingAverageD1Ev>
volatile MovingAverage PWM_Thrust(30);
 8001b50:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001b52:	f000 ffee 	bl	8002b32 <_ZN13MovingAverageD1Ev>
volatile MovingAverage PWM_Pitch(30);
 8001b56:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001b58:	f000 ffeb 	bl	8002b32 <_ZN13MovingAverageD1Ev>
volatile MovingAverage PWM_Roll(30);
 8001b5c:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001b5e:	f000 ffe8 	bl	8002b32 <_ZN13MovingAverageD1Ev>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000330 	.word	0x20000330
 8001b70:	200003b8 	.word	0x200003b8
 8001b74:	20000440 	.word	0x20000440
 8001b78:	200004c8 	.word	0x200004c8

08001b7c <_GLOBAL__sub_I_data_lenght>:
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff ffbb 	bl	8001b00 <_Z41__static_initialization_and_destruction_0ii>
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_GLOBAL__sub_D_data_lenght>:
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff ffb3 	bl	8001b00 <_Z41__static_initialization_and_destruction_0ii>
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_Z12MPU6050_InitP17I2C_HandleTypeDef>:
    .Q_bias = 0.003f,
    .R_measure = 0.09f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af04      	add	r7, sp, #16
 8001ba2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001ba4:	2364      	movs	r3, #100	@ 0x64
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	f107 030f 	add.w	r3, r7, #15
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	2275      	movs	r2, #117	@ 0x75
 8001bb6:	21d0      	movs	r1, #208	@ 0xd0
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f002 f8d7 	bl	8003d6c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b68      	cmp	r3, #104	@ 0x68
 8001bc2:	d13d      	bne.n	8001c40 <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001bc8:	2364      	movs	r3, #100	@ 0x64
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	f107 030e 	add.w	r3, r7, #14
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	226b      	movs	r2, #107	@ 0x6b
 8001bda:	21d0      	movs	r1, #208	@ 0xd0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 ffcb 	bl	8003b78 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001be2:	2307      	movs	r3, #7
 8001be4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001be6:	2364      	movs	r3, #100	@ 0x64
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2301      	movs	r3, #1
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	f107 030e 	add.w	r3, r7, #14
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2219      	movs	r2, #25
 8001bf8:	21d0      	movs	r1, #208	@ 0xd0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f001 ffbc 	bl	8003b78 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001c04:	2364      	movs	r3, #100	@ 0x64
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	f107 030e 	add.w	r3, r7, #14
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	221c      	movs	r2, #28
 8001c16:	21d0      	movs	r1, #208	@ 0xd0
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f001 ffad 	bl	8003b78 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001c22:	2364      	movs	r3, #100	@ 0x64
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	2301      	movs	r3, #1
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	f107 030e 	add.w	r3, r7, #14
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	221b      	movs	r2, #27
 8001c34:	21d0      	movs	r1, #208	@ 0xd0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f001 ff9e 	bl	8003b78 <HAL_I2C_Mem_Write>
        return 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <_Z12MPU6050_InitP17I2C_HandleTypeDef+0xa6>
    }
    return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	0000      	movs	r0, r0
 8001c4c:	0000      	movs	r0, r0
	...

08001c50 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001c50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c54:	b094      	sub	sp, #80	@ 0x50
 8001c56:	af04      	add	r7, sp, #16
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001c5c:	2364      	movs	r3, #100	@ 0x64
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	230e      	movs	r3, #14
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	223b      	movs	r2, #59	@ 0x3b
 8001c6e:	21d0      	movs	r1, #208	@ 0xd0
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f002 f87b 	bl	8003d6c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001c76:	7a3b      	ldrb	r3, [r7, #8]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7a7b      	ldrb	r3, [r7, #9]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001c88:	7abb      	ldrb	r3, [r7, #10]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001c9a:	7b3b      	ldrb	r3, [r7, #12]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7b7b      	ldrb	r3, [r7, #13]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001cba:	7c3b      	ldrb	r3, [r7, #16]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	7c7b      	ldrb	r3, [r7, #17]
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001ccc:	7cbb      	ldrb	r3, [r7, #18]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	7cfb      	ldrb	r3, [r7, #19]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001cde:	7d3b      	ldrb	r3, [r7, #20]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	7d7b      	ldrb	r3, [r7, #21]
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fb84 	bl	8000404 <__aeabi_i2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4baf      	ldr	r3, [pc, #700]	@ (8001fc0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 8001d02:	f7fe fd13 	bl	800072c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fb74 	bl	8000404 <__aeabi_i2d>
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	4ba7      	ldr	r3, [pc, #668]	@ (8001fc0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 8001d22:	f7fe fd03 	bl	800072c <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fb64 	bl	8000404 <__aeabi_i2d>
 8001d3c:	a39a      	add	r3, pc, #616	@ (adr r3, 8001fa8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x358>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fcf3 	bl	800072c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001d50:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ff71 	bl	8000c3c <__aeabi_i2f>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4999      	ldr	r1, [pc, #612]	@ (8001fc4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x374>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f874 	bl	8000e4c <__aeabi_fdiv>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4998      	ldr	r1, [pc, #608]	@ (8001fc8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x378>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe feb3 	bl	8000ad4 <__addsf3>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fb41 	bl	8000404 <__aeabi_i2d>
 8001d82:	a38b      	add	r3, pc, #556	@ (adr r3, 8001fb0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fcd0 	bl	800072c <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb31 	bl	8000404 <__aeabi_i2d>
 8001da2:	a383      	add	r3, pc, #524	@ (adr r3, 8001fb0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fcc0 	bl	800072c <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fb21 	bl	8000404 <__aeabi_i2d>
 8001dc2:	a37b      	add	r3, pc, #492	@ (adr r3, 8001fb0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x360>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fcb0 	bl	800072c <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001dd6:	f000 ffc9 	bl	8002d6c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8001fcc <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x37c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fafe 	bl	80003e4 <__aeabi_ui2d>
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b78      	ldr	r3, [pc, #480]	@ (8001fd0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x380>)
 8001dee:	f7fe fc9d 	bl	800072c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001dfa:	f000 ffb7 	bl	8002d6c <HAL_GetTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a72      	ldr	r2, [pc, #456]	@ (8001fcc <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x37c>)
 8001e02:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	fb03 f202 	mul.w	r2, r3, r2
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
    double roll_sqrt = sqrt(
 8001e28:	4413      	add	r3, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fa2d 	bl	800228a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e30:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e40:	f7fe fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d119      	bne.n	8001e7e <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x22e>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fad7 	bl	8000404 <__aeabi_i2d>
 8001e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e5a:	f7fe fc67 	bl	800072c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f004 ffd7 	bl	8006e18 <atan>
 8001e6a:	a353      	add	r3, pc, #332	@ (adr r3, 8001fb8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x368>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe fb32 	bl	80004d8 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001e7c:	e005      	b.n	8001e8a <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x23a>
    }
    else
    {
        roll = 0.0;
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e90:	425a      	negs	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f000 fa09 	bl	80022b2 <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ea0:	a345      	add	r3, pc, #276	@ (adr r3, 8001fb8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x368>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fb17 	bl	80004d8 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x384>)
 8001eb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ebc:	f7fe fd7e 	bl	80009bc <__aeabi_dcmplt>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x28c>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b41      	ldr	r3, [pc, #260]	@ (8001fd8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 8001ed2:	f7fe fd91 	bl	80009f8 <__aeabi_dcmpgt>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d114      	bne.n	8001f06 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2b6>
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 8001ee2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ee6:	f7fe fd87 	bl	80009f8 <__aeabi_dcmpgt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2cc>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b36      	ldr	r3, [pc, #216]	@ (8001fd4 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x384>)
 8001efc:	f7fe fd5e 	bl	80009bc <__aeabi_dcmplt>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2cc>
    {
        KalmanY.angle = pitch;
 8001f06:	4935      	ldr	r1, [pc, #212]	@ (8001fdc <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x38c>)
 8001f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f16:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001f1a:	e012      	b.n	8001f42 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x2f2>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001f22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f2a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f32:	482a      	ldr	r0, [pc, #168]	@ (8001fdc <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x38c>)
 8001f34:	f000 f856 	bl	8001fe4 <_Z15Kalman_getAngleP8Kalman_tddd>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001f48:	4690      	mov	r8, r2
 8001f4a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 8001f54:	4640      	mov	r0, r8
 8001f56:	4649      	mov	r1, r9
 8001f58:	f7fe fd4e 	bl	80009f8 <__aeabi_dcmpgt>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x324>
        DataStruct->Gx = -DataStruct->Gx;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f68:	4614      	mov	r4, r2
 8001f6a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f82:	e9cd 2300 	strd	r2, r3, [sp]
 8001f86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f8a:	4815      	ldr	r0, [pc, #84]	@ (8001fe0 <_Z16MPU6050_Read_AllP17I2C_HandleTypeDefP9MPU6050_t+0x390>)
 8001f8c:	f000 f82a 	bl	8001fe4 <_Z15Kalman_getAngleP8Kalman_tddd>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	6839      	ldr	r1, [r7, #0]
 8001f96:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8001f9a:	bf00      	nop
 8001f9c:	3740      	adds	r7, #64	@ 0x40
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	40cc2900 	.word	0x40cc2900
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40606000 	.word	0x40606000
 8001fb8:	1a63c1f8 	.word	0x1a63c1f8
 8001fbc:	404ca5dc 	.word	0x404ca5dc
 8001fc0:	40d00000 	.word	0x40d00000
 8001fc4:	43aa0000 	.word	0x43aa0000
 8001fc8:	42121eb8 	.word	0x42121eb8
 8001fcc:	20000630 	.word	0x20000630
 8001fd0:	408f4000 	.word	0x408f4000
 8001fd4:	c0568000 	.word	0xc0568000
 8001fd8:	40568000 	.word	0x40568000
 8001fdc:	20000060 	.word	0x20000060
 8001fe0:	20000018 	.word	0x20000018

08001fe4 <_Z15Kalman_getAngleP8Kalman_tddd>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001fe4:	b5b0      	push	{r4, r5, r7, lr}
 8001fe6:	b092      	sub	sp, #72	@ 0x48
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ff6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001ffa:	f7fe f8b5 	bl	8000168 <__aeabi_dsub>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800200c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002010:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002014:	f7fe fa60 	bl	80004d8 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f7fe f8a4 	bl	800016c <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800203a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800203e:	f7fe fa4b 	bl	80004d8 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002050:	f7fe f88a 	bl	8000168 <__aeabi_dsub>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002062:	f7fe f881 	bl	8000168 <__aeabi_dsub>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe f87a 	bl	800016c <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002084:	f7fe fa28 	bl	80004d8 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe f86c 	bl	800016c <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80020aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80020ae:	f7fe fa13 	bl	80004d8 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4620      	mov	r0, r4
 80020b8:	4629      	mov	r1, r5
 80020ba:	f7fe f855 	bl	8000168 <__aeabi_dsub>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80020d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80020d8:	f7fe f9fe 	bl	80004d8 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f840 	bl	8000168 <__aeabi_dsub>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002102:	f7fe f9e9 	bl	80004d8 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f7fe f82d 	bl	800016c <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002128:	f7fe f820 	bl	800016c <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800213a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800213e:	f7fe faf5 	bl	800072c <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002154:	f7fe faea 	bl	800072c <__aeabi_ddiv>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216a:	f7fd fffd 	bl	8000168 <__aeabi_dsub>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800217c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002184:	f7fe f9a8 	bl	80004d8 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	f7fd ffec 	bl	800016c <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021ac:	f7fe f994 	bl	80004d8 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4620      	mov	r0, r4
 80021b6:	4629      	mov	r1, r5
 80021b8:	f7fd ffd8 	bl	800016c <__adddf3>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80021cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80021d6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80021e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021e8:	f7fe f976 	bl	80004d8 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fd ffb8 	bl	8000168 <__aeabi_dsub>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800220c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002210:	f7fe f962 	bl	80004d8 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4620      	mov	r0, r4
 800221a:	4629      	mov	r1, r5
 800221c:	f7fd ffa4 	bl	8000168 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	68f9      	ldr	r1, [r7, #12]
 8002226:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002230:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002238:	f7fe f94e 	bl	80004d8 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fd ff90 	bl	8000168 <__aeabi_dsub>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002258:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800225c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002260:	f7fe f93a 	bl	80004d8 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4620      	mov	r0, r4
 800226a:	4629      	mov	r1, r5
 800226c:	f7fd ff7c 	bl	8000168 <__aeabi_dsub>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	68f9      	ldr	r1, [r7, #12]
 8002276:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	3748      	adds	r7, #72	@ 0x48
 8002286:	46bd      	mov	sp, r7
 8002288:	bdb0      	pop	{r4, r5, r7, pc}

0800228a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe f8b6 	bl	8000404 <__aeabi_i2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f004 fd96 	bl	8006dd0 <sqrt>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80022b2:	b5b0      	push	{r4, r5, r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
      return atan2(__type(__y), __type(__x));
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe f8a0 	bl	8000404 <__aeabi_i2d>
 80022c4:	4604      	mov	r4, r0
 80022c6:	460d      	mov	r5, r1
 80022c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f899 	bl	8000404 <__aeabi_i2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f004 fd77 	bl	8006dcc <atan2>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
    }
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}

080022ec <_Z11Compute_PIDR3PIDd>:
#include "pid.h"
#include "utils.h"

double Compute_PID(PID &pid, double measure){
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	e9c7 2300 	strd	r2, r3, [r7]
	double error = pid.setpoint - measure;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002302:	f7fd ff31 	bl	8000168 <__aeabi_dsub>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid.integral += error;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002318:	f7fd ff28 	bl	800016c <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	e9c1 2306 	strd	r2, r3, [r1, #24]
    uint32_t derivative = error - pid.previous_error;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fd ff1a 	bl	8000168 <__aeabi_dsub>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f7fe fba4 	bl	8000a88 <__aeabi_d2uiz>
 8002340:	4603      	mov	r3, r0
 8002342:	617b      	str	r3, [r7, #20]
    pid.previous_error = error;
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    pid.integral = Constrain(-1000, 1000, pid.integral);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fb96 	bl	8000a88 <__aeabi_d2uiz>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002364:	4820      	ldr	r0, [pc, #128]	@ (80023e8 <_Z11Compute_PIDR3PIDd+0xfc>)
 8002366:	f000 fc6b 	bl	8002c40 <_Z9Constrainmmm>
 800236a:	4603      	mov	r3, r0
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f839 	bl	80003e4 <__aeabi_ui2d>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	e9c1 2306 	strd	r2, r3, [r1, #24]

    return (pid.Kp * error) + (pid.Ki * pid.integral) + (pid.Kd * derivative);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f82f 	bl	80003e4 <__aeabi_ui2d>
 8002386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800238a:	f7fe f8a5 	bl	80004d8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4614      	mov	r4, r2
 8002394:	461d      	mov	r5, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f822 	bl	80003e4 <__aeabi_ui2d>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023a6:	f7fe f897 	bl	80004d8 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fd fedb 	bl	800016c <__adddf3>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4614      	mov	r4, r2
 80023bc:	461d      	mov	r5, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f80b 	bl	80003e4 <__aeabi_ui2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fd fec9 	bl	800016c <__adddf3>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
}
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	fffffc18 	.word	0xfffffc18

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f2:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_MspInit+0xa4>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	4a26      	ldr	r2, [pc, #152]	@ (8002490 <HAL_MspInit+0xa4>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6193      	str	r3, [r2, #24]
 80023fe:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_MspInit+0xa4>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_MspInit+0xa4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a20      	ldr	r2, [pc, #128]	@ (8002490 <HAL_MspInit+0xa4>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <HAL_MspInit+0xa4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2101      	movs	r1, #1
 8002426:	f06f 000b 	mvn.w	r0, #11
 800242a:	f000 fda4 	bl	8002f76 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2101      	movs	r1, #1
 8002432:	f06f 000a 	mvn.w	r0, #10
 8002436:	f000 fd9e 	bl	8002f76 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2101      	movs	r1, #1
 800243e:	f06f 0009 	mvn.w	r0, #9
 8002442:	f000 fd98 	bl	8002f76 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	210f      	movs	r1, #15
 800244a:	f06f 0004 	mvn.w	r0, #4
 800244e:	f000 fd92 	bl	8002f76 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	210f      	movs	r1, #15
 8002456:	f06f 0003 	mvn.w	r0, #3
 800245a:	f000 fd8c 	bl	8002f76 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	210f      	movs	r1, #15
 8002462:	f06f 0001 	mvn.w	r0, #1
 8002466:	f000 fd86 	bl	8002f76 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_MspInit+0xa8>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	4a04      	ldr	r2, [pc, #16]	@ (8002494 <HAL_MspInit+0xa8>)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <NMI_Handler+0x4>

080024a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <HardFault_Handler+0x4>

080024a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <MemManage_Handler+0x4>

080024b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <UsageFault_Handler+0x4>

080024c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e8:	f000 fc2e 	bl	8002d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWM_Killswitch_Pin);
 80024f4:	2010      	movs	r0, #16
 80024f6:	f001 f9e3 	bl	80038c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <DMA1_Channel4_IRQHandler+0x10>)
 8002506:	f000 fedb 	bl	80032c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000710 	.word	0x20000710

08002514 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWM_Pitch_Pin);
 8002518:	2020      	movs	r0, #32
 800251a:	f001 f9d1 	bl	80038c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PWM_Thrust_Pin);
 800251e:	2040      	movs	r0, #64	@ 0x40
 8002520:	f001 f9ce 	bl	80038c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PWM_Yaw_Pin);
 8002524:	2080      	movs	r0, #128	@ 0x80
 8002526:	f001 f9cb 	bl	80038c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PWM_Roll_Pin);
 800252a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800252e:	f001 f9c7 	bl	80038c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <USART1_IRQHandler+0x10>)
 800253e:	f003 fe47 	bl	80061d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200006c8 	.word	0x200006c8

0800254c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return 1;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <_kill>:

int _kill(int pid, int sig)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002564:	f005 fd9e 	bl	80080a4 <__errno>
 8002568:	4603      	mov	r3, r0
 800256a:	2216      	movs	r2, #22
 800256c:	601a      	str	r2, [r3, #0]
  return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <_exit>:

void _exit (int status)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002582:	f04f 31ff 	mov.w	r1, #4294967295
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffe7 	bl	800255a <_kill>
  while (1) {}    /* Make sure we hang here */
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <_exit+0x12>

08002590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e00a      	b.n	80025b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025a2:	f3af 8000 	nop.w
 80025a6:	4601      	mov	r1, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf0      	blt.n	80025a2 <_read+0x12>
  }

  return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e009      	b.n	80025f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf1      	blt.n	80025dc <_write+0x12>
  }
  return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_close>:

int _close(int file)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002628:	605a      	str	r2, [r3, #4]
  return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <_isatty>:

int _isatty(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800266c:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <_sbrk+0x5c>)
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <_sbrk+0x60>)
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002678:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <_sbrk+0x64>)
 8002682:	4a12      	ldr	r2, [pc, #72]	@ (80026cc <_sbrk+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	429a      	cmp	r2, r3
 8002692:	d207      	bcs.n	80026a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002694:	f005 fd06 	bl	80080a4 <__errno>
 8002698:	4603      	mov	r3, r0
 800269a:	220c      	movs	r2, #12
 800269c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e009      	b.n	80026b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a05      	ldr	r2, [pc, #20]	@ (80026c8 <_sbrk+0x64>)
 80026b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20005000 	.word	0x20005000
 80026c4:	00000400 	.word	0x00000400
 80026c8:	20000634 	.word	0x20000634
 80026cc:	200008a8 	.word	0x200008a8

080026d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e2:	f107 0308 	add.w	r3, r7, #8
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f0:	463b      	mov	r3, r7
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <MX_TIM1_Init+0x98>)
 80026fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <MX_TIM1_Init+0x9c>)
 80026fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80026fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <MX_TIM1_Init+0x98>)
 8002700:	2247      	movs	r2, #71	@ 0x47
 8002702:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <MX_TIM1_Init+0x98>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535 ;
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <MX_TIM1_Init+0x98>)
 800270c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002710:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002712:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <MX_TIM1_Init+0x98>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002718:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <MX_TIM1_Init+0x98>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <MX_TIM1_Init+0x98>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002724:	4813      	ldr	r0, [pc, #76]	@ (8002774 <MX_TIM1_Init+0x98>)
 8002726:	f002 fd59 	bl	80051dc <HAL_TIM_Base_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002730:	f7ff f9b6 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002738:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	4619      	mov	r1, r3
 8002740:	480c      	ldr	r0, [pc, #48]	@ (8002774 <MX_TIM1_Init+0x98>)
 8002742:	f002 ffa1 	bl	8005688 <HAL_TIM_ConfigClockSource>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800274c:	f7ff f9a8 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002758:	463b      	mov	r3, r7
 800275a:	4619      	mov	r1, r3
 800275c:	4805      	ldr	r0, [pc, #20]	@ (8002774 <MX_TIM1_Init+0x98>)
 800275e:	f003 fb69 	bl	8005e34 <HAL_TIMEx_MasterConfigSynchronization>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002768:	f7ff f99a 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000638 	.word	0x20000638
 8002778:	40012c00 	.word	0x40012c00

0800277c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	@ 0x38
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002790:	f107 0320 	add.w	r3, r7, #32
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ac:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40 - 1;
 80027b4:	4b3b      	ldr	r3, [pc, #236]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027b6:	2227      	movs	r2, #39	@ 0x27
 80027b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ba:	4b3a      	ldr	r3, [pc, #232]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000 - 1;
 80027c0:	4b38      	ldr	r3, [pc, #224]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027c2:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80027c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c8:	4b36      	ldr	r3, [pc, #216]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ce:	4b35      	ldr	r3, [pc, #212]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027d0:	2280      	movs	r2, #128	@ 0x80
 80027d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027d4:	4833      	ldr	r0, [pc, #204]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027d6:	f002 fd01 	bl	80051dc <HAL_TIM_Base_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80027e0:	f7ff f95e 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027ee:	4619      	mov	r1, r3
 80027f0:	482c      	ldr	r0, [pc, #176]	@ (80028a4 <MX_TIM2_Init+0x128>)
 80027f2:	f002 ff49 	bl	8005688 <HAL_TIM_ConfigClockSource>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80027fc:	f7ff f950 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002800:	4828      	ldr	r0, [pc, #160]	@ (80028a4 <MX_TIM2_Init+0x128>)
 8002802:	f002 fd85 	bl	8005310 <HAL_TIM_PWM_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800280c:	f7ff f948 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002818:	f107 0320 	add.w	r3, r7, #32
 800281c:	4619      	mov	r1, r3
 800281e:	4821      	ldr	r0, [pc, #132]	@ (80028a4 <MX_TIM2_Init+0x128>)
 8002820:	f003 fb08 	bl	8005e34 <HAL_TIMEx_MasterConfigSynchronization>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800282a:	f7ff f939 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282e:	2360      	movs	r3, #96	@ 0x60
 8002830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	4817      	ldr	r0, [pc, #92]	@ (80028a4 <MX_TIM2_Init+0x128>)
 8002846:	f002 fe5d 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002850:	f7ff f926 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2204      	movs	r2, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4812      	ldr	r0, [pc, #72]	@ (80028a4 <MX_TIM2_Init+0x128>)
 800285c:	f002 fe52 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002866:	f7ff f91b 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	2208      	movs	r2, #8
 800286e:	4619      	mov	r1, r3
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <MX_TIM2_Init+0x128>)
 8002872:	f002 fe47 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800287c:	f7ff f910 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	220c      	movs	r2, #12
 8002884:	4619      	mov	r1, r3
 8002886:	4807      	ldr	r0, [pc, #28]	@ (80028a4 <MX_TIM2_Init+0x128>)
 8002888:	f002 fe3c 	bl	8005504 <HAL_TIM_PWM_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002892:	f7ff f905 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002896:	4803      	ldr	r0, [pc, #12]	@ (80028a4 <MX_TIM2_Init+0x128>)
 8002898:	f000 f836 	bl	8002908 <HAL_TIM_MspPostInit>

}
 800289c:	bf00      	nop
 800289e:	3738      	adds	r7, #56	@ 0x38
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000680 	.word	0x20000680

080028a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <HAL_TIM_Base_MspInit+0x58>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_TIM_Base_MspInit+0x5c>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_TIM_Base_MspInit+0x5c>)
 80028c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028c4:	6193      	str	r3, [r2, #24]
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HAL_TIM_Base_MspInit+0x5c>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028d2:	e010      	b.n	80028f6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d10b      	bne.n	80028f6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <HAL_TIM_Base_MspInit+0x5c>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a08      	ldr	r2, [pc, #32]	@ (8002904 <HAL_TIM_Base_MspInit+0x5c>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_TIM_Base_MspInit+0x5c>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40021000 	.word	0x40021000

08002908 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002926:	d117      	bne.n	8002958 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <HAL_TIM_MspPostInit+0x58>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a0c      	ldr	r2, [pc, #48]	@ (8002960 <HAL_TIM_MspPostInit+0x58>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <HAL_TIM_MspPostInit+0x58>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002940:	230f      	movs	r3, #15
 8002942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2302      	movs	r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	4619      	mov	r1, r3
 8002952:	4804      	ldr	r0, [pc, #16]	@ (8002964 <HAL_TIM_MspPostInit+0x5c>)
 8002954:	f000 fde8 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	40010800 	.word	0x40010800

08002968 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <MX_USART1_UART_Init+0x50>)
 8002970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 8002974:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800297a:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002986:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 800298e:	220c      	movs	r2, #12
 8002990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002992:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800299e:	4805      	ldr	r0, [pc, #20]	@ (80029b4 <MX_USART1_UART_Init+0x4c>)
 80029a0:	f003 faca 	bl	8005f38 <HAL_UART_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029aa:	f7ff f879 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200006c8 	.word	0x200006c8
 80029b8:	40013800 	.word	0x40013800

080029bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a33      	ldr	r2, [pc, #204]	@ (8002aa4 <HAL_UART_MspInit+0xe8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d15f      	bne.n	8002a9c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029dc:	4b32      	ldr	r3, [pc, #200]	@ (8002aa8 <HAL_UART_MspInit+0xec>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a31      	ldr	r2, [pc, #196]	@ (8002aa8 <HAL_UART_MspInit+0xec>)
 80029e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa8 <HAL_UART_MspInit+0xec>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f4:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa8 <HAL_UART_MspInit+0xec>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa8 <HAL_UART_MspInit+0xec>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6193      	str	r3, [r2, #24]
 8002a00:	4b29      	ldr	r3, [pc, #164]	@ (8002aa8 <HAL_UART_MspInit+0xec>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 0310 	add.w	r3, r7, #16
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4822      	ldr	r0, [pc, #136]	@ (8002aac <HAL_UART_MspInit+0xf0>)
 8002a22:	f000 fd81 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	4619      	mov	r1, r3
 8002a3a:	481c      	ldr	r0, [pc, #112]	@ (8002aac <HAL_UART_MspInit+0xf0>)
 8002a3c:	f000 fd74 	bl	8003528 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a42:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab4 <HAL_UART_MspInit+0xf8>)
 8002a44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a48:	2210      	movs	r2, #16
 8002a4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b17      	ldr	r3, [pc, #92]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5e:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a6a:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a70:	480f      	ldr	r0, [pc, #60]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a72:	f000 fab7 	bl	8002fe4 <HAL_DMA_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002a7c:	f7ff f810 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a84:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <HAL_UART_MspInit+0xf4>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2025      	movs	r0, #37	@ 0x25
 8002a92:	f000 fa70 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a96:	2025      	movs	r0, #37	@ 0x25
 8002a98:	f000 fa89 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010800 	.word	0x40010800
 8002ab0:	20000710 	.word	0x20000710
 8002ab4:	40020044 	.word	0x40020044

08002ab8 <debug_uart>:
  }
}

/* USER CODE BEGIN 1 */

void debug_uart(const char *message){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	int message_len = strlen(message);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fd fb45 	bl	8000150 <strlen>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *)message, (uint16_t)message_len, 100);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	2364      	movs	r3, #100	@ 0x64
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4803      	ldr	r0, [pc, #12]	@ (8002ae0 <debug_uart+0x28>)
 8002ad4:	f003 fa80 	bl	8005fd8 <HAL_UART_Transmit>
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200006c8 	.word	0x200006c8

08002ae4 <_ZN13MovingAverageC1Em>:
#include "utils.h"

MovingAverage::MovingAverage(uint32_t windowSize) :
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
	_windowSize(windowSize), _sum(0), _count(0), _index(0){
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
	for(int i{0}; i < AVERAGE_SIZE; ++i){
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e009      	b.n	8002b20 <_ZN13MovingAverageC1Em+0x3c>
		_data[i] = 1500;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	3204      	adds	r2, #4
 8002b12:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i{0}; i < AVERAGE_SIZE; ++i){
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b1d      	cmp	r3, #29
 8002b24:	ddf2      	ble.n	8002b0c <_ZN13MovingAverageC1Em+0x28>
	}
}
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <_ZN13MovingAverageD1Ev>:

MovingAverage::~MovingAverage(){
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]

}
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <_ZNV13MovingAverage8addValueEm>:

void MovingAverage::addValue(uint32_t value) volatile{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
	if(_count < _windowSize){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	bf34      	ite	cc
 8002b5c:	2301      	movcc	r3, #1
 8002b5e:	2300      	movcs	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <_ZNV13MovingAverage8addValueEm+0x38>
		_sum += value;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	441a      	add	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]
		_count++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	e00c      	b.n	8002b98 <_ZNV13MovingAverage8addValueEm+0x52>
	}
	else{
		_sum = _sum - _data[_index] + value;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68d9      	ldr	r1, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3104      	adds	r1, #4
 8002b8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	441a      	add	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	605a      	str	r2, [r3, #4]
	}

	_data[_index] = value;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3204      	adds	r2, #4
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	_index = (_index + 1) % _windowSize;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bb4:	fb01 f202 	mul.w	r2, r1, r2
 8002bb8:	1a9a      	subs	r2, r3, r2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <_ZNVK13MovingAverage10getAverageEv>:

uint32_t MovingAverage::getAverage() const volatile{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	if(_count == 0){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <_ZNVK13MovingAverage10getAverageEv+0x1e>
		return 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e005      	b.n	8002bf2 <_ZNVK13MovingAverage10getAverageEv+0x2a>
	}
	return _sum / _count;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <_Z3mapRKmS0_S0_S0_S0_>:

uint32_t map(uint32_t const &x, uint32_t const &in_min, uint32_t const &in_max, uint32_t const &out_min, uint32_t const &out_max){
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	6811      	ldr	r1, [r2, #0]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	1a8a      	subs	r2, r1, r2
 8002c1e:	fb03 f202 	mul.w	r2, r3, r2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4413      	add	r3, r2
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <_Z9Constrainmmm>:

uint32_t Constrain(uint32_t min, uint32_t max, uint32_t value){
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
	if(value > max){
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d901      	bls.n	8002c58 <_Z9Constrainmmm+0x18>
		return max;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	e006      	b.n	8002c66 <_Z9Constrainmmm+0x26>
	}
	else if(value < min){
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d201      	bcs.n	8002c64 <_Z9Constrainmmm+0x24>
		return min;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	e000      	b.n	8002c66 <_Z9Constrainmmm+0x26>
	}
	return value;
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c70:	f7ff fd2e 	bl	80026d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c74:	480b      	ldr	r0, [pc, #44]	@ (8002ca4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c76:	490c      	ldr	r1, [pc, #48]	@ (8002ca8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c78:	4a0c      	ldr	r2, [pc, #48]	@ (8002cac <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a09      	ldr	r2, [pc, #36]	@ (8002cb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c8c:	4c09      	ldr	r4, [pc, #36]	@ (8002cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c9a:	f005 fa09 	bl	80080b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c9e:	f7fe fa8b 	bl	80011b8 <main>
  bx lr
 8002ca2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca8:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002cac:	0800a628 	.word	0x0800a628
  ldr r2, =_sbss
 8002cb0:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002cb4:	200008a4 	.word	0x200008a4

08002cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cb8:	e7fe      	b.n	8002cb8 <ADC1_2_IRQHandler>
	...

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc0:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <HAL_Init+0x28>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a07      	ldr	r2, [pc, #28]	@ (8002ce4 <HAL_Init+0x28>)
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f000 f947 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd2:	200f      	movs	r0, #15
 8002cd4:	f000 f808 	bl	8002ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd8:	f7ff fb88 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf0:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <HAL_InitTick+0x54>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <HAL_InitTick+0x58>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f95f 	bl	8002fca <HAL_SYSTICK_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00e      	b.n	8002d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d80a      	bhi.n	8002d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f000 f927 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d28:	4a06      	ldr	r2, [pc, #24]	@ (8002d44 <HAL_InitTick+0x5c>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200000a8 	.word	0x200000a8
 8002d40:	200000b0 	.word	0x200000b0
 8002d44:	200000ac 	.word	0x200000ac

08002d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_IncTick+0x1c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_IncTick+0x20>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4a03      	ldr	r2, [pc, #12]	@ (8002d68 <HAL_IncTick+0x20>)
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	200000b0 	.word	0x200000b0
 8002d68:	20000754 	.word	0x20000754

08002d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b02      	ldr	r3, [pc, #8]	@ (8002d7c <HAL_GetTick+0x10>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	20000754 	.word	0x20000754

08002d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff fff0 	bl	8002d6c <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d005      	beq.n	8002da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_Delay+0x44>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002da6:	bf00      	nop
 8002da8:	f7ff ffe0 	bl	8002d6c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d8f7      	bhi.n	8002da8 <HAL_Delay+0x28>
  {
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200000b0 	.word	0x200000b0

08002dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <__NVIC_GetPriorityGrouping+0x18>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 0307 	and.w	r3, r3, #7
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	db0b      	blt.n	8002e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4906      	ldr	r1, [pc, #24]	@ (8002e60 <__NVIC_EnableIRQ+0x34>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	@ (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	@ (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	@ 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
         );
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	@ 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff90 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff2d 	bl	8002dc8 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff42 	bl	8002e10 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff90 	bl	8002eb8 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5f 	bl	8002e64 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff35 	bl	8002e2c <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e043      	b.n	8003082 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b22      	ldr	r3, [pc, #136]	@ (800308c <HAL_DMA_Init+0xa8>)
 8003002:	4413      	add	r3, r2
 8003004:	4a22      	ldr	r2, [pc, #136]	@ (8003090 <HAL_DMA_Init+0xac>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	009a      	lsls	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1f      	ldr	r2, [pc, #124]	@ (8003094 <HAL_DMA_Init+0xb0>)
 8003016:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800302e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003032:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	bffdfff8 	.word	0xbffdfff8
 8003090:	cccccccd 	.word	0xcccccccd
 8003094:	40020000 	.word	0x40020000

08003098 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_DMA_Start_IT+0x20>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e04b      	b.n	8003150 <HAL_DMA_Start_IT+0xb8>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d13a      	bne.n	8003142 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f9eb 	bl	80034cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 020e 	orr.w	r2, r2, #14
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e00f      	b.n	8003130 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0204 	bic.w	r2, r2, #4
 800311e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 020a 	orr.w	r2, r2, #10
 800312e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e005      	b.n	800314e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800314a:	2302      	movs	r3, #2
 800314c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d008      	beq.n	8003182 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2204      	movs	r2, #4
 8003174:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e020      	b.n	80031c4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 020e 	bic.w	r2, r2, #14
 8003190:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d005      	beq.n	80031f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e051      	b.n	8003298 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020e 	bic.w	r2, r2, #14
 8003202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <HAL_DMA_Abort_IT+0xd4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d029      	beq.n	8003272 <HAL_DMA_Abort_IT+0xa2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a21      	ldr	r2, [pc, #132]	@ (80032a8 <HAL_DMA_Abort_IT+0xd8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_Abort_IT+0x9e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_DMA_Abort_IT+0xdc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01a      	beq.n	8003268 <HAL_DMA_Abort_IT+0x98>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1e      	ldr	r2, [pc, #120]	@ (80032b0 <HAL_DMA_Abort_IT+0xe0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d012      	beq.n	8003262 <HAL_DMA_Abort_IT+0x92>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <HAL_DMA_Abort_IT+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00a      	beq.n	800325c <HAL_DMA_Abort_IT+0x8c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1b      	ldr	r2, [pc, #108]	@ (80032b8 <HAL_DMA_Abort_IT+0xe8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d102      	bne.n	8003256 <HAL_DMA_Abort_IT+0x86>
 8003250:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003254:	e00e      	b.n	8003274 <HAL_DMA_Abort_IT+0xa4>
 8003256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800325a:	e00b      	b.n	8003274 <HAL_DMA_Abort_IT+0xa4>
 800325c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003260:	e008      	b.n	8003274 <HAL_DMA_Abort_IT+0xa4>
 8003262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003266:	e005      	b.n	8003274 <HAL_DMA_Abort_IT+0xa4>
 8003268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800326c:	e002      	b.n	8003274 <HAL_DMA_Abort_IT+0xa4>
 800326e:	2310      	movs	r3, #16
 8003270:	e000      	b.n	8003274 <HAL_DMA_Abort_IT+0xa4>
 8003272:	2301      	movs	r3, #1
 8003274:	4a11      	ldr	r2, [pc, #68]	@ (80032bc <HAL_DMA_Abort_IT+0xec>)
 8003276:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
    } 
  }
  return status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40020008 	.word	0x40020008
 80032a8:	4002001c 	.word	0x4002001c
 80032ac:	40020030 	.word	0x40020030
 80032b0:	40020044 	.word	0x40020044
 80032b4:	40020058 	.word	0x40020058
 80032b8:	4002006c 	.word	0x4002006c
 80032bc:	40020000 	.word	0x40020000

080032c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	2204      	movs	r2, #4
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d04f      	beq.n	8003388 <HAL_DMA_IRQHandler+0xc8>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d04a      	beq.n	8003388 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0204 	bic.w	r2, r2, #4
 800330e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a66      	ldr	r2, [pc, #408]	@ (80034b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d029      	beq.n	800336e <HAL_DMA_IRQHandler+0xae>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a65      	ldr	r2, [pc, #404]	@ (80034b4 <HAL_DMA_IRQHandler+0x1f4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMA_IRQHandler+0xaa>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a63      	ldr	r2, [pc, #396]	@ (80034b8 <HAL_DMA_IRQHandler+0x1f8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01a      	beq.n	8003364 <HAL_DMA_IRQHandler+0xa4>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a62      	ldr	r2, [pc, #392]	@ (80034bc <HAL_DMA_IRQHandler+0x1fc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d012      	beq.n	800335e <HAL_DMA_IRQHandler+0x9e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a60      	ldr	r2, [pc, #384]	@ (80034c0 <HAL_DMA_IRQHandler+0x200>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x98>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5f      	ldr	r2, [pc, #380]	@ (80034c4 <HAL_DMA_IRQHandler+0x204>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <HAL_DMA_IRQHandler+0x92>
 800334c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003350:	e00e      	b.n	8003370 <HAL_DMA_IRQHandler+0xb0>
 8003352:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003356:	e00b      	b.n	8003370 <HAL_DMA_IRQHandler+0xb0>
 8003358:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800335c:	e008      	b.n	8003370 <HAL_DMA_IRQHandler+0xb0>
 800335e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003362:	e005      	b.n	8003370 <HAL_DMA_IRQHandler+0xb0>
 8003364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003368:	e002      	b.n	8003370 <HAL_DMA_IRQHandler+0xb0>
 800336a:	2340      	movs	r3, #64	@ 0x40
 800336c:	e000      	b.n	8003370 <HAL_DMA_IRQHandler+0xb0>
 800336e:	2304      	movs	r3, #4
 8003370:	4a55      	ldr	r2, [pc, #340]	@ (80034c8 <HAL_DMA_IRQHandler+0x208>)
 8003372:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8094 	beq.w	80034a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003386:	e08e      	b.n	80034a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	2202      	movs	r2, #2
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d056      	beq.n	8003446 <HAL_DMA_IRQHandler+0x186>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d051      	beq.n	8003446 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 020a 	bic.w	r2, r2, #10
 80033be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a38      	ldr	r2, [pc, #224]	@ (80034b0 <HAL_DMA_IRQHandler+0x1f0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d029      	beq.n	8003426 <HAL_DMA_IRQHandler+0x166>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a37      	ldr	r2, [pc, #220]	@ (80034b4 <HAL_DMA_IRQHandler+0x1f4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMA_IRQHandler+0x162>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a35      	ldr	r2, [pc, #212]	@ (80034b8 <HAL_DMA_IRQHandler+0x1f8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01a      	beq.n	800341c <HAL_DMA_IRQHandler+0x15c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a34      	ldr	r2, [pc, #208]	@ (80034bc <HAL_DMA_IRQHandler+0x1fc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d012      	beq.n	8003416 <HAL_DMA_IRQHandler+0x156>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a32      	ldr	r2, [pc, #200]	@ (80034c0 <HAL_DMA_IRQHandler+0x200>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00a      	beq.n	8003410 <HAL_DMA_IRQHandler+0x150>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a31      	ldr	r2, [pc, #196]	@ (80034c4 <HAL_DMA_IRQHandler+0x204>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d102      	bne.n	800340a <HAL_DMA_IRQHandler+0x14a>
 8003404:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003408:	e00e      	b.n	8003428 <HAL_DMA_IRQHandler+0x168>
 800340a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800340e:	e00b      	b.n	8003428 <HAL_DMA_IRQHandler+0x168>
 8003410:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003414:	e008      	b.n	8003428 <HAL_DMA_IRQHandler+0x168>
 8003416:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800341a:	e005      	b.n	8003428 <HAL_DMA_IRQHandler+0x168>
 800341c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003420:	e002      	b.n	8003428 <HAL_DMA_IRQHandler+0x168>
 8003422:	2320      	movs	r3, #32
 8003424:	e000      	b.n	8003428 <HAL_DMA_IRQHandler+0x168>
 8003426:	2302      	movs	r3, #2
 8003428:	4a27      	ldr	r2, [pc, #156]	@ (80034c8 <HAL_DMA_IRQHandler+0x208>)
 800342a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d034      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003444:	e02f      	b.n	80034a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	2208      	movs	r2, #8
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d028      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x1e8>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 020e 	bic.w	r2, r2, #14
 800346e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
    }
  }
  return;
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
}
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40020008 	.word	0x40020008
 80034b4:	4002001c 	.word	0x4002001c
 80034b8:	40020030 	.word	0x40020030
 80034bc:	40020044 	.word	0x40020044
 80034c0:	40020058 	.word	0x40020058
 80034c4:	4002006c 	.word	0x4002006c
 80034c8:	40020000 	.word	0x40020000

080034cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d108      	bne.n	800350c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800350a:	e007      	b.n	800351c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
	...

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b08b      	sub	sp, #44	@ 0x2c
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353a:	e169      	b.n	8003810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800353c:	2201      	movs	r2, #1
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	429a      	cmp	r2, r3
 8003556:	f040 8158 	bne.w	800380a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a9a      	ldr	r2, [pc, #616]	@ (80037c8 <HAL_GPIO_Init+0x2a0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d05e      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003564:	4a98      	ldr	r2, [pc, #608]	@ (80037c8 <HAL_GPIO_Init+0x2a0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d875      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800356a:	4a98      	ldr	r2, [pc, #608]	@ (80037cc <HAL_GPIO_Init+0x2a4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d058      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003570:	4a96      	ldr	r2, [pc, #600]	@ (80037cc <HAL_GPIO_Init+0x2a4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d86f      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 8003576:	4a96      	ldr	r2, [pc, #600]	@ (80037d0 <HAL_GPIO_Init+0x2a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d052      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 800357c:	4a94      	ldr	r2, [pc, #592]	@ (80037d0 <HAL_GPIO_Init+0x2a8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d869      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 8003582:	4a94      	ldr	r2, [pc, #592]	@ (80037d4 <HAL_GPIO_Init+0x2ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04c      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003588:	4a92      	ldr	r2, [pc, #584]	@ (80037d4 <HAL_GPIO_Init+0x2ac>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d863      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800358e:	4a92      	ldr	r2, [pc, #584]	@ (80037d8 <HAL_GPIO_Init+0x2b0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d046      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003594:	4a90      	ldr	r2, [pc, #576]	@ (80037d8 <HAL_GPIO_Init+0x2b0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d85d      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800359a:	2b12      	cmp	r3, #18
 800359c:	d82a      	bhi.n	80035f4 <HAL_GPIO_Init+0xcc>
 800359e:	2b12      	cmp	r3, #18
 80035a0:	d859      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 80035a2:	a201      	add	r2, pc, #4	@ (adr r2, 80035a8 <HAL_GPIO_Init+0x80>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	08003623 	.word	0x08003623
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	0800360f 	.word	0x0800360f
 80035b4:	08003651 	.word	0x08003651
 80035b8:	08003657 	.word	0x08003657
 80035bc:	08003657 	.word	0x08003657
 80035c0:	08003657 	.word	0x08003657
 80035c4:	08003657 	.word	0x08003657
 80035c8:	08003657 	.word	0x08003657
 80035cc:	08003657 	.word	0x08003657
 80035d0:	08003657 	.word	0x08003657
 80035d4:	08003657 	.word	0x08003657
 80035d8:	08003657 	.word	0x08003657
 80035dc:	08003657 	.word	0x08003657
 80035e0:	08003657 	.word	0x08003657
 80035e4:	08003657 	.word	0x08003657
 80035e8:	08003657 	.word	0x08003657
 80035ec:	08003605 	.word	0x08003605
 80035f0:	08003619 	.word	0x08003619
 80035f4:	4a79      	ldr	r2, [pc, #484]	@ (80037dc <HAL_GPIO_Init+0x2b4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035fa:	e02c      	b.n	8003656 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	623b      	str	r3, [r7, #32]
          break;
 8003602:	e029      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	3304      	adds	r3, #4
 800360a:	623b      	str	r3, [r7, #32]
          break;
 800360c:	e024      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	3308      	adds	r3, #8
 8003614:	623b      	str	r3, [r7, #32]
          break;
 8003616:	e01f      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	330c      	adds	r3, #12
 800361e:	623b      	str	r3, [r7, #32]
          break;
 8003620:	e01a      	b.n	8003658 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800362a:	2304      	movs	r3, #4
 800362c:	623b      	str	r3, [r7, #32]
          break;
 800362e:	e013      	b.n	8003658 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003638:	2308      	movs	r3, #8
 800363a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	611a      	str	r2, [r3, #16]
          break;
 8003642:	e009      	b.n	8003658 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003644:	2308      	movs	r3, #8
 8003646:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	615a      	str	r2, [r3, #20]
          break;
 800364e:	e003      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003650:	2300      	movs	r3, #0
 8003652:	623b      	str	r3, [r7, #32]
          break;
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x130>
          break;
 8003656:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2bff      	cmp	r3, #255	@ 0xff
 800365c:	d801      	bhi.n	8003662 <HAL_GPIO_Init+0x13a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	e001      	b.n	8003666 <HAL_GPIO_Init+0x13e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2bff      	cmp	r3, #255	@ 0xff
 800366c:	d802      	bhi.n	8003674 <HAL_GPIO_Init+0x14c>
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	e002      	b.n	800367a <HAL_GPIO_Init+0x152>
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	3b08      	subs	r3, #8
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	210f      	movs	r1, #15
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	401a      	ands	r2, r3
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	431a      	orrs	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80b1 	beq.w	800380a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036a8:	4b4d      	ldr	r3, [pc, #308]	@ (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4a4c      	ldr	r2, [pc, #304]	@ (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6193      	str	r3, [r2, #24]
 80036b4:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036c0:	4a48      	ldr	r2, [pc, #288]	@ (80037e4 <HAL_GPIO_Init+0x2bc>)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4013      	ands	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a40      	ldr	r2, [pc, #256]	@ (80037e8 <HAL_GPIO_Init+0x2c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_GPIO_Init+0x1ec>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	@ (80037ec <HAL_GPIO_Init+0x2c4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00d      	beq.n	8003710 <HAL_GPIO_Init+0x1e8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3e      	ldr	r2, [pc, #248]	@ (80037f0 <HAL_GPIO_Init+0x2c8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <HAL_GPIO_Init+0x1e4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a3d      	ldr	r2, [pc, #244]	@ (80037f4 <HAL_GPIO_Init+0x2cc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_GPIO_Init+0x1e0>
 8003704:	2303      	movs	r3, #3
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003708:	2304      	movs	r3, #4
 800370a:	e004      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 800370c:	2302      	movs	r3, #2
 800370e:	e002      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003714:	2300      	movs	r3, #0
 8003716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003718:	f002 0203 	and.w	r2, r2, #3
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	4093      	lsls	r3, r2
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003726:	492f      	ldr	r1, [pc, #188]	@ (80037e4 <HAL_GPIO_Init+0x2bc>)
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003740:	4b2d      	ldr	r3, [pc, #180]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	492c      	ldr	r1, [pc, #176]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800374e:	4b2a      	ldr	r3, [pc, #168]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	43db      	mvns	r3, r3
 8003756:	4928      	ldr	r1, [pc, #160]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003758:	4013      	ands	r3, r2
 800375a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003768:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4922      	ldr	r1, [pc, #136]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
 8003774:	e006      	b.n	8003784 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	43db      	mvns	r3, r3
 800377e:	491e      	ldr	r1, [pc, #120]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003780:	4013      	ands	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4918      	ldr	r1, [pc, #96]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
 800379c:	e006      	b.n	80037ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800379e:	4b16      	ldr	r3, [pc, #88]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	4914      	ldr	r1, [pc, #80]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d021      	beq.n	80037fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	490e      	ldr	r1, [pc, #56]	@ (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e021      	b.n	800380a <HAL_GPIO_Init+0x2e2>
 80037c6:	bf00      	nop
 80037c8:	10320000 	.word	0x10320000
 80037cc:	10310000 	.word	0x10310000
 80037d0:	10220000 	.word	0x10220000
 80037d4:	10210000 	.word	0x10210000
 80037d8:	10120000 	.word	0x10120000
 80037dc:	10110000 	.word	0x10110000
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40010800 	.word	0x40010800
 80037ec:	40010c00 	.word	0x40010c00
 80037f0:	40011000 	.word	0x40011000
 80037f4:	40011400 	.word	0x40011400
 80037f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_GPIO_Init+0x304>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	43db      	mvns	r3, r3
 8003804:	4909      	ldr	r1, [pc, #36]	@ (800382c <HAL_GPIO_Init+0x304>)
 8003806:	4013      	ands	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	3301      	adds	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	f47f ae8e 	bne.w	800353c <HAL_GPIO_Init+0x14>
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	372c      	adds	r7, #44	@ 0x2c
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40010400 	.word	0x40010400

08003830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	e001      	b.n	8003852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	807b      	strh	r3, [r7, #2]
 800386a:	4613      	mov	r3, r2
 800386c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800386e:	787b      	ldrb	r3, [r7, #1]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800387a:	e003      	b.n	8003884 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	041a      	lsls	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	611a      	str	r2, [r3, #16]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038a0:	887a      	ldrh	r2, [r7, #2]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4013      	ands	r3, r2
 80038a6:	041a      	lsls	r2, r3, #16
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	400b      	ands	r3, r1
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	611a      	str	r2, [r3, #16]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038ca:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038d6:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd ffa2 	bl	8001828 <HAL_GPIO_EXTI_Callback>
  }
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40010400 	.word	0x40010400

080038f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e12b      	b.n	8003b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fc0e 	bl	8001138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	@ 0x24
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003954:	f001 fbfc 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8003958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4a81      	ldr	r2, [pc, #516]	@ (8003b64 <HAL_I2C_Init+0x274>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d807      	bhi.n	8003974 <HAL_I2C_Init+0x84>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a80      	ldr	r2, [pc, #512]	@ (8003b68 <HAL_I2C_Init+0x278>)
 8003968:	4293      	cmp	r3, r2
 800396a:	bf94      	ite	ls
 800396c:	2301      	movls	r3, #1
 800396e:	2300      	movhi	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e006      	b.n	8003982 <HAL_I2C_Init+0x92>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a7d      	ldr	r2, [pc, #500]	@ (8003b6c <HAL_I2C_Init+0x27c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0e7      	b.n	8003b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a78      	ldr	r2, [pc, #480]	@ (8003b70 <HAL_I2C_Init+0x280>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0c9b      	lsrs	r3, r3, #18
 8003994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b64 <HAL_I2C_Init+0x274>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d802      	bhi.n	80039c4 <HAL_I2C_Init+0xd4>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3301      	adds	r3, #1
 80039c2:	e009      	b.n	80039d8 <HAL_I2C_Init+0xe8>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	4a69      	ldr	r2, [pc, #420]	@ (8003b74 <HAL_I2C_Init+0x284>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	099b      	lsrs	r3, r3, #6
 80039d6:	3301      	adds	r3, #1
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	495c      	ldr	r1, [pc, #368]	@ (8003b64 <HAL_I2C_Init+0x274>)
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d819      	bhi.n	8003a2c <HAL_I2C_Init+0x13c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e59      	subs	r1, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a06:	1c59      	adds	r1, r3, #1
 8003a08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_I2C_Init+0x138>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1e59      	subs	r1, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a26:	e051      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	e04f      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d111      	bne.n	8003a58 <HAL_I2C_Init+0x168>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e012      	b.n	8003a7e <HAL_I2C_Init+0x18e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1e58      	subs	r0, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	0099      	lsls	r1, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Init+0x196>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e022      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <HAL_I2C_Init+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e58      	subs	r0, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	440b      	add	r3, r1
 8003a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aaa:	e00f      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	0099      	lsls	r1, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	6809      	ldr	r1, [r1, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003afa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6911      	ldr	r1, [r2, #16]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	000186a0 	.word	0x000186a0
 8003b68:	001e847f 	.word	0x001e847f
 8003b6c:	003d08ff 	.word	0x003d08ff
 8003b70:	431bde83 	.word	0x431bde83
 8003b74:	10624dd3 	.word	0x10624dd3

08003b78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b92:	f7ff f8eb 	bl	8002d6c <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f040 80d9 	bne.w	8003d58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2319      	movs	r3, #25
 8003bac:	2201      	movs	r2, #1
 8003bae:	496d      	ldr	r1, [pc, #436]	@ (8003d64 <HAL_I2C_Mem_Write+0x1ec>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fccd 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e0cc      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_I2C_Mem_Write+0x56>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0c5      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d007      	beq.n	8003bf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2221      	movs	r2, #33	@ 0x21
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2240      	movs	r2, #64	@ 0x40
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a4d      	ldr	r2, [pc, #308]	@ (8003d68 <HAL_I2C_Mem_Write+0x1f0>)
 8003c34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c36:	88f8      	ldrh	r0, [r7, #6]
 8003c38:	893a      	ldrh	r2, [r7, #8]
 8003c3a:	8979      	ldrh	r1, [r7, #10]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4603      	mov	r3, r0
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fb04 	bl	8004254 <I2C_RequestMemoryWrite>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d052      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e081      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fd92 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06b      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_I2C_Mem_Write+0x180>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d017      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1aa      	bne.n	8003c56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fd85 	bl	8004814 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00d      	beq.n	8003d2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d107      	bne.n	8003d28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e016      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	00100002 	.word	0x00100002
 8003d68:	ffff0000 	.word	0xffff0000

08003d6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	4608      	mov	r0, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	817b      	strh	r3, [r7, #10]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	813b      	strh	r3, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d8a:	f7fe ffef 	bl	8002d6c <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	f040 8250 	bne.w	800423e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2319      	movs	r3, #25
 8003da4:	2201      	movs	r2, #1
 8003da6:	4982      	ldr	r1, [pc, #520]	@ (8003fb0 <HAL_I2C_Mem_Read+0x244>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fbd1 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
 8003db6:	e243      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x5a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e23c      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d007      	beq.n	8003dec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2222      	movs	r2, #34	@ 0x22
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2240      	movs	r2, #64	@ 0x40
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a62      	ldr	r2, [pc, #392]	@ (8003fb4 <HAL_I2C_Mem_Read+0x248>)
 8003e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e2e:	88f8      	ldrh	r0, [r7, #6]
 8003e30:	893a      	ldrh	r2, [r7, #8]
 8003e32:	8979      	ldrh	r1, [r7, #10]
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fa9e 	bl	8004380 <I2C_RequestMemoryRead>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1f8      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d113      	bne.n	8003e7e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e1cc      	b.n	8004218 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d11e      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e96:	b672      	cpsid	i
}
 8003e98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ec0:	b662      	cpsie	i
}
 8003ec2:	e035      	b.n	8003f30 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d11e      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003edc:	b672      	cpsid	i
}
 8003ede:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f06:	b662      	cpsie	i
}
 8003f08:	e012      	b.n	8003f30 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f30:	e172      	b.n	8004218 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	f200 811f 	bhi.w	800417a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d123      	bne.n	8003f8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fcab 	bl	80048a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e173      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f8a:	e145      	b.n	8004218 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d152      	bne.n	800403a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4906      	ldr	r1, [pc, #24]	@ (8003fb8 <HAL_I2C_Mem_Read+0x24c>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fad6 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e148      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
 8003fae:	bf00      	nop
 8003fb0:	00100002 	.word	0x00100002
 8003fb4:	ffff0000 	.word	0xffff0000
 8003fb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003fbc:	b672      	cpsid	i
}
 8003fbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004002:	b662      	cpsie	i
}
 8004004:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004038:	e0ee      	b.n	8004218 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004040:	2200      	movs	r2, #0
 8004042:	4981      	ldr	r1, [pc, #516]	@ (8004248 <HAL_I2C_Mem_Read+0x4dc>)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fa83 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0f5      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004062:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004064:	b672      	cpsid	i
}
 8004066:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800409a:	4b6c      	ldr	r3, [pc, #432]	@ (800424c <HAL_I2C_Mem_Read+0x4e0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	08db      	lsrs	r3, r3, #3
 80040a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004250 <HAL_I2C_Mem_Read+0x4e4>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	0a1a      	lsrs	r2, r3, #8
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00da      	lsls	r2, r3, #3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d118      	bne.n	80040f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80040e2:	b662      	cpsie	i
}
 80040e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0a6      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d1d9      	bne.n	80040b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004142:	b662      	cpsie	i
}
 8004144:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004178:	e04e      	b.n	8004218 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fb90 	bl	80048a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e058      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d124      	bne.n	8004218 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f ae88 	bne.w	8003f32 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3728      	adds	r7, #40	@ 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	00010004 	.word	0x00010004
 800424c:	200000a8 	.word	0x200000a8
 8004250:	14f8b589 	.word	0x14f8b589

08004254 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800427c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	2200      	movs	r2, #0
 8004286:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f960 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a4:	d103      	bne.n	80042ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e05f      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042b2:	897b      	ldrh	r3, [r7, #10]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	492d      	ldr	r1, [pc, #180]	@ (800437c <I2C_RequestMemoryWrite+0x128>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f9bb 	bl	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e04c      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f0:	6a39      	ldr	r1, [r7, #32]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa46 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	2b04      	cmp	r3, #4
 8004304:	d107      	bne.n	8004316 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e02b      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004320:	893b      	ldrh	r3, [r7, #8]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	e021      	b.n	8004370 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800432c:	893b      	ldrh	r3, [r7, #8]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	6a39      	ldr	r1, [r7, #32]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fa20 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	2b04      	cmp	r3, #4
 8004350:	d107      	bne.n	8004362 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e005      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	00010002 	.word	0x00010002

08004380 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f8c2 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e0:	d103      	bne.n	80043ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0aa      	b.n	8004544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	4952      	ldr	r1, [pc, #328]	@ (800454c <I2C_RequestMemoryRead+0x1cc>)
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f91d 	bl	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e097      	b.n	8004544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442c:	6a39      	ldr	r1, [r7, #32]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f9a8 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00d      	beq.n	8004456 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	2b04      	cmp	r3, #4
 8004440:	d107      	bne.n	8004452 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e076      	b.n	8004544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445c:	893b      	ldrh	r3, [r7, #8]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]
 8004466:	e021      	b.n	80044ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004468:	893b      	ldrh	r3, [r7, #8]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	b29b      	uxth	r3, r3
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004478:	6a39      	ldr	r1, [r7, #32]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f982 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	2b04      	cmp	r3, #4
 800448c:	d107      	bne.n	800449e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e050      	b.n	8004544 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ae:	6a39      	ldr	r1, [r7, #32]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f967 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d107      	bne.n	80044d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e035      	b.n	8004544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f82b 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450e:	d103      	bne.n	8004518 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e013      	b.n	8004544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800451c:	897b      	ldrh	r3, [r7, #10]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	6a3a      	ldr	r2, [r7, #32]
 8004530:	4906      	ldr	r1, [pc, #24]	@ (800454c <I2C_RequestMemoryRead+0x1cc>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f886 	bl	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	00010002 	.word	0x00010002

08004550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004560:	e048      	b.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d044      	beq.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456a:	f7fe fbff 	bl	8002d6c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d139      	bne.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d10d      	bne.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	43da      	mvns	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4013      	ands	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	e00c      	b.n	80045c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	43da      	mvns	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4013      	ands	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d116      	bne.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e023      	b.n	800463c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10d      	bne.n	800461a <I2C_WaitOnFlagUntilTimeout+0xca>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	43da      	mvns	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	e00c      	b.n	8004634 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	43da      	mvns	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4013      	ands	r3, r2
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	429a      	cmp	r2, r3
 8004638:	d093      	beq.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004652:	e071      	b.n	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004662:	d123      	bne.n	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004672:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800467c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	f043 0204 	orr.w	r2, r3, #4
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e067      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d041      	beq.n	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fb5a 	bl	8002d6c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d136      	bne.n	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10c      	bne.n	80046ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	43da      	mvns	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4013      	ands	r3, r2
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	e00b      	b.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	43da      	mvns	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4013      	ands	r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e021      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10c      	bne.n	800475c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	43da      	mvns	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	e00b      	b.n	8004774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	f47f af6d 	bne.w	8004654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004790:	e034      	b.n	80047fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f8e3 	bl	800495e <I2C_IsAcknowledgeFailed>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e034      	b.n	800480c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d028      	beq.n	80047fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fe fadf 	bl	8002d6c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11d      	bne.n	80047fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ca:	2b80      	cmp	r3, #128	@ 0x80
 80047cc:	d016      	beq.n	80047fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e007      	b.n	800480c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	2b80      	cmp	r3, #128	@ 0x80
 8004808:	d1c3      	bne.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004820:	e034      	b.n	800488c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f89b 	bl	800495e <I2C_IsAcknowledgeFailed>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e034      	b.n	800489c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d028      	beq.n	800488c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483a:	f7fe fa97 	bl	8002d6c <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11d      	bne.n	800488c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d016      	beq.n	800488c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e007      	b.n	800489c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b04      	cmp	r3, #4
 8004898:	d1c3      	bne.n	8004822 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048b0:	e049      	b.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d119      	bne.n	80048f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0210 	mvn.w	r2, #16
 80048c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e030      	b.n	8004956 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f4:	f7fe fa3a 	bl	8002d6c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11d      	bne.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004914:	2b40      	cmp	r3, #64	@ 0x40
 8004916:	d016      	beq.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e007      	b.n	8004956 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b40      	cmp	r3, #64	@ 0x40
 8004952:	d1ae      	bne.n	80048b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004974:	d11b      	bne.n	80049ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800497e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f043 0204 	orr.w	r2, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr
	...

080049bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e272      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8087 	beq.w	8004aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049dc:	4b92      	ldr	r3, [pc, #584]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d00c      	beq.n	8004a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d112      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
 80049f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a00:	d10b      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a02:	4b89      	ldr	r3, [pc, #548]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d06c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d168      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e24c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x76>
 8004a24:	4b80      	ldr	r3, [pc, #512]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a7f      	ldr	r2, [pc, #508]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e02e      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x98>
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a7a      	ldr	r2, [pc, #488]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b78      	ldr	r3, [pc, #480]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a77      	ldr	r2, [pc, #476]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0xbc>
 8004a5e:	4b72      	ldr	r3, [pc, #456]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a71      	ldr	r2, [pc, #452]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a78:	4b6b      	ldr	r3, [pc, #428]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b68      	ldr	r3, [pc, #416]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a67      	ldr	r2, [pc, #412]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fe f968 	bl	8002d6c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fe f964 	bl	8002d6c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	@ 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e200      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xe4>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fe f954 	bl	8002d6c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fe f950 	bl	8002d6c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1ec      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	4b53      	ldr	r3, [pc, #332]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x10c>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004af6:	4b4c      	ldr	r3, [pc, #304]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b02:	4b49      	ldr	r3, [pc, #292]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d11c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x18c>
 8004b0e:	4b46      	ldr	r3, [pc, #280]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	4b43      	ldr	r3, [pc, #268]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x176>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1c0      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b32:	4b3d      	ldr	r3, [pc, #244]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4939      	ldr	r1, [pc, #228]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	e03a      	b.n	8004bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b50:	4b36      	ldr	r3, [pc, #216]	@ (8004c2c <HAL_RCC_OscConfig+0x270>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fe f909 	bl	8002d6c <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fe f905 	bl	8002d6c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1a1      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	4b2d      	ldr	r3, [pc, #180]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4927      	ldr	r1, [pc, #156]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	e015      	b.n	8004bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b26      	ldr	r3, [pc, #152]	@ (8004c2c <HAL_RCC_OscConfig+0x270>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b98:	f7fe f8e8 	bl	8002d6c <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fe f8e4 	bl	8002d6c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e180      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d03a      	beq.n	8004c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d019      	beq.n	8004c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd2:	4b17      	ldr	r3, [pc, #92]	@ (8004c30 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd8:	f7fe f8c8 	bl	8002d6c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fe f8c4 	bl	8002d6c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e160      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f000 face 	bl	80051a0 <RCC_Delay>
 8004c04:	e01c      	b.n	8004c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c06:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <HAL_RCC_OscConfig+0x274>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fe f8ae 	bl	8002d6c <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c12:	e00f      	b.n	8004c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fe f8aa 	bl	8002d6c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d908      	bls.n	8004c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e146      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	42420000 	.word	0x42420000
 8004c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	4b92      	ldr	r3, [pc, #584]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e9      	bne.n	8004c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80a6 	beq.w	8004d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b8b      	ldr	r3, [pc, #556]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	4b88      	ldr	r3, [pc, #544]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4a87      	ldr	r2, [pc, #540]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	61d3      	str	r3, [r2, #28]
 8004c6a:	4b85      	ldr	r3, [pc, #532]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7a:	4b82      	ldr	r3, [pc, #520]	@ (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d118      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c86:	4b7f      	ldr	r3, [pc, #508]	@ (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c92:	f7fe f86b 	bl	8002d6c <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9a:	f7fe f867 	bl	8002d6c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b64      	cmp	r3, #100	@ 0x64
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e103      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	4b75      	ldr	r3, [pc, #468]	@ (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x312>
 8004cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6213      	str	r3, [r2, #32]
 8004ccc:	e02d      	b.n	8004d2a <HAL_RCC_OscConfig+0x36e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x334>
 8004cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4a69      	ldr	r2, [pc, #420]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6213      	str	r3, [r2, #32]
 8004ce2:	4b67      	ldr	r3, [pc, #412]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a66      	ldr	r2, [pc, #408]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	6213      	str	r3, [r2, #32]
 8004cee:	e01c      	b.n	8004d2a <HAL_RCC_OscConfig+0x36e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCC_OscConfig+0x356>
 8004cf8:	4b61      	ldr	r3, [pc, #388]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	4a60      	ldr	r2, [pc, #384]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	6213      	str	r3, [r2, #32]
 8004d04:	4b5e      	ldr	r3, [pc, #376]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4a5d      	ldr	r2, [pc, #372]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6213      	str	r3, [r2, #32]
 8004d10:	e00b      	b.n	8004d2a <HAL_RCC_OscConfig+0x36e>
 8004d12:	4b5b      	ldr	r3, [pc, #364]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4a5a      	ldr	r2, [pc, #360]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6213      	str	r3, [r2, #32]
 8004d1e:	4b58      	ldr	r3, [pc, #352]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	4a57      	ldr	r2, [pc, #348]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d015      	beq.n	8004d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fe f81b 	bl	8002d6c <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fe f817 	bl	8002d6c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0b1      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	4b4b      	ldr	r3, [pc, #300]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ee      	beq.n	8004d3a <HAL_RCC_OscConfig+0x37e>
 8004d5c:	e014      	b.n	8004d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5e:	f7fe f805 	bl	8002d6c <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fe f801 	bl	8002d6c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e09b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7c:	4b40      	ldr	r3, [pc, #256]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ee      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4a3b      	ldr	r2, [pc, #236]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8087 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da4:	4b36      	ldr	r3, [pc, #216]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d061      	beq.n	8004e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d146      	bne.n	8004e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db8:	4b33      	ldr	r3, [pc, #204]	@ (8004e88 <HAL_RCC_OscConfig+0x4cc>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fd ffd5 	bl	8002d6c <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd ffd1 	bl	8002d6c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e06d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd8:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dec:	d108      	bne.n	8004e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4921      	ldr	r1, [pc, #132]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e00:	4b1f      	ldr	r3, [pc, #124]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a19      	ldr	r1, [r3, #32]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	430b      	orrs	r3, r1
 8004e12:	491b      	ldr	r1, [pc, #108]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <HAL_RCC_OscConfig+0x4cc>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fd ffa5 	bl	8002d6c <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fd ffa1 	bl	8002d6c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e03d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e38:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x46a>
 8004e44:	e035      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b10      	ldr	r3, [pc, #64]	@ (8004e88 <HAL_RCC_OscConfig+0x4cc>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fd ff8e 	bl	8002d6c <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd ff8a 	bl	8002d6c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e026      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x498>
 8004e72:	e01e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e019      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40007000 	.word	0x40007000
 8004e88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_RCC_OscConfig+0x500>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0d0      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d910      	bls.n	8004f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b67      	ldr	r3, [pc, #412]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 0207 	bic.w	r2, r3, #7
 8004eea:	4965      	ldr	r1, [pc, #404]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b63      	ldr	r3, [pc, #396]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0b8      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f1c:	4b59      	ldr	r3, [pc, #356]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a58      	ldr	r2, [pc, #352]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f34:	4b53      	ldr	r3, [pc, #332]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a52      	ldr	r2, [pc, #328]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f40:	4b50      	ldr	r3, [pc, #320]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	494d      	ldr	r1, [pc, #308]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d040      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	4b47      	ldr	r3, [pc, #284]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d115      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e07f      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	4b41      	ldr	r3, [pc, #260]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e073      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06b      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f9e:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f023 0203 	bic.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4936      	ldr	r1, [pc, #216]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd fedc 	bl	8002d6c <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fd fed8 	bl	8002d6c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e053      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	4b2d      	ldr	r3, [pc, #180]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 020c 	and.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d1eb      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b27      	ldr	r3, [pc, #156]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d210      	bcs.n	8005010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b24      	ldr	r3, [pc, #144]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 0207 	bic.w	r2, r3, #7
 8004ff6:	4922      	ldr	r1, [pc, #136]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b20      	ldr	r3, [pc, #128]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e032      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800501c:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4916      	ldr	r1, [pc, #88]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d009      	beq.n	800504e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800503a:	4b12      	ldr	r3, [pc, #72]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	490e      	ldr	r1, [pc, #56]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800504e:	f000 f821 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8005052:	4602      	mov	r2, r0
 8005054:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	490a      	ldr	r1, [pc, #40]	@ (8005088 <HAL_RCC_ClockConfig+0x1c8>)
 8005060:	5ccb      	ldrb	r3, [r1, r3]
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	4a09      	ldr	r2, [pc, #36]	@ (800508c <HAL_RCC_ClockConfig+0x1cc>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800506a:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <HAL_RCC_ClockConfig+0x1d0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fd fe3a 	bl	8002ce8 <HAL_InitTick>

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	0800a204 	.word	0x0800a204
 800508c:	200000a8 	.word	0x200000a8
 8005090:	200000ac 	.word	0x200000ac

08005094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x94>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d002      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x30>
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x36>
 80050c2:	e027      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050c4:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_RCC_GetSysClockFreq+0x98>)
 80050c6:	613b      	str	r3, [r7, #16]
      break;
 80050c8:	e027      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	0c9b      	lsrs	r3, r3, #18
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	4a17      	ldr	r2, [pc, #92]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d010      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050e2:	4b11      	ldr	r3, [pc, #68]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x94>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	0c5b      	lsrs	r3, r3, #17
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	4a11      	ldr	r2, [pc, #68]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050ee:	5cd3      	ldrb	r3, [r2, r3]
 80050f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	@ (800512c <HAL_RCC_GetSysClockFreq+0x98>)
 80050f6:	fb03 f202 	mul.w	r2, r3, r2
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e004      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a0c      	ldr	r2, [pc, #48]	@ (8005138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005108:	fb02 f303 	mul.w	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	613b      	str	r3, [r7, #16]
      break;
 8005112:	e002      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005114:	4b05      	ldr	r3, [pc, #20]	@ (800512c <HAL_RCC_GetSysClockFreq+0x98>)
 8005116:	613b      	str	r3, [r7, #16]
      break;
 8005118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800511a:	693b      	ldr	r3, [r7, #16]
}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	007a1200 	.word	0x007a1200
 8005130:	0800a21c 	.word	0x0800a21c
 8005134:	0800a22c 	.word	0x0800a22c
 8005138:	003d0900 	.word	0x003d0900

0800513c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005140:	4b02      	ldr	r3, [pc, #8]	@ (800514c <HAL_RCC_GetHCLKFreq+0x10>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	200000a8 	.word	0x200000a8

08005150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005154:	f7ff fff2 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b05      	ldr	r3, [pc, #20]	@ (8005170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4903      	ldr	r1, [pc, #12]	@ (8005174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	0800a214 	.word	0x0800a214

08005178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800517c:	f7ff ffde 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	0adb      	lsrs	r3, r3, #11
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	@ (800519c <HAL_RCC_GetPCLK2Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	0800a214 	.word	0x0800a214

080051a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051a8:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <RCC_Delay+0x34>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0a      	ldr	r2, [pc, #40]	@ (80051d8 <RCC_Delay+0x38>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0a5b      	lsrs	r3, r3, #9
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051bc:	bf00      	nop
  }
  while (Delay --);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1e5a      	subs	r2, r3, #1
 80051c2:	60fa      	str	r2, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f9      	bne.n	80051bc <RCC_Delay+0x1c>
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	200000a8 	.word	0x200000a8
 80051d8:	10624dd3 	.word	0x10624dd3

080051dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e041      	b.n	8005272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd fb50 	bl	80028a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 fafc 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d001      	beq.n	8005294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e032      	b.n	80052fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a18      	ldr	r2, [pc, #96]	@ (8005304 <HAL_TIM_Base_Start+0x88>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_Base_Start+0x48>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_Base_Start+0x48>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a14      	ldr	r2, [pc, #80]	@ (8005308 <HAL_TIM_Base_Start+0x8c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start+0x48>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a13      	ldr	r2, [pc, #76]	@ (800530c <HAL_TIM_Base_Start+0x90>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d111      	bne.n	80052e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d010      	beq.n	80052f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e6:	e007      	b.n	80052f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800

08005310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e041      	b.n	80053a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f839 	bl	80053ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f000 fa62 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <HAL_TIM_PWM_Start+0x24>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	bf14      	ite	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	2300      	moveq	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e022      	b.n	800542a <HAL_TIM_PWM_Start+0x6a>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d109      	bne.n	80053fe <HAL_TIM_PWM_Start+0x3e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	bf14      	ite	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	2300      	moveq	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	e015      	b.n	800542a <HAL_TIM_PWM_Start+0x6a>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d109      	bne.n	8005418 <HAL_TIM_PWM_Start+0x58>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e008      	b.n	800542a <HAL_TIM_PWM_Start+0x6a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e05e      	b.n	80054f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0x82>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005440:	e013      	b.n	800546a <HAL_TIM_PWM_Start+0xaa>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d104      	bne.n	8005452 <HAL_TIM_PWM_Start+0x92>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005450:	e00b      	b.n	800546a <HAL_TIM_PWM_Start+0xaa>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d104      	bne.n	8005462 <HAL_TIM_PWM_Start+0xa2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005460:	e003      	b.n	800546a <HAL_TIM_PWM_Start+0xaa>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2201      	movs	r2, #1
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fc5c 	bl	8005d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1e      	ldr	r2, [pc, #120]	@ (80054f8 <HAL_TIM_PWM_Start+0x138>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d107      	bne.n	8005492 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005490:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a18      	ldr	r2, [pc, #96]	@ (80054f8 <HAL_TIM_PWM_Start+0x138>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_TIM_PWM_Start+0xfa>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a4:	d009      	beq.n	80054ba <HAL_TIM_PWM_Start+0xfa>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a14      	ldr	r2, [pc, #80]	@ (80054fc <HAL_TIM_PWM_Start+0x13c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_TIM_PWM_Start+0xfa>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a12      	ldr	r2, [pc, #72]	@ (8005500 <HAL_TIM_PWM_Start+0x140>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d111      	bne.n	80054de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d010      	beq.n	80054ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054dc:	e007      	b.n	80054ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800

08005504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800551e:	2302      	movs	r3, #2
 8005520:	e0ae      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	f200 809f 	bhi.w	8005670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005532:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800556d 	.word	0x0800556d
 800553c:	08005671 	.word	0x08005671
 8005540:	08005671 	.word	0x08005671
 8005544:	08005671 	.word	0x08005671
 8005548:	080055ad 	.word	0x080055ad
 800554c:	08005671 	.word	0x08005671
 8005550:	08005671 	.word	0x08005671
 8005554:	08005671 	.word	0x08005671
 8005558:	080055ef 	.word	0x080055ef
 800555c:	08005671 	.word	0x08005671
 8005560:	08005671 	.word	0x08005671
 8005564:	08005671 	.word	0x08005671
 8005568:	0800562f 	.word	0x0800562f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f9be 	bl	80058f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	619a      	str	r2, [r3, #24]
      break;
 80055aa:	e064      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fa04 	bl	80059c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	619a      	str	r2, [r3, #24]
      break;
 80055ec:	e043      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fa4d 	bl	8005a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0208 	orr.w	r2, r2, #8
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0204 	bic.w	r2, r2, #4
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	61da      	str	r2, [r3, #28]
      break;
 800562c:	e023      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fa97 	bl	8005b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69d9      	ldr	r1, [r3, #28]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	021a      	lsls	r2, r3, #8
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	61da      	str	r2, [r3, #28]
      break;
 800566e:	e002      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_ConfigClockSource+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0b4      	b.n	800580e <HAL_TIM_ConfigClockSource+0x186>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056dc:	d03e      	beq.n	800575c <HAL_TIM_ConfigClockSource+0xd4>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e2:	f200 8087 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ea:	f000 8086 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x172>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f2:	d87f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b70      	cmp	r3, #112	@ 0x70
 80056f6:	d01a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xa6>
 80056f8:	2b70      	cmp	r3, #112	@ 0x70
 80056fa:	d87b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b60      	cmp	r3, #96	@ 0x60
 80056fe:	d050      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005700:	2b60      	cmp	r3, #96	@ 0x60
 8005702:	d877      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b50      	cmp	r3, #80	@ 0x50
 8005706:	d03c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0xfa>
 8005708:	2b50      	cmp	r3, #80	@ 0x50
 800570a:	d873      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d058      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d86f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b30      	cmp	r3, #48	@ 0x30
 8005716:	d064      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b30      	cmp	r3, #48	@ 0x30
 800571a:	d86b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d060      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d867      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d05a      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	e062      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800573e:	f000 fad8 	bl	8005cf2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	609a      	str	r2, [r3, #8]
      break;
 800575a:	e04f      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800576c:	f000 fac1 	bl	8005cf2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800577e:	609a      	str	r2, [r3, #8]
      break;
 8005780:	e03c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578e:	461a      	mov	r2, r3
 8005790:	f000 fa38 	bl	8005c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2150      	movs	r1, #80	@ 0x50
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fa8f 	bl	8005cbe <TIM_ITRx_SetConfig>
      break;
 80057a0:	e02c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 fa56 	bl	8005c60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2160      	movs	r1, #96	@ 0x60
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fa7f 	bl	8005cbe <TIM_ITRx_SetConfig>
      break;
 80057c0:	e01c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 fa18 	bl	8005c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2140      	movs	r1, #64	@ 0x40
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fa6f 	bl	8005cbe <TIM_ITRx_SetConfig>
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f000 fa66 	bl	8005cbe <TIM_ITRx_SetConfig>
      break;
 80057f2:	e003      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a2f      	ldr	r2, [pc, #188]	@ (80058e8 <TIM_Base_SetConfig+0xd0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_Base_SetConfig+0x30>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005836:	d007      	beq.n	8005848 <TIM_Base_SetConfig+0x30>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a2c      	ldr	r2, [pc, #176]	@ (80058ec <TIM_Base_SetConfig+0xd4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x30>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a2b      	ldr	r2, [pc, #172]	@ (80058f0 <TIM_Base_SetConfig+0xd8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a22      	ldr	r2, [pc, #136]	@ (80058e8 <TIM_Base_SetConfig+0xd0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0x62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0x62>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1f      	ldr	r2, [pc, #124]	@ (80058ec <TIM_Base_SetConfig+0xd4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0x62>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <TIM_Base_SetConfig+0xd8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0d      	ldr	r2, [pc, #52]	@ (80058e8 <TIM_Base_SetConfig+0xd0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d103      	bne.n	80058c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]
  }
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800

080058f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f023 0201 	bic.w	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f023 0302 	bic.w	r3, r3, #2
 800593c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a1c      	ldr	r2, [pc, #112]	@ (80059bc <TIM_OC1_SetConfig+0xc8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d10c      	bne.n	800596a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f023 0308 	bic.w	r3, r3, #8
 8005956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f023 0304 	bic.w	r3, r3, #4
 8005968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a13      	ldr	r2, [pc, #76]	@ (80059bc <TIM_OC1_SetConfig+0xc8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d111      	bne.n	8005996 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	621a      	str	r2, [r3, #32]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00

080059c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f023 0210 	bic.w	r2, r3, #16
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0320 	bic.w	r3, r3, #32
 8005a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <TIM_OC2_SetConfig+0xd0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10d      	bne.n	8005a3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a14      	ldr	r2, [pc, #80]	@ (8005a90 <TIM_OC2_SetConfig+0xd0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d113      	bne.n	8005a6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00

08005a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1d      	ldr	r2, [pc, #116]	@ (8005b64 <TIM_OC3_SetConfig+0xd0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10d      	bne.n	8005b0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <TIM_OC3_SetConfig+0xd0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00

08005b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8005c00 <TIM_OC4_SetConfig+0x98>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d109      	bne.n	8005bdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr
 8005c00:	40012c00 	.word	0x40012c00

08005c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f023 0201 	bic.w	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f023 030a 	bic.w	r3, r3, #10
 8005c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f023 0210 	bic.w	r2, r3, #16
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	031b      	lsls	r3, r3, #12
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f043 0307 	orr.w	r3, r3, #7
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	609a      	str	r2, [r3, #8]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr

08005cf2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b087      	sub	sp, #28
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	021a      	lsls	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	609a      	str	r2, [r3, #8]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	401a      	ands	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f8b0 	bl	8005ef0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIMEx_PWMN_Stop+0x48>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <HAL_TIMEx_PWMN_Stop+0x78>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d107      	bne.n	8005df0 <HAL_TIMEx_PWMN_Stop+0x78>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <HAL_TIMEx_PWMN_Stop+0x88>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dfe:	e013      	b.n	8005e28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d104      	bne.n	8005e10 <HAL_TIMEx_PWMN_Stop+0x98>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e0e:	e00b      	b.n	8005e28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d104      	bne.n	8005e20 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e1e:	e003      	b.n	8005e28 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e046      	b.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a16      	ldr	r2, [pc, #88]	@ (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a10      	ldr	r2, [pc, #64]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10c      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800

08005ef0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2204      	movs	r2, #4
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1a      	ldr	r2, [r3, #32]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	401a      	ands	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e042      	b.n	8005fd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fc fd2c 	bl	80029bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2224      	movs	r2, #36	@ 0x24
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fe97 	bl	8006cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695a      	ldr	r2, [r3, #20]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	@ 0x28
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d175      	bne.n	80060e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_UART_Transmit+0x2c>
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e06e      	b.n	80060e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2221      	movs	r2, #33	@ 0x21
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006016:	f7fc fea9 	bl	8002d6c <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	88fa      	ldrh	r2, [r7, #6]
 8006026:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006030:	d108      	bne.n	8006044 <HAL_UART_Transmit+0x6c>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	e003      	b.n	800604c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006048:	2300      	movs	r3, #0
 800604a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800604c:	e02e      	b.n	80060ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2200      	movs	r2, #0
 8006056:	2180      	movs	r1, #128	@ 0x80
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fc0d 	bl	8006878 <UART_WaitOnFlagUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e03a      	b.n	80060e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	3302      	adds	r3, #2
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	e007      	b.n	800609e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	3301      	adds	r3, #1
 800609c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1cb      	bne.n	800604e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2200      	movs	r2, #0
 80060be:	2140      	movs	r1, #64	@ 0x40
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fbd9 	bl	8006878 <UART_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e006      	b.n	80060e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e000      	b.n	80060e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80060e4:	2302      	movs	r3, #2
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	@ 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b20      	cmp	r3, #32
 8006108:	d156      	bne.n	80061b8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_UART_Transmit_DMA+0x26>
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e04f      	b.n	80061ba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2221      	movs	r2, #33	@ 0x21
 8006136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613e:	4a21      	ldr	r2, [pc, #132]	@ (80061c4 <HAL_UART_Transmit_DMA+0xd4>)
 8006140:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006146:	4a20      	ldr	r2, [pc, #128]	@ (80061c8 <HAL_UART_Transmit_DMA+0xd8>)
 8006148:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614e:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <HAL_UART_Transmit_DMA+0xdc>)
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	2200      	movs	r2, #0
 8006158:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006166:	6819      	ldr	r1, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	461a      	mov	r2, r3
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	f7fc ff91 	bl	8003098 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800617e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	617b      	str	r3, [r7, #20]
   return(result);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80061a2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6a39      	ldr	r1, [r7, #32]
 80061a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e5      	bne.n	8006180 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e000      	b.n	80061ba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
  }
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3730      	adds	r7, #48	@ 0x30
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	0800672f 	.word	0x0800672f
 80061c8:	080067c9 	.word	0x080067c9
 80061cc:	080067e5 	.word	0x080067e5

080061d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b0ba      	sub	sp, #232	@ 0xe8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800620e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_UART_IRQHandler+0x66>
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fc7f 	bl	8006b32 <UART_Receive_IT>
      return;
 8006234:	e25b      	b.n	80066ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80de 	beq.w	80063fc <HAL_UART_IRQHandler+0x22c>
 8006240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006250:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80d1 	beq.w	80063fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <HAL_UART_IRQHandler+0xae>
 8006266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006276:	f043 0201 	orr.w	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <HAL_UART_IRQHandler+0xd2>
 800628a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629a:	f043 0202 	orr.w	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_UART_IRQHandler+0xf6>
 80062ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	f043 0204 	orr.w	r2, r3, #4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d011      	beq.n	80062f6 <HAL_UART_IRQHandler+0x126>
 80062d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	f043 0208 	orr.w	r2, r3, #8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 81f2 	beq.w	80066e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_UART_IRQHandler+0x14e>
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc0a 	bl	8006b32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	bf14      	ite	ne
 800632c:	2301      	movne	r3, #1
 800632e:	2300      	moveq	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <HAL_UART_IRQHandler+0x17a>
 8006342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d04f      	beq.n	80063ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fb14 	bl	8006978 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d041      	beq.n	80063e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800637c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3314      	adds	r3, #20
 8006386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800638a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800638e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1d9      	bne.n	800635e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	4a7e      	ldr	r2, [pc, #504]	@ (80065b0 <HAL_UART_IRQHandler+0x3e0>)
 80063b8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fc ff06 	bl	80031d0 <HAL_DMA_Abort_IT>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	e00e      	b.n	80063f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f993 	bl	8006706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	e00a      	b.n	80063f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f98f 	bl	8006706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	e006      	b.n	80063f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f98b 	bl	8006706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80063f6:	e175      	b.n	80066e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	bf00      	nop
    return;
 80063fa:	e173      	b.n	80066e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006400:	2b01      	cmp	r3, #1
 8006402:	f040 814f 	bne.w	80066a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 8148 	beq.w	80066a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006418:	f003 0310 	and.w	r3, r3, #16
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8141 	beq.w	80066a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60bb      	str	r3, [r7, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80b6 	beq.w	80065b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8145 	beq.w	80066e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006466:	429a      	cmp	r2, r3
 8006468:	f080 813e 	bcs.w	80066e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006472:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b20      	cmp	r3, #32
 800647c:	f000 8088 	beq.w	8006590 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006496:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800649a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800649e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1d9      	bne.n	8006480 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80064dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3314      	adds	r3, #20
 80064ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80064f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80064f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e1      	bne.n	80064cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800651a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800651e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3314      	adds	r3, #20
 8006528:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800652c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800652e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006532:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800653a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e3      	bne.n	8006508 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800655e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006560:	f023 0310 	bic.w	r3, r3, #16
 8006564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006572:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006574:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e3      	bne.n	800654e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658a:	4618      	mov	r0, r3
 800658c:	f7fc fde4 	bl	8003158 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8b6 	bl	8006718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065ac:	e09c      	b.n	80066e8 <HAL_UART_IRQHandler+0x518>
 80065ae:	bf00      	nop
 80065b0:	08006a3d 	.word	0x08006a3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 808e 	beq.w	80066ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80065d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8089 	beq.w	80066ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80065fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006600:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800660c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e3      	bne.n	80065da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	623b      	str	r3, [r7, #32]
   return(result);
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006636:	633a      	str	r2, [r7, #48]	@ 0x30
 8006638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800663c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e3      	bne.n	8006612 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	60fb      	str	r3, [r7, #12]
   return(result);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0310 	bic.w	r3, r3, #16
 800666e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800667c:	61fa      	str	r2, [r7, #28]
 800667e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	617b      	str	r3, [r7, #20]
   return(result);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e3      	bne.n	8006658 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f83b 	bl	8006718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066a2:	e023      	b.n	80066ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_UART_IRQHandler+0x4f4>
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f9d1 	bl	8006a64 <UART_Transmit_IT>
    return;
 80066c2:	e014      	b.n	80066ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <HAL_UART_IRQHandler+0x51e>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fa10 	bl	8006b02 <UART_EndTransmit_IT>
    return;
 80066e2:	e004      	b.n	80066ee <HAL_UART_IRQHandler+0x51e>
    return;
 80066e4:	bf00      	nop
 80066e6:	e002      	b.n	80066ee <HAL_UART_IRQHandler+0x51e>
      return;
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <HAL_UART_IRQHandler+0x51e>
      return;
 80066ec:	bf00      	nop
  }
}
 80066ee:	37e8      	adds	r7, #232	@ 0xe8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b090      	sub	sp, #64	@ 0x40
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d137      	bne.n	80067ba <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800674a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800674c:	2200      	movs	r2, #0
 800674e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3314      	adds	r3, #20
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	623b      	str	r3, [r7, #32]
   return(result);
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006770:	633a      	str	r2, [r7, #48]	@ 0x30
 8006772:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	60fb      	str	r3, [r7, #12]
   return(result);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
 800679c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067a4:	61fa      	str	r2, [r7, #28]
 80067a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	69b9      	ldr	r1, [r7, #24]
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	617b      	str	r3, [r7, #20]
   return(result);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067b8:	e002      	b.n	80067c0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80067ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80067bc:	f7fb f988 	bl	8001ad0 <HAL_UART_TxCpltCallback>
}
 80067c0:	bf00      	nop
 80067c2:	3740      	adds	r7, #64	@ 0x40
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7fb f988 	bl	8001aec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b21      	cmp	r3, #33	@ 0x21
 8006816:	d108      	bne.n	800682a <UART_DMAError+0x46>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006824:	68b8      	ldr	r0, [r7, #8]
 8006826:	f000 f880 	bl	800692a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	bf14      	ite	ne
 8006838:	2301      	movne	r3, #1
 800683a:	2300      	moveq	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b22      	cmp	r3, #34	@ 0x22
 800684a:	d108      	bne.n	800685e <UART_DMAError+0x7a>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f000 f88d 	bl	8006978 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006862:	f043 0210 	orr.w	r2, r3, #16
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	f7ff ff4b 	bl	8006706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006888:	e03b      	b.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d037      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006892:	f7fc fa6b 	bl	8002d6c <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	6a3a      	ldr	r2, [r7, #32]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d302      	bcc.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e03a      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d023      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b80      	cmp	r3, #128	@ 0x80
 80068be:	d020      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b40      	cmp	r3, #64	@ 0x40
 80068c4:	d01d      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d116      	bne.n	8006902 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f844 	bl	8006978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2208      	movs	r2, #8
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e00f      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	429a      	cmp	r2, r3
 800691e:	d0b4      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800692a:	b480      	push	{r7}
 800692c:	b089      	sub	sp, #36	@ 0x24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	60bb      	str	r3, [r7, #8]
   return(result);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	61ba      	str	r2, [r7, #24]
 8006954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	613b      	str	r3, [r7, #16]
   return(result);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e5      	bne.n	8006932 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800696e:	bf00      	nop
 8006970:	3724      	adds	r7, #36	@ 0x24
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b095      	sub	sp, #84	@ 0x54
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	330c      	adds	r3, #12
 800699e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e5      	bne.n	8006980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3314      	adds	r3, #20
 80069ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3314      	adds	r3, #20
 80069d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d119      	bne.n	8006a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f023 0310 	bic.w	r3, r3, #16
 8006a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a10:	61ba      	str	r2, [r7, #24]
 8006a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6979      	ldr	r1, [r7, #20]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e5      	bne.n	80069f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a32:	bf00      	nop
 8006a34:	3754      	adds	r7, #84	@ 0x54
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff fe55 	bl	8006706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b21      	cmp	r3, #33	@ 0x21
 8006a76:	d13e      	bne.n	8006af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a80:	d114      	bne.n	8006aac <UART_Transmit_IT+0x48>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d110      	bne.n	8006aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	1c9a      	adds	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	621a      	str	r2, [r3, #32]
 8006aaa:	e008      	b.n	8006abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	1c59      	adds	r1, r3, #1
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6211      	str	r1, [r2, #32]
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4619      	mov	r1, r3
 8006acc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10f      	bne.n	8006af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e000      	b.n	8006af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fa ffd4 	bl	8001ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b08c      	sub	sp, #48	@ 0x30
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b22      	cmp	r3, #34	@ 0x22
 8006b44:	f040 80ae 	bne.w	8006ca4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b50:	d117      	bne.n	8006b82 <UART_Receive_IT+0x50>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d113      	bne.n	8006b82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7a:	1c9a      	adds	r2, r3, #2
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b80:	e026      	b.n	8006bd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b94:	d007      	beq.n	8006ba6 <UART_Receive_IT+0x74>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <UART_Receive_IT+0x82>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	e008      	b.n	8006bc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d15d      	bne.n	8006ca0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0220 	bic.w	r2, r2, #32
 8006bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d135      	bne.n	8006c96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f023 0310 	bic.w	r3, r3, #16
 8006c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	623a      	str	r2, [r7, #32]
 8006c52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	69f9      	ldr	r1, [r7, #28]
 8006c56:	6a3a      	ldr	r2, [r7, #32]
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e5      	bne.n	8006c30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	d10a      	bne.n	8006c88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fd42 	bl	8006718 <HAL_UARTEx_RxEventCallback>
 8006c94:	e002      	b.n	8006c9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff fd2c 	bl	80066f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e002      	b.n	8006ca6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e000      	b.n	8006ca6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ca4:	2302      	movs	r3, #2
  }
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3730      	adds	r7, #48	@ 0x30
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006cea:	f023 030c 	bic.w	r3, r3, #12
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc4 <UART_SetConfig+0x114>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d103      	bne.n	8006d20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d18:	f7fe fa2e 	bl	8005178 <HAL_RCC_GetPCLK2Freq>
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	e002      	b.n	8006d26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fe fa16 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8006d24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009a      	lsls	r2, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	4a22      	ldr	r2, [pc, #136]	@ (8006dc8 <UART_SetConfig+0x118>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	0119      	lsls	r1, r3, #4
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009a      	lsls	r2, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc8 <UART_SetConfig+0x118>)
 8006d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2064      	movs	r0, #100	@ 0x64
 8006d66:	fb00 f303 	mul.w	r3, r0, r3
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	3332      	adds	r3, #50	@ 0x32
 8006d70:	4a15      	ldr	r2, [pc, #84]	@ (8006dc8 <UART_SetConfig+0x118>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d7c:	4419      	add	r1, r3
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009a      	lsls	r2, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d94:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <UART_SetConfig+0x118>)
 8006d96:	fba3 0302 	umull	r0, r3, r3, r2
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2064      	movs	r0, #100	@ 0x64
 8006d9e:	fb00 f303 	mul.w	r3, r0, r3
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	3332      	adds	r3, #50	@ 0x32
 8006da8:	4a07      	ldr	r2, [pc, #28]	@ (8006dc8 <UART_SetConfig+0x118>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	440a      	add	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40013800 	.word	0x40013800
 8006dc8:	51eb851f 	.word	0x51eb851f

08006dcc <atan2>:
 8006dcc:	f000 ba90 	b.w	80072f0 <__ieee754_atan2>

08006dd0 <sqrt>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460f      	mov	r7, r1
 8006dd6:	f000 f9b3 	bl	8007140 <__ieee754_sqrt>
 8006dda:	4632      	mov	r2, r6
 8006ddc:	4604      	mov	r4, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	463b      	mov	r3, r7
 8006de2:	4630      	mov	r0, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	f7f9 fe11 	bl	8000a0c <__aeabi_dcmpun>
 8006dea:	b990      	cbnz	r0, 8006e12 <sqrt+0x42>
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fde2 	bl	80009bc <__aeabi_dcmplt>
 8006df8:	b158      	cbz	r0, 8006e12 <sqrt+0x42>
 8006dfa:	f001 f953 	bl	80080a4 <__errno>
 8006dfe:	2321      	movs	r3, #33	@ 0x21
 8006e00:	2200      	movs	r2, #0
 8006e02:	6003      	str	r3, [r0, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	4610      	mov	r0, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f7f9 fc8f 	bl	800072c <__aeabi_ddiv>
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460d      	mov	r5, r1
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e18 <atan>:
 8006e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	4bbc      	ldr	r3, [pc, #752]	@ (8007110 <atan+0x2f8>)
 8006e1e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8006e22:	429e      	cmp	r6, r3
 8006e24:	4604      	mov	r4, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	468b      	mov	fp, r1
 8006e2a:	d918      	bls.n	8006e5e <atan+0x46>
 8006e2c:	4bb9      	ldr	r3, [pc, #740]	@ (8007114 <atan+0x2fc>)
 8006e2e:	429e      	cmp	r6, r3
 8006e30:	d801      	bhi.n	8006e36 <atan+0x1e>
 8006e32:	d109      	bne.n	8006e48 <atan+0x30>
 8006e34:	b140      	cbz	r0, 8006e48 <atan+0x30>
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 f995 	bl	800016c <__adddf3>
 8006e42:	4604      	mov	r4, r0
 8006e44:	460d      	mov	r5, r1
 8006e46:	e006      	b.n	8006e56 <atan+0x3e>
 8006e48:	f1bb 0f00 	cmp.w	fp, #0
 8006e4c:	f340 8123 	ble.w	8007096 <atan+0x27e>
 8006e50:	a593      	add	r5, pc, #588	@ (adr r5, 80070a0 <atan+0x288>)
 8006e52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	4bae      	ldr	r3, [pc, #696]	@ (8007118 <atan+0x300>)
 8006e60:	429e      	cmp	r6, r3
 8006e62:	d811      	bhi.n	8006e88 <atan+0x70>
 8006e64:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006e68:	429e      	cmp	r6, r3
 8006e6a:	d80a      	bhi.n	8006e82 <atan+0x6a>
 8006e6c:	a38e      	add	r3, pc, #568	@ (adr r3, 80070a8 <atan+0x290>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f7f9 f97b 	bl	800016c <__adddf3>
 8006e76:	2200      	movs	r2, #0
 8006e78:	4ba8      	ldr	r3, [pc, #672]	@ (800711c <atan+0x304>)
 8006e7a:	f7f9 fdbd 	bl	80009f8 <__aeabi_dcmpgt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d1e9      	bne.n	8006e56 <atan+0x3e>
 8006e82:	f04f 3aff 	mov.w	sl, #4294967295
 8006e86:	e027      	b.n	8006ed8 <atan+0xc0>
 8006e88:	f000 f956 	bl	8007138 <fabs>
 8006e8c:	4ba4      	ldr	r3, [pc, #656]	@ (8007120 <atan+0x308>)
 8006e8e:	4604      	mov	r4, r0
 8006e90:	429e      	cmp	r6, r3
 8006e92:	460d      	mov	r5, r1
 8006e94:	f200 80b8 	bhi.w	8007008 <atan+0x1f0>
 8006e98:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006e9c:	429e      	cmp	r6, r3
 8006e9e:	f200 809c 	bhi.w	8006fda <atan+0x1c2>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	f7f9 f961 	bl	800016c <__adddf3>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4b9b      	ldr	r3, [pc, #620]	@ (800711c <atan+0x304>)
 8006eae:	f7f9 f95b 	bl	8000168 <__aeabi_dsub>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	460f      	mov	r7, r1
 8006eb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	f7f9 f954 	bl	800016c <__adddf3>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4630      	mov	r0, r6
 8006eca:	4639      	mov	r1, r7
 8006ecc:	f7f9 fc2e 	bl	800072c <__aeabi_ddiv>
 8006ed0:	f04f 0a00 	mov.w	sl, #0
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	4622      	mov	r2, r4
 8006eda:	462b      	mov	r3, r5
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7f9 fafa 	bl	80004d8 <__aeabi_dmul>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4680      	mov	r8, r0
 8006eea:	4689      	mov	r9, r1
 8006eec:	f7f9 faf4 	bl	80004d8 <__aeabi_dmul>
 8006ef0:	a36f      	add	r3, pc, #444	@ (adr r3, 80070b0 <atan+0x298>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	f7f9 faed 	bl	80004d8 <__aeabi_dmul>
 8006efe:	a36e      	add	r3, pc, #440	@ (adr r3, 80070b8 <atan+0x2a0>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 f932 	bl	800016c <__adddf3>
 8006f08:	4632      	mov	r2, r6
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	f7f9 fae4 	bl	80004d8 <__aeabi_dmul>
 8006f10:	a36b      	add	r3, pc, #428	@ (adr r3, 80070c0 <atan+0x2a8>)
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f7f9 f929 	bl	800016c <__adddf3>
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	f7f9 fadb 	bl	80004d8 <__aeabi_dmul>
 8006f22:	a369      	add	r3, pc, #420	@ (adr r3, 80070c8 <atan+0x2b0>)
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f7f9 f920 	bl	800016c <__adddf3>
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	f7f9 fad2 	bl	80004d8 <__aeabi_dmul>
 8006f34:	a366      	add	r3, pc, #408	@ (adr r3, 80070d0 <atan+0x2b8>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 f917 	bl	800016c <__adddf3>
 8006f3e:	4632      	mov	r2, r6
 8006f40:	463b      	mov	r3, r7
 8006f42:	f7f9 fac9 	bl	80004d8 <__aeabi_dmul>
 8006f46:	a364      	add	r3, pc, #400	@ (adr r3, 80070d8 <atan+0x2c0>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 f90e 	bl	800016c <__adddf3>
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	f7f9 fac0 	bl	80004d8 <__aeabi_dmul>
 8006f58:	a361      	add	r3, pc, #388	@ (adr r3, 80070e0 <atan+0x2c8>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4689      	mov	r9, r1
 8006f62:	4630      	mov	r0, r6
 8006f64:	4639      	mov	r1, r7
 8006f66:	f7f9 fab7 	bl	80004d8 <__aeabi_dmul>
 8006f6a:	a35f      	add	r3, pc, #380	@ (adr r3, 80070e8 <atan+0x2d0>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 f8fa 	bl	8000168 <__aeabi_dsub>
 8006f74:	4632      	mov	r2, r6
 8006f76:	463b      	mov	r3, r7
 8006f78:	f7f9 faae 	bl	80004d8 <__aeabi_dmul>
 8006f7c:	a35c      	add	r3, pc, #368	@ (adr r3, 80070f0 <atan+0x2d8>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f8f1 	bl	8000168 <__aeabi_dsub>
 8006f86:	4632      	mov	r2, r6
 8006f88:	463b      	mov	r3, r7
 8006f8a:	f7f9 faa5 	bl	80004d8 <__aeabi_dmul>
 8006f8e:	a35a      	add	r3, pc, #360	@ (adr r3, 80070f8 <atan+0x2e0>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f7f9 f8e8 	bl	8000168 <__aeabi_dsub>
 8006f98:	4632      	mov	r2, r6
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	f7f9 fa9c 	bl	80004d8 <__aeabi_dmul>
 8006fa0:	a357      	add	r3, pc, #348	@ (adr r3, 8007100 <atan+0x2e8>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 f8df 	bl	8000168 <__aeabi_dsub>
 8006faa:	4632      	mov	r2, r6
 8006fac:	463b      	mov	r3, r7
 8006fae:	f7f9 fa93 	bl	80004d8 <__aeabi_dmul>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 f8d7 	bl	800016c <__adddf3>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	f7f9 fa89 	bl	80004d8 <__aeabi_dmul>
 8006fc6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	d144      	bne.n	800705a <atan+0x242>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	f7f9 f8c8 	bl	8000168 <__aeabi_dsub>
 8006fd8:	e733      	b.n	8006e42 <atan+0x2a>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800711c <atan+0x304>)
 8006fde:	f7f9 f8c3 	bl	8000168 <__aeabi_dsub>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	460f      	mov	r7, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	4b4b      	ldr	r3, [pc, #300]	@ (800711c <atan+0x304>)
 8006fee:	f7f9 f8bd 	bl	800016c <__adddf3>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	f7f9 fb97 	bl	800072c <__aeabi_ddiv>
 8006ffe:	f04f 0a01 	mov.w	sl, #1
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	e767      	b.n	8006ed8 <atan+0xc0>
 8007008:	4b46      	ldr	r3, [pc, #280]	@ (8007124 <atan+0x30c>)
 800700a:	429e      	cmp	r6, r3
 800700c:	d21a      	bcs.n	8007044 <atan+0x22c>
 800700e:	2200      	movs	r2, #0
 8007010:	4b45      	ldr	r3, [pc, #276]	@ (8007128 <atan+0x310>)
 8007012:	f7f9 f8a9 	bl	8000168 <__aeabi_dsub>
 8007016:	2200      	movs	r2, #0
 8007018:	4606      	mov	r6, r0
 800701a:	460f      	mov	r7, r1
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	4b41      	ldr	r3, [pc, #260]	@ (8007128 <atan+0x310>)
 8007022:	f7f9 fa59 	bl	80004d8 <__aeabi_dmul>
 8007026:	2200      	movs	r2, #0
 8007028:	4b3c      	ldr	r3, [pc, #240]	@ (800711c <atan+0x304>)
 800702a:	f7f9 f89f 	bl	800016c <__adddf3>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4630      	mov	r0, r6
 8007034:	4639      	mov	r1, r7
 8007036:	f7f9 fb79 	bl	800072c <__aeabi_ddiv>
 800703a:	f04f 0a02 	mov.w	sl, #2
 800703e:	4604      	mov	r4, r0
 8007040:	460d      	mov	r5, r1
 8007042:	e749      	b.n	8006ed8 <atan+0xc0>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	2000      	movs	r0, #0
 800704a:	4938      	ldr	r1, [pc, #224]	@ (800712c <atan+0x314>)
 800704c:	f7f9 fb6e 	bl	800072c <__aeabi_ddiv>
 8007050:	f04f 0a03 	mov.w	sl, #3
 8007054:	4604      	mov	r4, r0
 8007056:	460d      	mov	r5, r1
 8007058:	e73e      	b.n	8006ed8 <atan+0xc0>
 800705a:	4b35      	ldr	r3, [pc, #212]	@ (8007130 <atan+0x318>)
 800705c:	4e35      	ldr	r6, [pc, #212]	@ (8007134 <atan+0x31c>)
 800705e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f7f9 f87f 	bl	8000168 <__aeabi_dsub>
 800706a:	4622      	mov	r2, r4
 800706c:	462b      	mov	r3, r5
 800706e:	f7f9 f87b 	bl	8000168 <__aeabi_dsub>
 8007072:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800707e:	f7f9 f873 	bl	8000168 <__aeabi_dsub>
 8007082:	f1bb 0f00 	cmp.w	fp, #0
 8007086:	4604      	mov	r4, r0
 8007088:	460d      	mov	r5, r1
 800708a:	f6bf aee4 	bge.w	8006e56 <atan+0x3e>
 800708e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007092:	461d      	mov	r5, r3
 8007094:	e6df      	b.n	8006e56 <atan+0x3e>
 8007096:	a51c      	add	r5, pc, #112	@ (adr r5, 8007108 <atan+0x2f0>)
 8007098:	e9d5 4500 	ldrd	r4, r5, [r5]
 800709c:	e6db      	b.n	8006e56 <atan+0x3e>
 800709e:	bf00      	nop
 80070a0:	54442d18 	.word	0x54442d18
 80070a4:	3ff921fb 	.word	0x3ff921fb
 80070a8:	8800759c 	.word	0x8800759c
 80070ac:	7e37e43c 	.word	0x7e37e43c
 80070b0:	e322da11 	.word	0xe322da11
 80070b4:	3f90ad3a 	.word	0x3f90ad3a
 80070b8:	24760deb 	.word	0x24760deb
 80070bc:	3fa97b4b 	.word	0x3fa97b4b
 80070c0:	a0d03d51 	.word	0xa0d03d51
 80070c4:	3fb10d66 	.word	0x3fb10d66
 80070c8:	c54c206e 	.word	0xc54c206e
 80070cc:	3fb745cd 	.word	0x3fb745cd
 80070d0:	920083ff 	.word	0x920083ff
 80070d4:	3fc24924 	.word	0x3fc24924
 80070d8:	5555550d 	.word	0x5555550d
 80070dc:	3fd55555 	.word	0x3fd55555
 80070e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80070e4:	bfa2b444 	.word	0xbfa2b444
 80070e8:	52defd9a 	.word	0x52defd9a
 80070ec:	3fadde2d 	.word	0x3fadde2d
 80070f0:	af749a6d 	.word	0xaf749a6d
 80070f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80070f8:	fe231671 	.word	0xfe231671
 80070fc:	3fbc71c6 	.word	0x3fbc71c6
 8007100:	9998ebc4 	.word	0x9998ebc4
 8007104:	3fc99999 	.word	0x3fc99999
 8007108:	54442d18 	.word	0x54442d18
 800710c:	bff921fb 	.word	0xbff921fb
 8007110:	440fffff 	.word	0x440fffff
 8007114:	7ff00000 	.word	0x7ff00000
 8007118:	3fdbffff 	.word	0x3fdbffff
 800711c:	3ff00000 	.word	0x3ff00000
 8007120:	3ff2ffff 	.word	0x3ff2ffff
 8007124:	40038000 	.word	0x40038000
 8007128:	3ff80000 	.word	0x3ff80000
 800712c:	bff00000 	.word	0xbff00000
 8007130:	0800a230 	.word	0x0800a230
 8007134:	0800a250 	.word	0x0800a250

08007138 <fabs>:
 8007138:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800713c:	4619      	mov	r1, r3
 800713e:	4770      	bx	lr

08007140 <__ieee754_sqrt>:
 8007140:	4a67      	ldr	r2, [pc, #412]	@ (80072e0 <__ieee754_sqrt+0x1a0>)
 8007142:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007146:	438a      	bics	r2, r1
 8007148:	4606      	mov	r6, r0
 800714a:	460f      	mov	r7, r1
 800714c:	460b      	mov	r3, r1
 800714e:	4604      	mov	r4, r0
 8007150:	d10e      	bne.n	8007170 <__ieee754_sqrt+0x30>
 8007152:	4602      	mov	r2, r0
 8007154:	f7f9 f9c0 	bl	80004d8 <__aeabi_dmul>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4630      	mov	r0, r6
 800715e:	4639      	mov	r1, r7
 8007160:	f7f9 f804 	bl	800016c <__adddf3>
 8007164:	4606      	mov	r6, r0
 8007166:	460f      	mov	r7, r1
 8007168:	4630      	mov	r0, r6
 800716a:	4639      	mov	r1, r7
 800716c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007170:	2900      	cmp	r1, #0
 8007172:	dc0c      	bgt.n	800718e <__ieee754_sqrt+0x4e>
 8007174:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007178:	4302      	orrs	r2, r0
 800717a:	d0f5      	beq.n	8007168 <__ieee754_sqrt+0x28>
 800717c:	b189      	cbz	r1, 80071a2 <__ieee754_sqrt+0x62>
 800717e:	4602      	mov	r2, r0
 8007180:	f7f8 fff2 	bl	8000168 <__aeabi_dsub>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	f7f9 fad0 	bl	800072c <__aeabi_ddiv>
 800718c:	e7ea      	b.n	8007164 <__ieee754_sqrt+0x24>
 800718e:	150a      	asrs	r2, r1, #20
 8007190:	d115      	bne.n	80071be <__ieee754_sqrt+0x7e>
 8007192:	2100      	movs	r1, #0
 8007194:	e009      	b.n	80071aa <__ieee754_sqrt+0x6a>
 8007196:	0ae3      	lsrs	r3, r4, #11
 8007198:	3a15      	subs	r2, #21
 800719a:	0564      	lsls	r4, r4, #21
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0fa      	beq.n	8007196 <__ieee754_sqrt+0x56>
 80071a0:	e7f7      	b.n	8007192 <__ieee754_sqrt+0x52>
 80071a2:	460a      	mov	r2, r1
 80071a4:	e7fa      	b.n	800719c <__ieee754_sqrt+0x5c>
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	3101      	adds	r1, #1
 80071aa:	02d8      	lsls	r0, r3, #11
 80071ac:	d5fb      	bpl.n	80071a6 <__ieee754_sqrt+0x66>
 80071ae:	1e48      	subs	r0, r1, #1
 80071b0:	1a12      	subs	r2, r2, r0
 80071b2:	f1c1 0020 	rsb	r0, r1, #32
 80071b6:	fa24 f000 	lsr.w	r0, r4, r0
 80071ba:	4303      	orrs	r3, r0
 80071bc:	408c      	lsls	r4, r1
 80071be:	2600      	movs	r6, #0
 80071c0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80071c4:	2116      	movs	r1, #22
 80071c6:	07d2      	lsls	r2, r2, #31
 80071c8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80071cc:	4632      	mov	r2, r6
 80071ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071d6:	bf5c      	itt	pl
 80071d8:	005b      	lslpl	r3, r3, #1
 80071da:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80071de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071e2:	bf58      	it	pl
 80071e4:	0064      	lslpl	r4, r4, #1
 80071e6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80071ea:	107f      	asrs	r7, r7, #1
 80071ec:	0064      	lsls	r4, r4, #1
 80071ee:	1815      	adds	r5, r2, r0
 80071f0:	429d      	cmp	r5, r3
 80071f2:	bfde      	ittt	le
 80071f4:	182a      	addle	r2, r5, r0
 80071f6:	1b5b      	suble	r3, r3, r5
 80071f8:	1836      	addle	r6, r6, r0
 80071fa:	0fe5      	lsrs	r5, r4, #31
 80071fc:	3901      	subs	r1, #1
 80071fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007202:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007206:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800720a:	d1f0      	bne.n	80071ee <__ieee754_sqrt+0xae>
 800720c:	460d      	mov	r5, r1
 800720e:	f04f 0a20 	mov.w	sl, #32
 8007212:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007216:	429a      	cmp	r2, r3
 8007218:	eb01 0c00 	add.w	ip, r1, r0
 800721c:	db02      	blt.n	8007224 <__ieee754_sqrt+0xe4>
 800721e:	d113      	bne.n	8007248 <__ieee754_sqrt+0x108>
 8007220:	45a4      	cmp	ip, r4
 8007222:	d811      	bhi.n	8007248 <__ieee754_sqrt+0x108>
 8007224:	f1bc 0f00 	cmp.w	ip, #0
 8007228:	eb0c 0100 	add.w	r1, ip, r0
 800722c:	da42      	bge.n	80072b4 <__ieee754_sqrt+0x174>
 800722e:	2900      	cmp	r1, #0
 8007230:	db40      	blt.n	80072b4 <__ieee754_sqrt+0x174>
 8007232:	f102 0e01 	add.w	lr, r2, #1
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	4672      	mov	r2, lr
 800723a:	45a4      	cmp	ip, r4
 800723c:	bf88      	it	hi
 800723e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007242:	eba4 040c 	sub.w	r4, r4, ip
 8007246:	4405      	add	r5, r0
 8007248:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800724c:	f1ba 0a01 	subs.w	sl, sl, #1
 8007250:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8007254:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007258:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800725c:	d1db      	bne.n	8007216 <__ieee754_sqrt+0xd6>
 800725e:	431c      	orrs	r4, r3
 8007260:	d01a      	beq.n	8007298 <__ieee754_sqrt+0x158>
 8007262:	4c20      	ldr	r4, [pc, #128]	@ (80072e4 <__ieee754_sqrt+0x1a4>)
 8007264:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80072e8 <__ieee754_sqrt+0x1a8>
 8007268:	e9d4 0100 	ldrd	r0, r1, [r4]
 800726c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007270:	f7f8 ff7a 	bl	8000168 <__aeabi_dsub>
 8007274:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4640      	mov	r0, r8
 800727e:	4649      	mov	r1, r9
 8007280:	f7f9 fba6 	bl	80009d0 <__aeabi_dcmple>
 8007284:	b140      	cbz	r0, 8007298 <__ieee754_sqrt+0x158>
 8007286:	e9d4 0100 	ldrd	r0, r1, [r4]
 800728a:	e9db 2300 	ldrd	r2, r3, [fp]
 800728e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007292:	d111      	bne.n	80072b8 <__ieee754_sqrt+0x178>
 8007294:	4655      	mov	r5, sl
 8007296:	3601      	adds	r6, #1
 8007298:	1072      	asrs	r2, r6, #1
 800729a:	086b      	lsrs	r3, r5, #1
 800729c:	07f1      	lsls	r1, r6, #31
 800729e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80072a2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80072a6:	bf48      	it	mi
 80072a8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80072ac:	4618      	mov	r0, r3
 80072ae:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80072b2:	e757      	b.n	8007164 <__ieee754_sqrt+0x24>
 80072b4:	4696      	mov	lr, r2
 80072b6:	e7be      	b.n	8007236 <__ieee754_sqrt+0xf6>
 80072b8:	f7f8 ff58 	bl	800016c <__adddf3>
 80072bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4640      	mov	r0, r8
 80072c6:	4649      	mov	r1, r9
 80072c8:	f7f9 fb78 	bl	80009bc <__aeabi_dcmplt>
 80072cc:	b120      	cbz	r0, 80072d8 <__ieee754_sqrt+0x198>
 80072ce:	1ca8      	adds	r0, r5, #2
 80072d0:	bf08      	it	eq
 80072d2:	3601      	addeq	r6, #1
 80072d4:	3502      	adds	r5, #2
 80072d6:	e7df      	b.n	8007298 <__ieee754_sqrt+0x158>
 80072d8:	1c6b      	adds	r3, r5, #1
 80072da:	f023 0501 	bic.w	r5, r3, #1
 80072de:	e7db      	b.n	8007298 <__ieee754_sqrt+0x158>
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	200000c0 	.word	0x200000c0
 80072e8:	200000b8 	.word	0x200000b8
 80072ec:	00000000 	.word	0x00000000

080072f0 <__ieee754_atan2>:
 80072f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	4617      	mov	r7, r2
 80072f6:	4690      	mov	r8, r2
 80072f8:	4699      	mov	r9, r3
 80072fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80072fe:	427b      	negs	r3, r7
 8007300:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8007488 <__ieee754_atan2+0x198>
 8007304:	433b      	orrs	r3, r7
 8007306:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800730a:	4553      	cmp	r3, sl
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
 8007310:	d809      	bhi.n	8007326 <__ieee754_atan2+0x36>
 8007312:	4246      	negs	r6, r0
 8007314:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007318:	4306      	orrs	r6, r0
 800731a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800731e:	4556      	cmp	r6, sl
 8007320:	468e      	mov	lr, r1
 8007322:	4683      	mov	fp, r0
 8007324:	d908      	bls.n	8007338 <__ieee754_atan2+0x48>
 8007326:	4642      	mov	r2, r8
 8007328:	464b      	mov	r3, r9
 800732a:	4620      	mov	r0, r4
 800732c:	4629      	mov	r1, r5
 800732e:	f7f8 ff1d 	bl	800016c <__adddf3>
 8007332:	4604      	mov	r4, r0
 8007334:	460d      	mov	r5, r1
 8007336:	e016      	b.n	8007366 <__ieee754_atan2+0x76>
 8007338:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800733c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007340:	433e      	orrs	r6, r7
 8007342:	d103      	bne.n	800734c <__ieee754_atan2+0x5c>
 8007344:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	f7ff bd66 	b.w	8006e18 <atan>
 800734c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007350:	f006 0602 	and.w	r6, r6, #2
 8007354:	ea53 0b0b 	orrs.w	fp, r3, fp
 8007358:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800735c:	d107      	bne.n	800736e <__ieee754_atan2+0x7e>
 800735e:	2e02      	cmp	r6, #2
 8007360:	d064      	beq.n	800742c <__ieee754_atan2+0x13c>
 8007362:	2e03      	cmp	r6, #3
 8007364:	d066      	beq.n	8007434 <__ieee754_atan2+0x144>
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736e:	4317      	orrs	r7, r2
 8007370:	d106      	bne.n	8007380 <__ieee754_atan2+0x90>
 8007372:	f1be 0f00 	cmp.w	lr, #0
 8007376:	da68      	bge.n	800744a <__ieee754_atan2+0x15a>
 8007378:	a537      	add	r5, pc, #220	@ (adr r5, 8007458 <__ieee754_atan2+0x168>)
 800737a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800737e:	e7f2      	b.n	8007366 <__ieee754_atan2+0x76>
 8007380:	4552      	cmp	r2, sl
 8007382:	d10f      	bne.n	80073a4 <__ieee754_atan2+0xb4>
 8007384:	4293      	cmp	r3, r2
 8007386:	f106 36ff 	add.w	r6, r6, #4294967295
 800738a:	d107      	bne.n	800739c <__ieee754_atan2+0xac>
 800738c:	2e02      	cmp	r6, #2
 800738e:	d855      	bhi.n	800743c <__ieee754_atan2+0x14c>
 8007390:	4b3e      	ldr	r3, [pc, #248]	@ (800748c <__ieee754_atan2+0x19c>)
 8007392:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007396:	e9d3 4500 	ldrd	r4, r5, [r3]
 800739a:	e7e4      	b.n	8007366 <__ieee754_atan2+0x76>
 800739c:	2e02      	cmp	r6, #2
 800739e:	d851      	bhi.n	8007444 <__ieee754_atan2+0x154>
 80073a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007490 <__ieee754_atan2+0x1a0>)
 80073a2:	e7f6      	b.n	8007392 <__ieee754_atan2+0xa2>
 80073a4:	4553      	cmp	r3, sl
 80073a6:	d0e4      	beq.n	8007372 <__ieee754_atan2+0x82>
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80073ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073b2:	da21      	bge.n	80073f8 <__ieee754_atan2+0x108>
 80073b4:	f1b9 0f00 	cmp.w	r9, #0
 80073b8:	da01      	bge.n	80073be <__ieee754_atan2+0xce>
 80073ba:	323c      	adds	r2, #60	@ 0x3c
 80073bc:	db20      	blt.n	8007400 <__ieee754_atan2+0x110>
 80073be:	4642      	mov	r2, r8
 80073c0:	464b      	mov	r3, r9
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 f9b1 	bl	800072c <__aeabi_ddiv>
 80073ca:	f7ff feb5 	bl	8007138 <fabs>
 80073ce:	f7ff fd23 	bl	8006e18 <atan>
 80073d2:	4604      	mov	r4, r0
 80073d4:	460d      	mov	r5, r1
 80073d6:	2e01      	cmp	r6, #1
 80073d8:	d015      	beq.n	8007406 <__ieee754_atan2+0x116>
 80073da:	2e02      	cmp	r6, #2
 80073dc:	d017      	beq.n	800740e <__ieee754_atan2+0x11e>
 80073de:	2e00      	cmp	r6, #0
 80073e0:	d0c1      	beq.n	8007366 <__ieee754_atan2+0x76>
 80073e2:	a31f      	add	r3, pc, #124	@ (adr r3, 8007460 <__ieee754_atan2+0x170>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	4620      	mov	r0, r4
 80073ea:	4629      	mov	r1, r5
 80073ec:	f7f8 febc 	bl	8000168 <__aeabi_dsub>
 80073f0:	a31d      	add	r3, pc, #116	@ (adr r3, 8007468 <__ieee754_atan2+0x178>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	e016      	b.n	8007426 <__ieee754_atan2+0x136>
 80073f8:	a51d      	add	r5, pc, #116	@ (adr r5, 8007470 <__ieee754_atan2+0x180>)
 80073fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80073fe:	e7ea      	b.n	80073d6 <__ieee754_atan2+0xe6>
 8007400:	2400      	movs	r4, #0
 8007402:	2500      	movs	r5, #0
 8007404:	e7e7      	b.n	80073d6 <__ieee754_atan2+0xe6>
 8007406:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800740a:	461d      	mov	r5, r3
 800740c:	e7ab      	b.n	8007366 <__ieee754_atan2+0x76>
 800740e:	a314      	add	r3, pc, #80	@ (adr r3, 8007460 <__ieee754_atan2+0x170>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f8 fea6 	bl	8000168 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	a111      	add	r1, pc, #68	@ (adr r1, 8007468 <__ieee754_atan2+0x178>)
 8007422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007426:	f7f8 fe9f 	bl	8000168 <__aeabi_dsub>
 800742a:	e782      	b.n	8007332 <__ieee754_atan2+0x42>
 800742c:	a50e      	add	r5, pc, #56	@ (adr r5, 8007468 <__ieee754_atan2+0x178>)
 800742e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007432:	e798      	b.n	8007366 <__ieee754_atan2+0x76>
 8007434:	a510      	add	r5, pc, #64	@ (adr r5, 8007478 <__ieee754_atan2+0x188>)
 8007436:	e9d5 4500 	ldrd	r4, r5, [r5]
 800743a:	e794      	b.n	8007366 <__ieee754_atan2+0x76>
 800743c:	a510      	add	r5, pc, #64	@ (adr r5, 8007480 <__ieee754_atan2+0x190>)
 800743e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007442:	e790      	b.n	8007366 <__ieee754_atan2+0x76>
 8007444:	2400      	movs	r4, #0
 8007446:	2500      	movs	r5, #0
 8007448:	e78d      	b.n	8007366 <__ieee754_atan2+0x76>
 800744a:	a509      	add	r5, pc, #36	@ (adr r5, 8007470 <__ieee754_atan2+0x180>)
 800744c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007450:	e789      	b.n	8007366 <__ieee754_atan2+0x76>
 8007452:	bf00      	nop
 8007454:	f3af 8000 	nop.w
 8007458:	54442d18 	.word	0x54442d18
 800745c:	bff921fb 	.word	0xbff921fb
 8007460:	33145c07 	.word	0x33145c07
 8007464:	3ca1a626 	.word	0x3ca1a626
 8007468:	54442d18 	.word	0x54442d18
 800746c:	400921fb 	.word	0x400921fb
 8007470:	54442d18 	.word	0x54442d18
 8007474:	3ff921fb 	.word	0x3ff921fb
 8007478:	54442d18 	.word	0x54442d18
 800747c:	c00921fb 	.word	0xc00921fb
 8007480:	54442d18 	.word	0x54442d18
 8007484:	3fe921fb 	.word	0x3fe921fb
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	0800a288 	.word	0x0800a288
 8007490:	0800a270 	.word	0x0800a270

08007494 <__cvt>:
 8007494:	2b00      	cmp	r3, #0
 8007496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749a:	461d      	mov	r5, r3
 800749c:	bfbb      	ittet	lt
 800749e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80074a2:	461d      	movlt	r5, r3
 80074a4:	2300      	movge	r3, #0
 80074a6:	232d      	movlt	r3, #45	@ 0x2d
 80074a8:	b088      	sub	sp, #32
 80074aa:	4614      	mov	r4, r2
 80074ac:	bfb8      	it	lt
 80074ae:	4614      	movlt	r4, r2
 80074b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80074b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80074b4:	7013      	strb	r3, [r2, #0]
 80074b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80074bc:	f023 0820 	bic.w	r8, r3, #32
 80074c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074c4:	d005      	beq.n	80074d2 <__cvt+0x3e>
 80074c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074ca:	d100      	bne.n	80074ce <__cvt+0x3a>
 80074cc:	3601      	adds	r6, #1
 80074ce:	2302      	movs	r3, #2
 80074d0:	e000      	b.n	80074d4 <__cvt+0x40>
 80074d2:	2303      	movs	r3, #3
 80074d4:	aa07      	add	r2, sp, #28
 80074d6:	9204      	str	r2, [sp, #16]
 80074d8:	aa06      	add	r2, sp, #24
 80074da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80074de:	e9cd 3600 	strd	r3, r6, [sp]
 80074e2:	4622      	mov	r2, r4
 80074e4:	462b      	mov	r3, r5
 80074e6:	f000 fea3 	bl	8008230 <_dtoa_r>
 80074ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074ee:	4607      	mov	r7, r0
 80074f0:	d119      	bne.n	8007526 <__cvt+0x92>
 80074f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074f4:	07db      	lsls	r3, r3, #31
 80074f6:	d50e      	bpl.n	8007516 <__cvt+0x82>
 80074f8:	eb00 0906 	add.w	r9, r0, r6
 80074fc:	2200      	movs	r2, #0
 80074fe:	2300      	movs	r3, #0
 8007500:	4620      	mov	r0, r4
 8007502:	4629      	mov	r1, r5
 8007504:	f7f9 fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8007508:	b108      	cbz	r0, 800750e <__cvt+0x7a>
 800750a:	f8cd 901c 	str.w	r9, [sp, #28]
 800750e:	2230      	movs	r2, #48	@ 0x30
 8007510:	9b07      	ldr	r3, [sp, #28]
 8007512:	454b      	cmp	r3, r9
 8007514:	d31e      	bcc.n	8007554 <__cvt+0xc0>
 8007516:	4638      	mov	r0, r7
 8007518:	9b07      	ldr	r3, [sp, #28]
 800751a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800751c:	1bdb      	subs	r3, r3, r7
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	b008      	add	sp, #32
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800752a:	eb00 0906 	add.w	r9, r0, r6
 800752e:	d1e5      	bne.n	80074fc <__cvt+0x68>
 8007530:	7803      	ldrb	r3, [r0, #0]
 8007532:	2b30      	cmp	r3, #48	@ 0x30
 8007534:	d10a      	bne.n	800754c <__cvt+0xb8>
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f7f9 fa33 	bl	80009a8 <__aeabi_dcmpeq>
 8007542:	b918      	cbnz	r0, 800754c <__cvt+0xb8>
 8007544:	f1c6 0601 	rsb	r6, r6, #1
 8007548:	f8ca 6000 	str.w	r6, [sl]
 800754c:	f8da 3000 	ldr.w	r3, [sl]
 8007550:	4499      	add	r9, r3
 8007552:	e7d3      	b.n	80074fc <__cvt+0x68>
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	9107      	str	r1, [sp, #28]
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	e7d9      	b.n	8007510 <__cvt+0x7c>

0800755c <__exponent>:
 800755c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800755e:	2900      	cmp	r1, #0
 8007560:	bfb6      	itet	lt
 8007562:	232d      	movlt	r3, #45	@ 0x2d
 8007564:	232b      	movge	r3, #43	@ 0x2b
 8007566:	4249      	neglt	r1, r1
 8007568:	2909      	cmp	r1, #9
 800756a:	7002      	strb	r2, [r0, #0]
 800756c:	7043      	strb	r3, [r0, #1]
 800756e:	dd29      	ble.n	80075c4 <__exponent+0x68>
 8007570:	f10d 0307 	add.w	r3, sp, #7
 8007574:	461d      	mov	r5, r3
 8007576:	270a      	movs	r7, #10
 8007578:	fbb1 f6f7 	udiv	r6, r1, r7
 800757c:	461a      	mov	r2, r3
 800757e:	fb07 1416 	mls	r4, r7, r6, r1
 8007582:	3430      	adds	r4, #48	@ 0x30
 8007584:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007588:	460c      	mov	r4, r1
 800758a:	2c63      	cmp	r4, #99	@ 0x63
 800758c:	4631      	mov	r1, r6
 800758e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007592:	dcf1      	bgt.n	8007578 <__exponent+0x1c>
 8007594:	3130      	adds	r1, #48	@ 0x30
 8007596:	1e94      	subs	r4, r2, #2
 8007598:	f803 1c01 	strb.w	r1, [r3, #-1]
 800759c:	4623      	mov	r3, r4
 800759e:	1c41      	adds	r1, r0, #1
 80075a0:	42ab      	cmp	r3, r5
 80075a2:	d30a      	bcc.n	80075ba <__exponent+0x5e>
 80075a4:	f10d 0309 	add.w	r3, sp, #9
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	42ac      	cmp	r4, r5
 80075ac:	bf88      	it	hi
 80075ae:	2300      	movhi	r3, #0
 80075b0:	3302      	adds	r3, #2
 80075b2:	4403      	add	r3, r0
 80075b4:	1a18      	subs	r0, r3, r0
 80075b6:	b003      	add	sp, #12
 80075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075c2:	e7ed      	b.n	80075a0 <__exponent+0x44>
 80075c4:	2330      	movs	r3, #48	@ 0x30
 80075c6:	3130      	adds	r1, #48	@ 0x30
 80075c8:	7083      	strb	r3, [r0, #2]
 80075ca:	70c1      	strb	r1, [r0, #3]
 80075cc:	1d03      	adds	r3, r0, #4
 80075ce:	e7f1      	b.n	80075b4 <__exponent+0x58>

080075d0 <_printf_float>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	b091      	sub	sp, #68	@ 0x44
 80075d6:	460c      	mov	r4, r1
 80075d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80075dc:	4616      	mov	r6, r2
 80075de:	461f      	mov	r7, r3
 80075e0:	4605      	mov	r5, r0
 80075e2:	f000 fd15 	bl	8008010 <_localeconv_r>
 80075e6:	6803      	ldr	r3, [r0, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	9308      	str	r3, [sp, #32]
 80075ec:	f7f8 fdb0 	bl	8000150 <strlen>
 80075f0:	2300      	movs	r3, #0
 80075f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80075f4:	f8d8 3000 	ldr.w	r3, [r8]
 80075f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80075fa:	3307      	adds	r3, #7
 80075fc:	f023 0307 	bic.w	r3, r3, #7
 8007600:	f103 0208 	add.w	r2, r3, #8
 8007604:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007608:	f8d4 b000 	ldr.w	fp, [r4]
 800760c:	f8c8 2000 	str.w	r2, [r8]
 8007610:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007614:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800761a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007626:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800762a:	4b9c      	ldr	r3, [pc, #624]	@ (800789c <_printf_float+0x2cc>)
 800762c:	f7f9 f9ee 	bl	8000a0c <__aeabi_dcmpun>
 8007630:	bb70      	cbnz	r0, 8007690 <_printf_float+0xc0>
 8007632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007636:	f04f 32ff 	mov.w	r2, #4294967295
 800763a:	4b98      	ldr	r3, [pc, #608]	@ (800789c <_printf_float+0x2cc>)
 800763c:	f7f9 f9c8 	bl	80009d0 <__aeabi_dcmple>
 8007640:	bb30      	cbnz	r0, 8007690 <_printf_float+0xc0>
 8007642:	2200      	movs	r2, #0
 8007644:	2300      	movs	r3, #0
 8007646:	4640      	mov	r0, r8
 8007648:	4649      	mov	r1, r9
 800764a:	f7f9 f9b7 	bl	80009bc <__aeabi_dcmplt>
 800764e:	b110      	cbz	r0, 8007656 <_printf_float+0x86>
 8007650:	232d      	movs	r3, #45	@ 0x2d
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007656:	4a92      	ldr	r2, [pc, #584]	@ (80078a0 <_printf_float+0x2d0>)
 8007658:	4b92      	ldr	r3, [pc, #584]	@ (80078a4 <_printf_float+0x2d4>)
 800765a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800765e:	bf94      	ite	ls
 8007660:	4690      	movls	r8, r2
 8007662:	4698      	movhi	r8, r3
 8007664:	2303      	movs	r3, #3
 8007666:	f04f 0900 	mov.w	r9, #0
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	f02b 0304 	bic.w	r3, fp, #4
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	4633      	mov	r3, r6
 8007674:	4621      	mov	r1, r4
 8007676:	4628      	mov	r0, r5
 8007678:	9700      	str	r7, [sp, #0]
 800767a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800767c:	f000 f9d4 	bl	8007a28 <_printf_common>
 8007680:	3001      	adds	r0, #1
 8007682:	f040 8090 	bne.w	80077a6 <_printf_float+0x1d6>
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	b011      	add	sp, #68	@ 0x44
 800768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	4640      	mov	r0, r8
 8007696:	4649      	mov	r1, r9
 8007698:	f7f9 f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800769c:	b148      	cbz	r0, 80076b2 <_printf_float+0xe2>
 800769e:	464b      	mov	r3, r9
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bfb8      	it	lt
 80076a4:	232d      	movlt	r3, #45	@ 0x2d
 80076a6:	4a80      	ldr	r2, [pc, #512]	@ (80078a8 <_printf_float+0x2d8>)
 80076a8:	bfb8      	it	lt
 80076aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076ae:	4b7f      	ldr	r3, [pc, #508]	@ (80078ac <_printf_float+0x2dc>)
 80076b0:	e7d3      	b.n	800765a <_printf_float+0x8a>
 80076b2:	6863      	ldr	r3, [r4, #4]
 80076b4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	d13f      	bne.n	800773c <_printf_float+0x16c>
 80076bc:	2306      	movs	r3, #6
 80076be:	6063      	str	r3, [r4, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	9206      	str	r2, [sp, #24]
 80076ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80076cc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80076d0:	aa0d      	add	r2, sp, #52	@ 0x34
 80076d2:	9203      	str	r2, [sp, #12]
 80076d4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80076d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	4642      	mov	r2, r8
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	4628      	mov	r0, r5
 80076e4:	464b      	mov	r3, r9
 80076e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80076e8:	f7ff fed4 	bl	8007494 <__cvt>
 80076ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076ee:	4680      	mov	r8, r0
 80076f0:	2947      	cmp	r1, #71	@ 0x47
 80076f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80076f4:	d128      	bne.n	8007748 <_printf_float+0x178>
 80076f6:	1cc8      	adds	r0, r1, #3
 80076f8:	db02      	blt.n	8007700 <_printf_float+0x130>
 80076fa:	6863      	ldr	r3, [r4, #4]
 80076fc:	4299      	cmp	r1, r3
 80076fe:	dd40      	ble.n	8007782 <_printf_float+0x1b2>
 8007700:	f1aa 0a02 	sub.w	sl, sl, #2
 8007704:	fa5f fa8a 	uxtb.w	sl, sl
 8007708:	4652      	mov	r2, sl
 800770a:	3901      	subs	r1, #1
 800770c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007710:	910d      	str	r1, [sp, #52]	@ 0x34
 8007712:	f7ff ff23 	bl	800755c <__exponent>
 8007716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007718:	4681      	mov	r9, r0
 800771a:	1813      	adds	r3, r2, r0
 800771c:	2a01      	cmp	r2, #1
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	dc02      	bgt.n	8007728 <_printf_float+0x158>
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	07d2      	lsls	r2, r2, #31
 8007726:	d501      	bpl.n	800772c <_printf_float+0x15c>
 8007728:	3301      	adds	r3, #1
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007730:	2b00      	cmp	r3, #0
 8007732:	d09e      	beq.n	8007672 <_printf_float+0xa2>
 8007734:	232d      	movs	r3, #45	@ 0x2d
 8007736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773a:	e79a      	b.n	8007672 <_printf_float+0xa2>
 800773c:	2947      	cmp	r1, #71	@ 0x47
 800773e:	d1bf      	bne.n	80076c0 <_printf_float+0xf0>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1bd      	bne.n	80076c0 <_printf_float+0xf0>
 8007744:	2301      	movs	r3, #1
 8007746:	e7ba      	b.n	80076be <_printf_float+0xee>
 8007748:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800774c:	d9dc      	bls.n	8007708 <_printf_float+0x138>
 800774e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007752:	d118      	bne.n	8007786 <_printf_float+0x1b6>
 8007754:	2900      	cmp	r1, #0
 8007756:	6863      	ldr	r3, [r4, #4]
 8007758:	dd0b      	ble.n	8007772 <_printf_float+0x1a2>
 800775a:	6121      	str	r1, [r4, #16]
 800775c:	b913      	cbnz	r3, 8007764 <_printf_float+0x194>
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	07d0      	lsls	r0, r2, #31
 8007762:	d502      	bpl.n	800776a <_printf_float+0x19a>
 8007764:	3301      	adds	r3, #1
 8007766:	440b      	add	r3, r1
 8007768:	6123      	str	r3, [r4, #16]
 800776a:	f04f 0900 	mov.w	r9, #0
 800776e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007770:	e7dc      	b.n	800772c <_printf_float+0x15c>
 8007772:	b913      	cbnz	r3, 800777a <_printf_float+0x1aa>
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	07d2      	lsls	r2, r2, #31
 8007778:	d501      	bpl.n	800777e <_printf_float+0x1ae>
 800777a:	3302      	adds	r3, #2
 800777c:	e7f4      	b.n	8007768 <_printf_float+0x198>
 800777e:	2301      	movs	r3, #1
 8007780:	e7f2      	b.n	8007768 <_printf_float+0x198>
 8007782:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007788:	4299      	cmp	r1, r3
 800778a:	db05      	blt.n	8007798 <_printf_float+0x1c8>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	6121      	str	r1, [r4, #16]
 8007790:	07d8      	lsls	r0, r3, #31
 8007792:	d5ea      	bpl.n	800776a <_printf_float+0x19a>
 8007794:	1c4b      	adds	r3, r1, #1
 8007796:	e7e7      	b.n	8007768 <_printf_float+0x198>
 8007798:	2900      	cmp	r1, #0
 800779a:	bfcc      	ite	gt
 800779c:	2201      	movgt	r2, #1
 800779e:	f1c1 0202 	rsble	r2, r1, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	e7e0      	b.n	8007768 <_printf_float+0x198>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	055a      	lsls	r2, r3, #21
 80077aa:	d407      	bmi.n	80077bc <_printf_float+0x1ec>
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	4642      	mov	r2, r8
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	d12b      	bne.n	8007812 <_printf_float+0x242>
 80077ba:	e764      	b.n	8007686 <_printf_float+0xb6>
 80077bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077c0:	f240 80dc 	bls.w	800797c <_printf_float+0x3ac>
 80077c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077c8:	2200      	movs	r2, #0
 80077ca:	2300      	movs	r3, #0
 80077cc:	f7f9 f8ec 	bl	80009a8 <__aeabi_dcmpeq>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d033      	beq.n	800783c <_printf_float+0x26c>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	4a35      	ldr	r2, [pc, #212]	@ (80078b0 <_printf_float+0x2e0>)
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f af51 	beq.w	8007686 <_printf_float+0xb6>
 80077e4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80077e8:	4543      	cmp	r3, r8
 80077ea:	db02      	blt.n	80077f2 <_printf_float+0x222>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	07d8      	lsls	r0, r3, #31
 80077f0:	d50f      	bpl.n	8007812 <_printf_float+0x242>
 80077f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f af42 	beq.w	8007686 <_printf_float+0xb6>
 8007802:	f04f 0900 	mov.w	r9, #0
 8007806:	f108 38ff 	add.w	r8, r8, #4294967295
 800780a:	f104 0a1a 	add.w	sl, r4, #26
 800780e:	45c8      	cmp	r8, r9
 8007810:	dc09      	bgt.n	8007826 <_printf_float+0x256>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	079b      	lsls	r3, r3, #30
 8007816:	f100 8102 	bmi.w	8007a1e <_printf_float+0x44e>
 800781a:	68e0      	ldr	r0, [r4, #12]
 800781c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800781e:	4298      	cmp	r0, r3
 8007820:	bfb8      	it	lt
 8007822:	4618      	movlt	r0, r3
 8007824:	e731      	b.n	800768a <_printf_float+0xba>
 8007826:	2301      	movs	r3, #1
 8007828:	4652      	mov	r2, sl
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	47b8      	blx	r7
 8007830:	3001      	adds	r0, #1
 8007832:	f43f af28 	beq.w	8007686 <_printf_float+0xb6>
 8007836:	f109 0901 	add.w	r9, r9, #1
 800783a:	e7e8      	b.n	800780e <_printf_float+0x23e>
 800783c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800783e:	2b00      	cmp	r3, #0
 8007840:	dc38      	bgt.n	80078b4 <_printf_float+0x2e4>
 8007842:	2301      	movs	r3, #1
 8007844:	4631      	mov	r1, r6
 8007846:	4628      	mov	r0, r5
 8007848:	4a19      	ldr	r2, [pc, #100]	@ (80078b0 <_printf_float+0x2e0>)
 800784a:	47b8      	blx	r7
 800784c:	3001      	adds	r0, #1
 800784e:	f43f af1a 	beq.w	8007686 <_printf_float+0xb6>
 8007852:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007856:	ea59 0303 	orrs.w	r3, r9, r3
 800785a:	d102      	bne.n	8007862 <_printf_float+0x292>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	07d9      	lsls	r1, r3, #31
 8007860:	d5d7      	bpl.n	8007812 <_printf_float+0x242>
 8007862:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f af0a 	beq.w	8007686 <_printf_float+0xb6>
 8007872:	f04f 0a00 	mov.w	sl, #0
 8007876:	f104 0b1a 	add.w	fp, r4, #26
 800787a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800787c:	425b      	negs	r3, r3
 800787e:	4553      	cmp	r3, sl
 8007880:	dc01      	bgt.n	8007886 <_printf_float+0x2b6>
 8007882:	464b      	mov	r3, r9
 8007884:	e793      	b.n	80077ae <_printf_float+0x1de>
 8007886:	2301      	movs	r3, #1
 8007888:	465a      	mov	r2, fp
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	f43f aef8 	beq.w	8007686 <_printf_float+0xb6>
 8007896:	f10a 0a01 	add.w	sl, sl, #1
 800789a:	e7ee      	b.n	800787a <_printf_float+0x2aa>
 800789c:	7fefffff 	.word	0x7fefffff
 80078a0:	0800a2a0 	.word	0x0800a2a0
 80078a4:	0800a2a4 	.word	0x0800a2a4
 80078a8:	0800a2a8 	.word	0x0800a2a8
 80078ac:	0800a2ac 	.word	0x0800a2ac
 80078b0:	0800a2b0 	.word	0x0800a2b0
 80078b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078b6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80078ba:	4553      	cmp	r3, sl
 80078bc:	bfa8      	it	ge
 80078be:	4653      	movge	r3, sl
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	4699      	mov	r9, r3
 80078c4:	dc36      	bgt.n	8007934 <_printf_float+0x364>
 80078c6:	f04f 0b00 	mov.w	fp, #0
 80078ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ce:	f104 021a 	add.w	r2, r4, #26
 80078d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d6:	eba3 0309 	sub.w	r3, r3, r9
 80078da:	455b      	cmp	r3, fp
 80078dc:	dc31      	bgt.n	8007942 <_printf_float+0x372>
 80078de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078e0:	459a      	cmp	sl, r3
 80078e2:	dc3a      	bgt.n	800795a <_printf_float+0x38a>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	07da      	lsls	r2, r3, #31
 80078e8:	d437      	bmi.n	800795a <_printf_float+0x38a>
 80078ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078ec:	ebaa 0903 	sub.w	r9, sl, r3
 80078f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078f2:	ebaa 0303 	sub.w	r3, sl, r3
 80078f6:	4599      	cmp	r9, r3
 80078f8:	bfa8      	it	ge
 80078fa:	4699      	movge	r9, r3
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	dc33      	bgt.n	800796a <_printf_float+0x39a>
 8007902:	f04f 0800 	mov.w	r8, #0
 8007906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800790a:	f104 0b1a 	add.w	fp, r4, #26
 800790e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007910:	ebaa 0303 	sub.w	r3, sl, r3
 8007914:	eba3 0309 	sub.w	r3, r3, r9
 8007918:	4543      	cmp	r3, r8
 800791a:	f77f af7a 	ble.w	8007812 <_printf_float+0x242>
 800791e:	2301      	movs	r3, #1
 8007920:	465a      	mov	r2, fp
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	f43f aeac 	beq.w	8007686 <_printf_float+0xb6>
 800792e:	f108 0801 	add.w	r8, r8, #1
 8007932:	e7ec      	b.n	800790e <_printf_float+0x33e>
 8007934:	4642      	mov	r2, r8
 8007936:	4631      	mov	r1, r6
 8007938:	4628      	mov	r0, r5
 800793a:	47b8      	blx	r7
 800793c:	3001      	adds	r0, #1
 800793e:	d1c2      	bne.n	80078c6 <_printf_float+0x2f6>
 8007940:	e6a1      	b.n	8007686 <_printf_float+0xb6>
 8007942:	2301      	movs	r3, #1
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	920a      	str	r2, [sp, #40]	@ 0x28
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	f43f ae9a 	beq.w	8007686 <_printf_float+0xb6>
 8007952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007954:	f10b 0b01 	add.w	fp, fp, #1
 8007958:	e7bb      	b.n	80078d2 <_printf_float+0x302>
 800795a:	4631      	mov	r1, r6
 800795c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	d1c0      	bne.n	80078ea <_printf_float+0x31a>
 8007968:	e68d      	b.n	8007686 <_printf_float+0xb6>
 800796a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800796c:	464b      	mov	r3, r9
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	4442      	add	r2, r8
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	d1c3      	bne.n	8007902 <_printf_float+0x332>
 800797a:	e684      	b.n	8007686 <_printf_float+0xb6>
 800797c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007980:	f1ba 0f01 	cmp.w	sl, #1
 8007984:	dc01      	bgt.n	800798a <_printf_float+0x3ba>
 8007986:	07db      	lsls	r3, r3, #31
 8007988:	d536      	bpl.n	80079f8 <_printf_float+0x428>
 800798a:	2301      	movs	r3, #1
 800798c:	4642      	mov	r2, r8
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	f43f ae76 	beq.w	8007686 <_printf_float+0xb6>
 800799a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f ae6e 	beq.w	8007686 <_printf_float+0xb6>
 80079aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079ae:	2200      	movs	r2, #0
 80079b0:	2300      	movs	r3, #0
 80079b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079b6:	f7f8 fff7 	bl	80009a8 <__aeabi_dcmpeq>
 80079ba:	b9c0      	cbnz	r0, 80079ee <_printf_float+0x41e>
 80079bc:	4653      	mov	r3, sl
 80079be:	f108 0201 	add.w	r2, r8, #1
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	d10c      	bne.n	80079e6 <_printf_float+0x416>
 80079cc:	e65b      	b.n	8007686 <_printf_float+0xb6>
 80079ce:	2301      	movs	r3, #1
 80079d0:	465a      	mov	r2, fp
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f ae54 	beq.w	8007686 <_printf_float+0xb6>
 80079de:	f108 0801 	add.w	r8, r8, #1
 80079e2:	45d0      	cmp	r8, sl
 80079e4:	dbf3      	blt.n	80079ce <_printf_float+0x3fe>
 80079e6:	464b      	mov	r3, r9
 80079e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079ec:	e6e0      	b.n	80077b0 <_printf_float+0x1e0>
 80079ee:	f04f 0800 	mov.w	r8, #0
 80079f2:	f104 0b1a 	add.w	fp, r4, #26
 80079f6:	e7f4      	b.n	80079e2 <_printf_float+0x412>
 80079f8:	2301      	movs	r3, #1
 80079fa:	4642      	mov	r2, r8
 80079fc:	e7e1      	b.n	80079c2 <_printf_float+0x3f2>
 80079fe:	2301      	movs	r3, #1
 8007a00:	464a      	mov	r2, r9
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f43f ae3c 	beq.w	8007686 <_printf_float+0xb6>
 8007a0e:	f108 0801 	add.w	r8, r8, #1
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a16:	1a5b      	subs	r3, r3, r1
 8007a18:	4543      	cmp	r3, r8
 8007a1a:	dcf0      	bgt.n	80079fe <_printf_float+0x42e>
 8007a1c:	e6fd      	b.n	800781a <_printf_float+0x24a>
 8007a1e:	f04f 0800 	mov.w	r8, #0
 8007a22:	f104 0919 	add.w	r9, r4, #25
 8007a26:	e7f4      	b.n	8007a12 <_printf_float+0x442>

08007a28 <_printf_common>:
 8007a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	4698      	mov	r8, r3
 8007a30:	688a      	ldr	r2, [r1, #8]
 8007a32:	690b      	ldr	r3, [r1, #16]
 8007a34:	4607      	mov	r7, r0
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bfb8      	it	lt
 8007a3a:	4613      	movlt	r3, r2
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a42:	460c      	mov	r4, r1
 8007a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a48:	b10a      	cbz	r2, 8007a4e <_printf_common+0x26>
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	0699      	lsls	r1, r3, #26
 8007a52:	bf42      	ittt	mi
 8007a54:	6833      	ldrmi	r3, [r6, #0]
 8007a56:	3302      	addmi	r3, #2
 8007a58:	6033      	strmi	r3, [r6, #0]
 8007a5a:	6825      	ldr	r5, [r4, #0]
 8007a5c:	f015 0506 	ands.w	r5, r5, #6
 8007a60:	d106      	bne.n	8007a70 <_printf_common+0x48>
 8007a62:	f104 0a19 	add.w	sl, r4, #25
 8007a66:	68e3      	ldr	r3, [r4, #12]
 8007a68:	6832      	ldr	r2, [r6, #0]
 8007a6a:	1a9b      	subs	r3, r3, r2
 8007a6c:	42ab      	cmp	r3, r5
 8007a6e:	dc2b      	bgt.n	8007ac8 <_printf_common+0xa0>
 8007a70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	3b00      	subs	r3, #0
 8007a78:	bf18      	it	ne
 8007a7a:	2301      	movne	r3, #1
 8007a7c:	0692      	lsls	r2, r2, #26
 8007a7e:	d430      	bmi.n	8007ae2 <_printf_common+0xba>
 8007a80:	4641      	mov	r1, r8
 8007a82:	4638      	mov	r0, r7
 8007a84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a88:	47c8      	blx	r9
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d023      	beq.n	8007ad6 <_printf_common+0xae>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	6922      	ldr	r2, [r4, #16]
 8007a92:	f003 0306 	and.w	r3, r3, #6
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	bf14      	ite	ne
 8007a9a:	2500      	movne	r5, #0
 8007a9c:	6833      	ldreq	r3, [r6, #0]
 8007a9e:	f04f 0600 	mov.w	r6, #0
 8007aa2:	bf08      	it	eq
 8007aa4:	68e5      	ldreq	r5, [r4, #12]
 8007aa6:	f104 041a 	add.w	r4, r4, #26
 8007aaa:	bf08      	it	eq
 8007aac:	1aed      	subeq	r5, r5, r3
 8007aae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007ab2:	bf08      	it	eq
 8007ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	bfc4      	itt	gt
 8007abc:	1a9b      	subgt	r3, r3, r2
 8007abe:	18ed      	addgt	r5, r5, r3
 8007ac0:	42b5      	cmp	r5, r6
 8007ac2:	d11a      	bne.n	8007afa <_printf_common+0xd2>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e008      	b.n	8007ada <_printf_common+0xb2>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4652      	mov	r2, sl
 8007acc:	4641      	mov	r1, r8
 8007ace:	4638      	mov	r0, r7
 8007ad0:	47c8      	blx	r9
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d103      	bne.n	8007ade <_printf_common+0xb6>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ade:	3501      	adds	r5, #1
 8007ae0:	e7c1      	b.n	8007a66 <_printf_common+0x3e>
 8007ae2:	2030      	movs	r0, #48	@ 0x30
 8007ae4:	18e1      	adds	r1, r4, r3
 8007ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007af0:	4422      	add	r2, r4
 8007af2:	3302      	adds	r3, #2
 8007af4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007af8:	e7c2      	b.n	8007a80 <_printf_common+0x58>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4622      	mov	r2, r4
 8007afe:	4641      	mov	r1, r8
 8007b00:	4638      	mov	r0, r7
 8007b02:	47c8      	blx	r9
 8007b04:	3001      	adds	r0, #1
 8007b06:	d0e6      	beq.n	8007ad6 <_printf_common+0xae>
 8007b08:	3601      	adds	r6, #1
 8007b0a:	e7d9      	b.n	8007ac0 <_printf_common+0x98>

08007b0c <_printf_i>:
 8007b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	7e0f      	ldrb	r7, [r1, #24]
 8007b12:	4691      	mov	r9, r2
 8007b14:	2f78      	cmp	r7, #120	@ 0x78
 8007b16:	4680      	mov	r8, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	469a      	mov	sl, r3
 8007b1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b22:	d807      	bhi.n	8007b34 <_printf_i+0x28>
 8007b24:	2f62      	cmp	r7, #98	@ 0x62
 8007b26:	d80a      	bhi.n	8007b3e <_printf_i+0x32>
 8007b28:	2f00      	cmp	r7, #0
 8007b2a:	f000 80d3 	beq.w	8007cd4 <_printf_i+0x1c8>
 8007b2e:	2f58      	cmp	r7, #88	@ 0x58
 8007b30:	f000 80ba 	beq.w	8007ca8 <_printf_i+0x19c>
 8007b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b3c:	e03a      	b.n	8007bb4 <_printf_i+0xa8>
 8007b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b42:	2b15      	cmp	r3, #21
 8007b44:	d8f6      	bhi.n	8007b34 <_printf_i+0x28>
 8007b46:	a101      	add	r1, pc, #4	@ (adr r1, 8007b4c <_printf_i+0x40>)
 8007b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b4c:	08007ba5 	.word	0x08007ba5
 8007b50:	08007bb9 	.word	0x08007bb9
 8007b54:	08007b35 	.word	0x08007b35
 8007b58:	08007b35 	.word	0x08007b35
 8007b5c:	08007b35 	.word	0x08007b35
 8007b60:	08007b35 	.word	0x08007b35
 8007b64:	08007bb9 	.word	0x08007bb9
 8007b68:	08007b35 	.word	0x08007b35
 8007b6c:	08007b35 	.word	0x08007b35
 8007b70:	08007b35 	.word	0x08007b35
 8007b74:	08007b35 	.word	0x08007b35
 8007b78:	08007cbb 	.word	0x08007cbb
 8007b7c:	08007be3 	.word	0x08007be3
 8007b80:	08007c75 	.word	0x08007c75
 8007b84:	08007b35 	.word	0x08007b35
 8007b88:	08007b35 	.word	0x08007b35
 8007b8c:	08007cdd 	.word	0x08007cdd
 8007b90:	08007b35 	.word	0x08007b35
 8007b94:	08007be3 	.word	0x08007be3
 8007b98:	08007b35 	.word	0x08007b35
 8007b9c:	08007b35 	.word	0x08007b35
 8007ba0:	08007c7d 	.word	0x08007c7d
 8007ba4:	6833      	ldr	r3, [r6, #0]
 8007ba6:	1d1a      	adds	r2, r3, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6032      	str	r2, [r6, #0]
 8007bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e09e      	b.n	8007cf6 <_printf_i+0x1ea>
 8007bb8:	6833      	ldr	r3, [r6, #0]
 8007bba:	6820      	ldr	r0, [r4, #0]
 8007bbc:	1d19      	adds	r1, r3, #4
 8007bbe:	6031      	str	r1, [r6, #0]
 8007bc0:	0606      	lsls	r6, r0, #24
 8007bc2:	d501      	bpl.n	8007bc8 <_printf_i+0xbc>
 8007bc4:	681d      	ldr	r5, [r3, #0]
 8007bc6:	e003      	b.n	8007bd0 <_printf_i+0xc4>
 8007bc8:	0645      	lsls	r5, r0, #25
 8007bca:	d5fb      	bpl.n	8007bc4 <_printf_i+0xb8>
 8007bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	da03      	bge.n	8007bdc <_printf_i+0xd0>
 8007bd4:	232d      	movs	r3, #45	@ 0x2d
 8007bd6:	426d      	negs	r5, r5
 8007bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bdc:	230a      	movs	r3, #10
 8007bde:	4859      	ldr	r0, [pc, #356]	@ (8007d44 <_printf_i+0x238>)
 8007be0:	e011      	b.n	8007c06 <_printf_i+0xfa>
 8007be2:	6821      	ldr	r1, [r4, #0]
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	0608      	lsls	r0, r1, #24
 8007be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bec:	d402      	bmi.n	8007bf4 <_printf_i+0xe8>
 8007bee:	0649      	lsls	r1, r1, #25
 8007bf0:	bf48      	it	mi
 8007bf2:	b2ad      	uxthmi	r5, r5
 8007bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bf6:	6033      	str	r3, [r6, #0]
 8007bf8:	bf14      	ite	ne
 8007bfa:	230a      	movne	r3, #10
 8007bfc:	2308      	moveq	r3, #8
 8007bfe:	4851      	ldr	r0, [pc, #324]	@ (8007d44 <_printf_i+0x238>)
 8007c00:	2100      	movs	r1, #0
 8007c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c06:	6866      	ldr	r6, [r4, #4]
 8007c08:	2e00      	cmp	r6, #0
 8007c0a:	bfa8      	it	ge
 8007c0c:	6821      	ldrge	r1, [r4, #0]
 8007c0e:	60a6      	str	r6, [r4, #8]
 8007c10:	bfa4      	itt	ge
 8007c12:	f021 0104 	bicge.w	r1, r1, #4
 8007c16:	6021      	strge	r1, [r4, #0]
 8007c18:	b90d      	cbnz	r5, 8007c1e <_printf_i+0x112>
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d04b      	beq.n	8007cb6 <_printf_i+0x1aa>
 8007c1e:	4616      	mov	r6, r2
 8007c20:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c24:	fb03 5711 	mls	r7, r3, r1, r5
 8007c28:	5dc7      	ldrb	r7, [r0, r7]
 8007c2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c2e:	462f      	mov	r7, r5
 8007c30:	42bb      	cmp	r3, r7
 8007c32:	460d      	mov	r5, r1
 8007c34:	d9f4      	bls.n	8007c20 <_printf_i+0x114>
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d10b      	bne.n	8007c52 <_printf_i+0x146>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	07df      	lsls	r7, r3, #31
 8007c3e:	d508      	bpl.n	8007c52 <_printf_i+0x146>
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	6861      	ldr	r1, [r4, #4]
 8007c44:	4299      	cmp	r1, r3
 8007c46:	bfde      	ittt	le
 8007c48:	2330      	movle	r3, #48	@ 0x30
 8007c4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c52:	1b92      	subs	r2, r2, r6
 8007c54:	6122      	str	r2, [r4, #16]
 8007c56:	464b      	mov	r3, r9
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f8cd a000 	str.w	sl, [sp]
 8007c60:	aa03      	add	r2, sp, #12
 8007c62:	f7ff fee1 	bl	8007a28 <_printf_common>
 8007c66:	3001      	adds	r0, #1
 8007c68:	d14a      	bne.n	8007d00 <_printf_i+0x1f4>
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	b004      	add	sp, #16
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	f043 0320 	orr.w	r3, r3, #32
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	2778      	movs	r7, #120	@ 0x78
 8007c7e:	4832      	ldr	r0, [pc, #200]	@ (8007d48 <_printf_i+0x23c>)
 8007c80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	6831      	ldr	r1, [r6, #0]
 8007c88:	061f      	lsls	r7, r3, #24
 8007c8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c8e:	d402      	bmi.n	8007c96 <_printf_i+0x18a>
 8007c90:	065f      	lsls	r7, r3, #25
 8007c92:	bf48      	it	mi
 8007c94:	b2ad      	uxthmi	r5, r5
 8007c96:	6031      	str	r1, [r6, #0]
 8007c98:	07d9      	lsls	r1, r3, #31
 8007c9a:	bf44      	itt	mi
 8007c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8007ca0:	6023      	strmi	r3, [r4, #0]
 8007ca2:	b11d      	cbz	r5, 8007cac <_printf_i+0x1a0>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	e7ab      	b.n	8007c00 <_printf_i+0xf4>
 8007ca8:	4826      	ldr	r0, [pc, #152]	@ (8007d44 <_printf_i+0x238>)
 8007caa:	e7e9      	b.n	8007c80 <_printf_i+0x174>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	f023 0320 	bic.w	r3, r3, #32
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	e7f6      	b.n	8007ca4 <_printf_i+0x198>
 8007cb6:	4616      	mov	r6, r2
 8007cb8:	e7bd      	b.n	8007c36 <_printf_i+0x12a>
 8007cba:	6833      	ldr	r3, [r6, #0]
 8007cbc:	6825      	ldr	r5, [r4, #0]
 8007cbe:	1d18      	adds	r0, r3, #4
 8007cc0:	6961      	ldr	r1, [r4, #20]
 8007cc2:	6030      	str	r0, [r6, #0]
 8007cc4:	062e      	lsls	r6, r5, #24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	d501      	bpl.n	8007cce <_printf_i+0x1c2>
 8007cca:	6019      	str	r1, [r3, #0]
 8007ccc:	e002      	b.n	8007cd4 <_printf_i+0x1c8>
 8007cce:	0668      	lsls	r0, r5, #25
 8007cd0:	d5fb      	bpl.n	8007cca <_printf_i+0x1be>
 8007cd2:	8019      	strh	r1, [r3, #0]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4616      	mov	r6, r2
 8007cd8:	6123      	str	r3, [r4, #16]
 8007cda:	e7bc      	b.n	8007c56 <_printf_i+0x14a>
 8007cdc:	6833      	ldr	r3, [r6, #0]
 8007cde:	2100      	movs	r1, #0
 8007ce0:	1d1a      	adds	r2, r3, #4
 8007ce2:	6032      	str	r2, [r6, #0]
 8007ce4:	681e      	ldr	r6, [r3, #0]
 8007ce6:	6862      	ldr	r2, [r4, #4]
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 fa08 	bl	80080fe <memchr>
 8007cee:	b108      	cbz	r0, 8007cf4 <_printf_i+0x1e8>
 8007cf0:	1b80      	subs	r0, r0, r6
 8007cf2:	6060      	str	r0, [r4, #4]
 8007cf4:	6863      	ldr	r3, [r4, #4]
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cfe:	e7aa      	b.n	8007c56 <_printf_i+0x14a>
 8007d00:	4632      	mov	r2, r6
 8007d02:	4649      	mov	r1, r9
 8007d04:	4640      	mov	r0, r8
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	47d0      	blx	sl
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d0ad      	beq.n	8007c6a <_printf_i+0x15e>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	079b      	lsls	r3, r3, #30
 8007d12:	d413      	bmi.n	8007d3c <_printf_i+0x230>
 8007d14:	68e0      	ldr	r0, [r4, #12]
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	4298      	cmp	r0, r3
 8007d1a:	bfb8      	it	lt
 8007d1c:	4618      	movlt	r0, r3
 8007d1e:	e7a6      	b.n	8007c6e <_printf_i+0x162>
 8007d20:	2301      	movs	r3, #1
 8007d22:	4632      	mov	r2, r6
 8007d24:	4649      	mov	r1, r9
 8007d26:	4640      	mov	r0, r8
 8007d28:	47d0      	blx	sl
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	d09d      	beq.n	8007c6a <_printf_i+0x15e>
 8007d2e:	3501      	adds	r5, #1
 8007d30:	68e3      	ldr	r3, [r4, #12]
 8007d32:	9903      	ldr	r1, [sp, #12]
 8007d34:	1a5b      	subs	r3, r3, r1
 8007d36:	42ab      	cmp	r3, r5
 8007d38:	dcf2      	bgt.n	8007d20 <_printf_i+0x214>
 8007d3a:	e7eb      	b.n	8007d14 <_printf_i+0x208>
 8007d3c:	2500      	movs	r5, #0
 8007d3e:	f104 0619 	add.w	r6, r4, #25
 8007d42:	e7f5      	b.n	8007d30 <_printf_i+0x224>
 8007d44:	0800a2b2 	.word	0x0800a2b2
 8007d48:	0800a2c3 	.word	0x0800a2c3

08007d4c <std>:
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	b510      	push	{r4, lr}
 8007d50:	4604      	mov	r4, r0
 8007d52:	e9c0 3300 	strd	r3, r3, [r0]
 8007d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d5a:	6083      	str	r3, [r0, #8]
 8007d5c:	8181      	strh	r1, [r0, #12]
 8007d5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d60:	81c2      	strh	r2, [r0, #14]
 8007d62:	6183      	str	r3, [r0, #24]
 8007d64:	4619      	mov	r1, r3
 8007d66:	2208      	movs	r2, #8
 8007d68:	305c      	adds	r0, #92	@ 0x5c
 8007d6a:	f000 f948 	bl	8007ffe <memset>
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007da4 <std+0x58>)
 8007d70:	6224      	str	r4, [r4, #32]
 8007d72:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d74:	4b0c      	ldr	r3, [pc, #48]	@ (8007da8 <std+0x5c>)
 8007d76:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d78:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <std+0x60>)
 8007d7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007db0 <std+0x64>)
 8007d7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d80:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <std+0x68>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d006      	beq.n	8007d94 <std+0x48>
 8007d86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d8a:	4294      	cmp	r4, r2
 8007d8c:	d002      	beq.n	8007d94 <std+0x48>
 8007d8e:	33d0      	adds	r3, #208	@ 0xd0
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d105      	bne.n	8007da0 <std+0x54>
 8007d94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9c:	f000 b9ac 	b.w	80080f8 <__retarget_lock_init_recursive>
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	bf00      	nop
 8007da4:	08007f79 	.word	0x08007f79
 8007da8:	08007f9b 	.word	0x08007f9b
 8007dac:	08007fd3 	.word	0x08007fd3
 8007db0:	08007ff7 	.word	0x08007ff7
 8007db4:	20000758 	.word	0x20000758

08007db8 <stdio_exit_handler>:
 8007db8:	4a02      	ldr	r2, [pc, #8]	@ (8007dc4 <stdio_exit_handler+0xc>)
 8007dba:	4903      	ldr	r1, [pc, #12]	@ (8007dc8 <stdio_exit_handler+0x10>)
 8007dbc:	4803      	ldr	r0, [pc, #12]	@ (8007dcc <stdio_exit_handler+0x14>)
 8007dbe:	f000 b869 	b.w	8007e94 <_fwalk_sglue>
 8007dc2:	bf00      	nop
 8007dc4:	200000c8 	.word	0x200000c8
 8007dc8:	08009a6d 	.word	0x08009a6d
 8007dcc:	200000d8 	.word	0x200000d8

08007dd0 <cleanup_stdio>:
 8007dd0:	6841      	ldr	r1, [r0, #4]
 8007dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <cleanup_stdio+0x34>)
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4299      	cmp	r1, r3
 8007dd8:	4604      	mov	r4, r0
 8007dda:	d001      	beq.n	8007de0 <cleanup_stdio+0x10>
 8007ddc:	f001 fe46 	bl	8009a6c <_fflush_r>
 8007de0:	68a1      	ldr	r1, [r4, #8]
 8007de2:	4b09      	ldr	r3, [pc, #36]	@ (8007e08 <cleanup_stdio+0x38>)
 8007de4:	4299      	cmp	r1, r3
 8007de6:	d002      	beq.n	8007dee <cleanup_stdio+0x1e>
 8007de8:	4620      	mov	r0, r4
 8007dea:	f001 fe3f 	bl	8009a6c <_fflush_r>
 8007dee:	68e1      	ldr	r1, [r4, #12]
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <cleanup_stdio+0x3c>)
 8007df2:	4299      	cmp	r1, r3
 8007df4:	d004      	beq.n	8007e00 <cleanup_stdio+0x30>
 8007df6:	4620      	mov	r0, r4
 8007df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dfc:	f001 be36 	b.w	8009a6c <_fflush_r>
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	bf00      	nop
 8007e04:	20000758 	.word	0x20000758
 8007e08:	200007c0 	.word	0x200007c0
 8007e0c:	20000828 	.word	0x20000828

08007e10 <global_stdio_init.part.0>:
 8007e10:	b510      	push	{r4, lr}
 8007e12:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <global_stdio_init.part.0+0x30>)
 8007e14:	4c0b      	ldr	r4, [pc, #44]	@ (8007e44 <global_stdio_init.part.0+0x34>)
 8007e16:	4a0c      	ldr	r2, [pc, #48]	@ (8007e48 <global_stdio_init.part.0+0x38>)
 8007e18:	4620      	mov	r0, r4
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	2104      	movs	r1, #4
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f7ff ff94 	bl	8007d4c <std>
 8007e24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2109      	movs	r1, #9
 8007e2c:	f7ff ff8e 	bl	8007d4c <std>
 8007e30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e34:	2202      	movs	r2, #2
 8007e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3a:	2112      	movs	r1, #18
 8007e3c:	f7ff bf86 	b.w	8007d4c <std>
 8007e40:	20000890 	.word	0x20000890
 8007e44:	20000758 	.word	0x20000758
 8007e48:	08007db9 	.word	0x08007db9

08007e4c <__sfp_lock_acquire>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	@ (8007e54 <__sfp_lock_acquire+0x8>)
 8007e4e:	f000 b954 	b.w	80080fa <__retarget_lock_acquire_recursive>
 8007e52:	bf00      	nop
 8007e54:	20000899 	.word	0x20000899

08007e58 <__sfp_lock_release>:
 8007e58:	4801      	ldr	r0, [pc, #4]	@ (8007e60 <__sfp_lock_release+0x8>)
 8007e5a:	f000 b94f 	b.w	80080fc <__retarget_lock_release_recursive>
 8007e5e:	bf00      	nop
 8007e60:	20000899 	.word	0x20000899

08007e64 <__sinit>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	4604      	mov	r4, r0
 8007e68:	f7ff fff0 	bl	8007e4c <__sfp_lock_acquire>
 8007e6c:	6a23      	ldr	r3, [r4, #32]
 8007e6e:	b11b      	cbz	r3, 8007e78 <__sinit+0x14>
 8007e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e74:	f7ff bff0 	b.w	8007e58 <__sfp_lock_release>
 8007e78:	4b04      	ldr	r3, [pc, #16]	@ (8007e8c <__sinit+0x28>)
 8007e7a:	6223      	str	r3, [r4, #32]
 8007e7c:	4b04      	ldr	r3, [pc, #16]	@ (8007e90 <__sinit+0x2c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f5      	bne.n	8007e70 <__sinit+0xc>
 8007e84:	f7ff ffc4 	bl	8007e10 <global_stdio_init.part.0>
 8007e88:	e7f2      	b.n	8007e70 <__sinit+0xc>
 8007e8a:	bf00      	nop
 8007e8c:	08007dd1 	.word	0x08007dd1
 8007e90:	20000890 	.word	0x20000890

08007e94 <_fwalk_sglue>:
 8007e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e98:	4607      	mov	r7, r0
 8007e9a:	4688      	mov	r8, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ea8:	d505      	bpl.n	8007eb6 <_fwalk_sglue+0x22>
 8007eaa:	6824      	ldr	r4, [r4, #0]
 8007eac:	2c00      	cmp	r4, #0
 8007eae:	d1f7      	bne.n	8007ea0 <_fwalk_sglue+0xc>
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d907      	bls.n	8007ecc <_fwalk_sglue+0x38>
 8007ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	d003      	beq.n	8007ecc <_fwalk_sglue+0x38>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	47c0      	blx	r8
 8007eca:	4306      	orrs	r6, r0
 8007ecc:	3568      	adds	r5, #104	@ 0x68
 8007ece:	e7e9      	b.n	8007ea4 <_fwalk_sglue+0x10>

08007ed0 <sniprintf>:
 8007ed0:	b40c      	push	{r2, r3}
 8007ed2:	b530      	push	{r4, r5, lr}
 8007ed4:	4b17      	ldr	r3, [pc, #92]	@ (8007f34 <sniprintf+0x64>)
 8007ed6:	1e0c      	subs	r4, r1, #0
 8007ed8:	681d      	ldr	r5, [r3, #0]
 8007eda:	b09d      	sub	sp, #116	@ 0x74
 8007edc:	da08      	bge.n	8007ef0 <sniprintf+0x20>
 8007ede:	238b      	movs	r3, #139	@ 0x8b
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	b01d      	add	sp, #116	@ 0x74
 8007ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007eec:	b002      	add	sp, #8
 8007eee:	4770      	bx	lr
 8007ef0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ef8:	bf0c      	ite	eq
 8007efa:	4623      	moveq	r3, r4
 8007efc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f08:	9002      	str	r0, [sp, #8]
 8007f0a:	9006      	str	r0, [sp, #24]
 8007f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f10:	4628      	mov	r0, r5
 8007f12:	ab21      	add	r3, sp, #132	@ 0x84
 8007f14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f16:	a902      	add	r1, sp, #8
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	f001 fc2b 	bl	8009774 <_svfiprintf_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	bfbc      	itt	lt
 8007f22:	238b      	movlt	r3, #139	@ 0x8b
 8007f24:	602b      	strlt	r3, [r5, #0]
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	d0dd      	beq.n	8007ee6 <sniprintf+0x16>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e7d9      	b.n	8007ee6 <sniprintf+0x16>
 8007f32:	bf00      	nop
 8007f34:	200000d4 	.word	0x200000d4

08007f38 <siprintf>:
 8007f38:	b40e      	push	{r1, r2, r3}
 8007f3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f3e:	b500      	push	{lr}
 8007f40:	b09c      	sub	sp, #112	@ 0x70
 8007f42:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f44:	9002      	str	r0, [sp, #8]
 8007f46:	9006      	str	r0, [sp, #24]
 8007f48:	9107      	str	r1, [sp, #28]
 8007f4a:	9104      	str	r1, [sp, #16]
 8007f4c:	4808      	ldr	r0, [pc, #32]	@ (8007f70 <siprintf+0x38>)
 8007f4e:	4909      	ldr	r1, [pc, #36]	@ (8007f74 <siprintf+0x3c>)
 8007f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f54:	9105      	str	r1, [sp, #20]
 8007f56:	6800      	ldr	r0, [r0, #0]
 8007f58:	a902      	add	r1, sp, #8
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	f001 fc0a 	bl	8009774 <_svfiprintf_r>
 8007f60:	2200      	movs	r2, #0
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	b01c      	add	sp, #112	@ 0x70
 8007f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f6c:	b003      	add	sp, #12
 8007f6e:	4770      	bx	lr
 8007f70:	200000d4 	.word	0x200000d4
 8007f74:	ffff0208 	.word	0xffff0208

08007f78 <__sread>:
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f80:	f000 f86c 	bl	800805c <_read_r>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	bfab      	itete	ge
 8007f88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f8c:	181b      	addge	r3, r3, r0
 8007f8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f92:	bfac      	ite	ge
 8007f94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f96:	81a3      	strhlt	r3, [r4, #12]
 8007f98:	bd10      	pop	{r4, pc}

08007f9a <__swrite>:
 8007f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9e:	461f      	mov	r7, r3
 8007fa0:	898b      	ldrh	r3, [r1, #12]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	05db      	lsls	r3, r3, #23
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	4616      	mov	r6, r2
 8007faa:	d505      	bpl.n	8007fb8 <__swrite+0x1e>
 8007fac:	2302      	movs	r3, #2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	f000 f840 	bl	8008038 <_lseek_r>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	4632      	mov	r2, r6
 8007fbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	f000 b857 	b.w	8008080 <_write_r>

08007fd2 <__sseek>:
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fda:	f000 f82d 	bl	8008038 <_lseek_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	bf15      	itete	ne
 8007fe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fee:	81a3      	strheq	r3, [r4, #12]
 8007ff0:	bf18      	it	ne
 8007ff2:	81a3      	strhne	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__sclose>:
 8007ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffa:	f000 b80d 	b.w	8008018 <_close_r>

08007ffe <memset>:
 8007ffe:	4603      	mov	r3, r0
 8008000:	4402      	add	r2, r0
 8008002:	4293      	cmp	r3, r2
 8008004:	d100      	bne.n	8008008 <memset+0xa>
 8008006:	4770      	bx	lr
 8008008:	f803 1b01 	strb.w	r1, [r3], #1
 800800c:	e7f9      	b.n	8008002 <memset+0x4>
	...

08008010 <_localeconv_r>:
 8008010:	4800      	ldr	r0, [pc, #0]	@ (8008014 <_localeconv_r+0x4>)
 8008012:	4770      	bx	lr
 8008014:	20000214 	.word	0x20000214

08008018 <_close_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	2300      	movs	r3, #0
 800801c:	4d05      	ldr	r5, [pc, #20]	@ (8008034 <_close_r+0x1c>)
 800801e:	4604      	mov	r4, r0
 8008020:	4608      	mov	r0, r1
 8008022:	602b      	str	r3, [r5, #0]
 8008024:	f7fa faed 	bl	8002602 <_close>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_close_r+0x1a>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_close_r+0x1a>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	20000894 	.word	0x20000894

08008038 <_lseek_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	2200      	movs	r2, #0
 8008042:	4d05      	ldr	r5, [pc, #20]	@ (8008058 <_lseek_r+0x20>)
 8008044:	602a      	str	r2, [r5, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	f7fa faff 	bl	800264a <_lseek>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_lseek_r+0x1e>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_lseek_r+0x1e>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	20000894 	.word	0x20000894

0800805c <_read_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	4611      	mov	r1, r2
 8008064:	2200      	movs	r2, #0
 8008066:	4d05      	ldr	r5, [pc, #20]	@ (800807c <_read_r+0x20>)
 8008068:	602a      	str	r2, [r5, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	f7fa fa90 	bl	8002590 <_read>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_read_r+0x1e>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_read_r+0x1e>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	20000894 	.word	0x20000894

08008080 <_write_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4604      	mov	r4, r0
 8008084:	4608      	mov	r0, r1
 8008086:	4611      	mov	r1, r2
 8008088:	2200      	movs	r2, #0
 800808a:	4d05      	ldr	r5, [pc, #20]	@ (80080a0 <_write_r+0x20>)
 800808c:	602a      	str	r2, [r5, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	f7fa fa9b 	bl	80025ca <_write>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_write_r+0x1e>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_write_r+0x1e>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	20000894 	.word	0x20000894

080080a4 <__errno>:
 80080a4:	4b01      	ldr	r3, [pc, #4]	@ (80080ac <__errno+0x8>)
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	200000d4 	.word	0x200000d4

080080b0 <__libc_init_array>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	2600      	movs	r6, #0
 80080b4:	4d0c      	ldr	r5, [pc, #48]	@ (80080e8 <__libc_init_array+0x38>)
 80080b6:	4c0d      	ldr	r4, [pc, #52]	@ (80080ec <__libc_init_array+0x3c>)
 80080b8:	1b64      	subs	r4, r4, r5
 80080ba:	10a4      	asrs	r4, r4, #2
 80080bc:	42a6      	cmp	r6, r4
 80080be:	d109      	bne.n	80080d4 <__libc_init_array+0x24>
 80080c0:	f002 f870 	bl	800a1a4 <_init>
 80080c4:	2600      	movs	r6, #0
 80080c6:	4d0a      	ldr	r5, [pc, #40]	@ (80080f0 <__libc_init_array+0x40>)
 80080c8:	4c0a      	ldr	r4, [pc, #40]	@ (80080f4 <__libc_init_array+0x44>)
 80080ca:	1b64      	subs	r4, r4, r5
 80080cc:	10a4      	asrs	r4, r4, #2
 80080ce:	42a6      	cmp	r6, r4
 80080d0:	d105      	bne.n	80080de <__libc_init_array+0x2e>
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d8:	4798      	blx	r3
 80080da:	3601      	adds	r6, #1
 80080dc:	e7ee      	b.n	80080bc <__libc_init_array+0xc>
 80080de:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e2:	4798      	blx	r3
 80080e4:	3601      	adds	r6, #1
 80080e6:	e7f2      	b.n	80080ce <__libc_init_array+0x1e>
 80080e8:	0800a618 	.word	0x0800a618
 80080ec:	0800a618 	.word	0x0800a618
 80080f0:	0800a618 	.word	0x0800a618
 80080f4:	0800a620 	.word	0x0800a620

080080f8 <__retarget_lock_init_recursive>:
 80080f8:	4770      	bx	lr

080080fa <__retarget_lock_acquire_recursive>:
 80080fa:	4770      	bx	lr

080080fc <__retarget_lock_release_recursive>:
 80080fc:	4770      	bx	lr

080080fe <memchr>:
 80080fe:	4603      	mov	r3, r0
 8008100:	b510      	push	{r4, lr}
 8008102:	b2c9      	uxtb	r1, r1
 8008104:	4402      	add	r2, r0
 8008106:	4293      	cmp	r3, r2
 8008108:	4618      	mov	r0, r3
 800810a:	d101      	bne.n	8008110 <memchr+0x12>
 800810c:	2000      	movs	r0, #0
 800810e:	e003      	b.n	8008118 <memchr+0x1a>
 8008110:	7804      	ldrb	r4, [r0, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	428c      	cmp	r4, r1
 8008116:	d1f6      	bne.n	8008106 <memchr+0x8>
 8008118:	bd10      	pop	{r4, pc}

0800811a <quorem>:
 800811a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811e:	6903      	ldr	r3, [r0, #16]
 8008120:	690c      	ldr	r4, [r1, #16]
 8008122:	4607      	mov	r7, r0
 8008124:	42a3      	cmp	r3, r4
 8008126:	db7e      	blt.n	8008226 <quorem+0x10c>
 8008128:	3c01      	subs	r4, #1
 800812a:	00a3      	lsls	r3, r4, #2
 800812c:	f100 0514 	add.w	r5, r0, #20
 8008130:	f101 0814 	add.w	r8, r1, #20
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008144:	3301      	adds	r3, #1
 8008146:	429a      	cmp	r2, r3
 8008148:	fbb2 f6f3 	udiv	r6, r2, r3
 800814c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008150:	d32e      	bcc.n	80081b0 <quorem+0x96>
 8008152:	f04f 0a00 	mov.w	sl, #0
 8008156:	46c4      	mov	ip, r8
 8008158:	46ae      	mov	lr, r5
 800815a:	46d3      	mov	fp, sl
 800815c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008160:	b298      	uxth	r0, r3
 8008162:	fb06 a000 	mla	r0, r6, r0, sl
 8008166:	0c1b      	lsrs	r3, r3, #16
 8008168:	0c02      	lsrs	r2, r0, #16
 800816a:	fb06 2303 	mla	r3, r6, r3, r2
 800816e:	f8de 2000 	ldr.w	r2, [lr]
 8008172:	b280      	uxth	r0, r0
 8008174:	b292      	uxth	r2, r2
 8008176:	1a12      	subs	r2, r2, r0
 8008178:	445a      	add	r2, fp
 800817a:	f8de 0000 	ldr.w	r0, [lr]
 800817e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008182:	b29b      	uxth	r3, r3
 8008184:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008188:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800818c:	b292      	uxth	r2, r2
 800818e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008192:	45e1      	cmp	r9, ip
 8008194:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008198:	f84e 2b04 	str.w	r2, [lr], #4
 800819c:	d2de      	bcs.n	800815c <quorem+0x42>
 800819e:	9b00      	ldr	r3, [sp, #0]
 80081a0:	58eb      	ldr	r3, [r5, r3]
 80081a2:	b92b      	cbnz	r3, 80081b0 <quorem+0x96>
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	3b04      	subs	r3, #4
 80081a8:	429d      	cmp	r5, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	d32f      	bcc.n	800820e <quorem+0xf4>
 80081ae:	613c      	str	r4, [r7, #16]
 80081b0:	4638      	mov	r0, r7
 80081b2:	f001 f97b 	bl	80094ac <__mcmp>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	db25      	blt.n	8008206 <quorem+0xec>
 80081ba:	4629      	mov	r1, r5
 80081bc:	2000      	movs	r0, #0
 80081be:	f858 2b04 	ldr.w	r2, [r8], #4
 80081c2:	f8d1 c000 	ldr.w	ip, [r1]
 80081c6:	fa1f fe82 	uxth.w	lr, r2
 80081ca:	fa1f f38c 	uxth.w	r3, ip
 80081ce:	eba3 030e 	sub.w	r3, r3, lr
 80081d2:	4403      	add	r3, r0
 80081d4:	0c12      	lsrs	r2, r2, #16
 80081d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081de:	b29b      	uxth	r3, r3
 80081e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e4:	45c1      	cmp	r9, r8
 80081e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081ea:	f841 3b04 	str.w	r3, [r1], #4
 80081ee:	d2e6      	bcs.n	80081be <quorem+0xa4>
 80081f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081f8:	b922      	cbnz	r2, 8008204 <quorem+0xea>
 80081fa:	3b04      	subs	r3, #4
 80081fc:	429d      	cmp	r5, r3
 80081fe:	461a      	mov	r2, r3
 8008200:	d30b      	bcc.n	800821a <quorem+0x100>
 8008202:	613c      	str	r4, [r7, #16]
 8008204:	3601      	adds	r6, #1
 8008206:	4630      	mov	r0, r6
 8008208:	b003      	add	sp, #12
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	3b04      	subs	r3, #4
 8008212:	2a00      	cmp	r2, #0
 8008214:	d1cb      	bne.n	80081ae <quorem+0x94>
 8008216:	3c01      	subs	r4, #1
 8008218:	e7c6      	b.n	80081a8 <quorem+0x8e>
 800821a:	6812      	ldr	r2, [r2, #0]
 800821c:	3b04      	subs	r3, #4
 800821e:	2a00      	cmp	r2, #0
 8008220:	d1ef      	bne.n	8008202 <quorem+0xe8>
 8008222:	3c01      	subs	r4, #1
 8008224:	e7ea      	b.n	80081fc <quorem+0xe2>
 8008226:	2000      	movs	r0, #0
 8008228:	e7ee      	b.n	8008208 <quorem+0xee>
 800822a:	0000      	movs	r0, r0
 800822c:	0000      	movs	r0, r0
	...

08008230 <_dtoa_r>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	4614      	mov	r4, r2
 8008236:	461d      	mov	r5, r3
 8008238:	69c7      	ldr	r7, [r0, #28]
 800823a:	b097      	sub	sp, #92	@ 0x5c
 800823c:	4683      	mov	fp, r0
 800823e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008242:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008244:	b97f      	cbnz	r7, 8008266 <_dtoa_r+0x36>
 8008246:	2010      	movs	r0, #16
 8008248:	f000 fe02 	bl	8008e50 <malloc>
 800824c:	4602      	mov	r2, r0
 800824e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008252:	b920      	cbnz	r0, 800825e <_dtoa_r+0x2e>
 8008254:	21ef      	movs	r1, #239	@ 0xef
 8008256:	4ba8      	ldr	r3, [pc, #672]	@ (80084f8 <_dtoa_r+0x2c8>)
 8008258:	48a8      	ldr	r0, [pc, #672]	@ (80084fc <_dtoa_r+0x2cc>)
 800825a:	f001 fc67 	bl	8009b2c <__assert_func>
 800825e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008262:	6007      	str	r7, [r0, #0]
 8008264:	60c7      	str	r7, [r0, #12]
 8008266:	f8db 301c 	ldr.w	r3, [fp, #28]
 800826a:	6819      	ldr	r1, [r3, #0]
 800826c:	b159      	cbz	r1, 8008286 <_dtoa_r+0x56>
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	2301      	movs	r3, #1
 8008272:	4093      	lsls	r3, r2
 8008274:	604a      	str	r2, [r1, #4]
 8008276:	608b      	str	r3, [r1, #8]
 8008278:	4658      	mov	r0, fp
 800827a:	f000 fedf 	bl	800903c <_Bfree>
 800827e:	2200      	movs	r2, #0
 8008280:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	1e2b      	subs	r3, r5, #0
 8008288:	bfaf      	iteee	ge
 800828a:	2300      	movge	r3, #0
 800828c:	2201      	movlt	r2, #1
 800828e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008292:	9303      	strlt	r3, [sp, #12]
 8008294:	bfa8      	it	ge
 8008296:	6033      	strge	r3, [r6, #0]
 8008298:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800829c:	4b98      	ldr	r3, [pc, #608]	@ (8008500 <_dtoa_r+0x2d0>)
 800829e:	bfb8      	it	lt
 80082a0:	6032      	strlt	r2, [r6, #0]
 80082a2:	ea33 0308 	bics.w	r3, r3, r8
 80082a6:	d112      	bne.n	80082ce <_dtoa_r+0x9e>
 80082a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80082ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80082b4:	4323      	orrs	r3, r4
 80082b6:	f000 8550 	beq.w	8008d5a <_dtoa_r+0xb2a>
 80082ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082bc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008504 <_dtoa_r+0x2d4>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8552 	beq.w	8008d6a <_dtoa_r+0xb3a>
 80082c6:	f10a 0303 	add.w	r3, sl, #3
 80082ca:	f000 bd4c 	b.w	8008d66 <_dtoa_r+0xb36>
 80082ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80082d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	f7f8 fb63 	bl	80009a8 <__aeabi_dcmpeq>
 80082e2:	4607      	mov	r7, r0
 80082e4:	b158      	cbz	r0, 80082fe <_dtoa_r+0xce>
 80082e6:	2301      	movs	r3, #1
 80082e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082ee:	b113      	cbz	r3, 80082f6 <_dtoa_r+0xc6>
 80082f0:	4b85      	ldr	r3, [pc, #532]	@ (8008508 <_dtoa_r+0x2d8>)
 80082f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800850c <_dtoa_r+0x2dc>
 80082fa:	f000 bd36 	b.w	8008d6a <_dtoa_r+0xb3a>
 80082fe:	ab14      	add	r3, sp, #80	@ 0x50
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	ab15      	add	r3, sp, #84	@ 0x54
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	4658      	mov	r0, fp
 8008308:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800830c:	f001 f97e 	bl	800960c <__d2b>
 8008310:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008314:	4681      	mov	r9, r0
 8008316:	2e00      	cmp	r6, #0
 8008318:	d077      	beq.n	800840a <_dtoa_r+0x1da>
 800831a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800831e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008320:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008328:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800832c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008330:	9712      	str	r7, [sp, #72]	@ 0x48
 8008332:	4619      	mov	r1, r3
 8008334:	2200      	movs	r2, #0
 8008336:	4b76      	ldr	r3, [pc, #472]	@ (8008510 <_dtoa_r+0x2e0>)
 8008338:	f7f7 ff16 	bl	8000168 <__aeabi_dsub>
 800833c:	a368      	add	r3, pc, #416	@ (adr r3, 80084e0 <_dtoa_r+0x2b0>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f8 f8c9 	bl	80004d8 <__aeabi_dmul>
 8008346:	a368      	add	r3, pc, #416	@ (adr r3, 80084e8 <_dtoa_r+0x2b8>)
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f7f7 ff0e 	bl	800016c <__adddf3>
 8008350:	4604      	mov	r4, r0
 8008352:	4630      	mov	r0, r6
 8008354:	460d      	mov	r5, r1
 8008356:	f7f8 f855 	bl	8000404 <__aeabi_i2d>
 800835a:	a365      	add	r3, pc, #404	@ (adr r3, 80084f0 <_dtoa_r+0x2c0>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f7f8 f8ba 	bl	80004d8 <__aeabi_dmul>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4620      	mov	r0, r4
 800836a:	4629      	mov	r1, r5
 800836c:	f7f7 fefe 	bl	800016c <__adddf3>
 8008370:	4604      	mov	r4, r0
 8008372:	460d      	mov	r5, r1
 8008374:	f7f8 fb60 	bl	8000a38 <__aeabi_d2iz>
 8008378:	2200      	movs	r2, #0
 800837a:	4607      	mov	r7, r0
 800837c:	2300      	movs	r3, #0
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f8 fb1b 	bl	80009bc <__aeabi_dcmplt>
 8008386:	b140      	cbz	r0, 800839a <_dtoa_r+0x16a>
 8008388:	4638      	mov	r0, r7
 800838a:	f7f8 f83b 	bl	8000404 <__aeabi_i2d>
 800838e:	4622      	mov	r2, r4
 8008390:	462b      	mov	r3, r5
 8008392:	f7f8 fb09 	bl	80009a8 <__aeabi_dcmpeq>
 8008396:	b900      	cbnz	r0, 800839a <_dtoa_r+0x16a>
 8008398:	3f01      	subs	r7, #1
 800839a:	2f16      	cmp	r7, #22
 800839c:	d853      	bhi.n	8008446 <_dtoa_r+0x216>
 800839e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008514 <_dtoa_r+0x2e4>)
 80083a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f7f8 fb06 	bl	80009bc <__aeabi_dcmplt>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d04a      	beq.n	800844a <_dtoa_r+0x21a>
 80083b4:	2300      	movs	r3, #0
 80083b6:	3f01      	subs	r7, #1
 80083b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083bc:	1b9b      	subs	r3, r3, r6
 80083be:	1e5a      	subs	r2, r3, #1
 80083c0:	bf46      	itte	mi
 80083c2:	f1c3 0801 	rsbmi	r8, r3, #1
 80083c6:	2300      	movmi	r3, #0
 80083c8:	f04f 0800 	movpl.w	r8, #0
 80083cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ce:	bf48      	it	mi
 80083d0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	db3b      	blt.n	800844e <_dtoa_r+0x21e>
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	970e      	str	r7, [sp, #56]	@ 0x38
 80083da:	443b      	add	r3, r7
 80083dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083de:	2300      	movs	r3, #0
 80083e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d866      	bhi.n	80084b6 <_dtoa_r+0x286>
 80083e8:	2b05      	cmp	r3, #5
 80083ea:	bfc4      	itt	gt
 80083ec:	3b04      	subgt	r3, #4
 80083ee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80083f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083f2:	bfc8      	it	gt
 80083f4:	2400      	movgt	r4, #0
 80083f6:	f1a3 0302 	sub.w	r3, r3, #2
 80083fa:	bfd8      	it	le
 80083fc:	2401      	movle	r4, #1
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d864      	bhi.n	80084cc <_dtoa_r+0x29c>
 8008402:	e8df f003 	tbb	[pc, r3]
 8008406:	382b      	.short	0x382b
 8008408:	5636      	.short	0x5636
 800840a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800840e:	441e      	add	r6, r3
 8008410:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008414:	2b20      	cmp	r3, #32
 8008416:	bfc1      	itttt	gt
 8008418:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800841c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008420:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008424:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008428:	bfd6      	itet	le
 800842a:	f1c3 0320 	rsble	r3, r3, #32
 800842e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008432:	fa04 f003 	lslle.w	r0, r4, r3
 8008436:	f7f7 ffd5 	bl	80003e4 <__aeabi_ui2d>
 800843a:	2201      	movs	r2, #1
 800843c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008440:	3e01      	subs	r6, #1
 8008442:	9212      	str	r2, [sp, #72]	@ 0x48
 8008444:	e775      	b.n	8008332 <_dtoa_r+0x102>
 8008446:	2301      	movs	r3, #1
 8008448:	e7b6      	b.n	80083b8 <_dtoa_r+0x188>
 800844a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800844c:	e7b5      	b.n	80083ba <_dtoa_r+0x18a>
 800844e:	427b      	negs	r3, r7
 8008450:	930a      	str	r3, [sp, #40]	@ 0x28
 8008452:	2300      	movs	r3, #0
 8008454:	eba8 0807 	sub.w	r8, r8, r7
 8008458:	930e      	str	r3, [sp, #56]	@ 0x38
 800845a:	e7c2      	b.n	80083e2 <_dtoa_r+0x1b2>
 800845c:	2300      	movs	r3, #0
 800845e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008460:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008462:	2b00      	cmp	r3, #0
 8008464:	dc35      	bgt.n	80084d2 <_dtoa_r+0x2a2>
 8008466:	2301      	movs	r3, #1
 8008468:	461a      	mov	r2, r3
 800846a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800846e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008470:	e00b      	b.n	800848a <_dtoa_r+0x25a>
 8008472:	2301      	movs	r3, #1
 8008474:	e7f3      	b.n	800845e <_dtoa_r+0x22e>
 8008476:	2300      	movs	r3, #0
 8008478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800847a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800847c:	18fb      	adds	r3, r7, r3
 800847e:	9308      	str	r3, [sp, #32]
 8008480:	3301      	adds	r3, #1
 8008482:	2b01      	cmp	r3, #1
 8008484:	9307      	str	r3, [sp, #28]
 8008486:	bfb8      	it	lt
 8008488:	2301      	movlt	r3, #1
 800848a:	2100      	movs	r1, #0
 800848c:	2204      	movs	r2, #4
 800848e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008492:	f102 0514 	add.w	r5, r2, #20
 8008496:	429d      	cmp	r5, r3
 8008498:	d91f      	bls.n	80084da <_dtoa_r+0x2aa>
 800849a:	6041      	str	r1, [r0, #4]
 800849c:	4658      	mov	r0, fp
 800849e:	f000 fd8d 	bl	8008fbc <_Balloc>
 80084a2:	4682      	mov	sl, r0
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d139      	bne.n	800851c <_dtoa_r+0x2ec>
 80084a8:	4602      	mov	r2, r0
 80084aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80084ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008518 <_dtoa_r+0x2e8>)
 80084b0:	e6d2      	b.n	8008258 <_dtoa_r+0x28>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e7e0      	b.n	8008478 <_dtoa_r+0x248>
 80084b6:	2401      	movs	r4, #1
 80084b8:	2300      	movs	r3, #0
 80084ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80084be:	f04f 33ff 	mov.w	r3, #4294967295
 80084c2:	2200      	movs	r2, #0
 80084c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084c8:	2312      	movs	r3, #18
 80084ca:	e7d0      	b.n	800846e <_dtoa_r+0x23e>
 80084cc:	2301      	movs	r3, #1
 80084ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084d0:	e7f5      	b.n	80084be <_dtoa_r+0x28e>
 80084d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084d8:	e7d7      	b.n	800848a <_dtoa_r+0x25a>
 80084da:	3101      	adds	r1, #1
 80084dc:	0052      	lsls	r2, r2, #1
 80084de:	e7d8      	b.n	8008492 <_dtoa_r+0x262>
 80084e0:	636f4361 	.word	0x636f4361
 80084e4:	3fd287a7 	.word	0x3fd287a7
 80084e8:	8b60c8b3 	.word	0x8b60c8b3
 80084ec:	3fc68a28 	.word	0x3fc68a28
 80084f0:	509f79fb 	.word	0x509f79fb
 80084f4:	3fd34413 	.word	0x3fd34413
 80084f8:	0800a2e1 	.word	0x0800a2e1
 80084fc:	0800a2f8 	.word	0x0800a2f8
 8008500:	7ff00000 	.word	0x7ff00000
 8008504:	0800a2dd 	.word	0x0800a2dd
 8008508:	0800a2b1 	.word	0x0800a2b1
 800850c:	0800a2b0 	.word	0x0800a2b0
 8008510:	3ff80000 	.word	0x3ff80000
 8008514:	0800a3f0 	.word	0x0800a3f0
 8008518:	0800a350 	.word	0x0800a350
 800851c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008520:	6018      	str	r0, [r3, #0]
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	2b0e      	cmp	r3, #14
 8008526:	f200 80a4 	bhi.w	8008672 <_dtoa_r+0x442>
 800852a:	2c00      	cmp	r4, #0
 800852c:	f000 80a1 	beq.w	8008672 <_dtoa_r+0x442>
 8008530:	2f00      	cmp	r7, #0
 8008532:	dd33      	ble.n	800859c <_dtoa_r+0x36c>
 8008534:	4b86      	ldr	r3, [pc, #536]	@ (8008750 <_dtoa_r+0x520>)
 8008536:	f007 020f 	and.w	r2, r7, #15
 800853a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800853e:	05f8      	lsls	r0, r7, #23
 8008540:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008544:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008548:	ea4f 1427 	mov.w	r4, r7, asr #4
 800854c:	d516      	bpl.n	800857c <_dtoa_r+0x34c>
 800854e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008552:	4b80      	ldr	r3, [pc, #512]	@ (8008754 <_dtoa_r+0x524>)
 8008554:	2603      	movs	r6, #3
 8008556:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800855a:	f7f8 f8e7 	bl	800072c <__aeabi_ddiv>
 800855e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008562:	f004 040f 	and.w	r4, r4, #15
 8008566:	4d7b      	ldr	r5, [pc, #492]	@ (8008754 <_dtoa_r+0x524>)
 8008568:	b954      	cbnz	r4, 8008580 <_dtoa_r+0x350>
 800856a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800856e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008572:	f7f8 f8db 	bl	800072c <__aeabi_ddiv>
 8008576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800857a:	e028      	b.n	80085ce <_dtoa_r+0x39e>
 800857c:	2602      	movs	r6, #2
 800857e:	e7f2      	b.n	8008566 <_dtoa_r+0x336>
 8008580:	07e1      	lsls	r1, r4, #31
 8008582:	d508      	bpl.n	8008596 <_dtoa_r+0x366>
 8008584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008588:	e9d5 2300 	ldrd	r2, r3, [r5]
 800858c:	f7f7 ffa4 	bl	80004d8 <__aeabi_dmul>
 8008590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008594:	3601      	adds	r6, #1
 8008596:	1064      	asrs	r4, r4, #1
 8008598:	3508      	adds	r5, #8
 800859a:	e7e5      	b.n	8008568 <_dtoa_r+0x338>
 800859c:	f000 80d2 	beq.w	8008744 <_dtoa_r+0x514>
 80085a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085a4:	427c      	negs	r4, r7
 80085a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008750 <_dtoa_r+0x520>)
 80085a8:	f004 020f 	and.w	r2, r4, #15
 80085ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f7 ff90 	bl	80004d8 <__aeabi_dmul>
 80085b8:	2602      	movs	r6, #2
 80085ba:	2300      	movs	r3, #0
 80085bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c0:	4d64      	ldr	r5, [pc, #400]	@ (8008754 <_dtoa_r+0x524>)
 80085c2:	1124      	asrs	r4, r4, #4
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	f040 80b2 	bne.w	800872e <_dtoa_r+0x4fe>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1d3      	bne.n	8008576 <_dtoa_r+0x346>
 80085ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 80b7 	beq.w	8008748 <_dtoa_r+0x518>
 80085da:	2200      	movs	r2, #0
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	4b5d      	ldr	r3, [pc, #372]	@ (8008758 <_dtoa_r+0x528>)
 80085e2:	f7f8 f9eb 	bl	80009bc <__aeabi_dcmplt>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f000 80ae 	beq.w	8008748 <_dtoa_r+0x518>
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80aa 	beq.w	8008748 <_dtoa_r+0x518>
 80085f4:	9b08      	ldr	r3, [sp, #32]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd37      	ble.n	800866a <_dtoa_r+0x43a>
 80085fa:	1e7b      	subs	r3, r7, #1
 80085fc:	4620      	mov	r0, r4
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	2200      	movs	r2, #0
 8008602:	4629      	mov	r1, r5
 8008604:	4b55      	ldr	r3, [pc, #340]	@ (800875c <_dtoa_r+0x52c>)
 8008606:	f7f7 ff67 	bl	80004d8 <__aeabi_dmul>
 800860a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860e:	9c08      	ldr	r4, [sp, #32]
 8008610:	3601      	adds	r6, #1
 8008612:	4630      	mov	r0, r6
 8008614:	f7f7 fef6 	bl	8000404 <__aeabi_i2d>
 8008618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800861c:	f7f7 ff5c 	bl	80004d8 <__aeabi_dmul>
 8008620:	2200      	movs	r2, #0
 8008622:	4b4f      	ldr	r3, [pc, #316]	@ (8008760 <_dtoa_r+0x530>)
 8008624:	f7f7 fda2 	bl	800016c <__adddf3>
 8008628:	4605      	mov	r5, r0
 800862a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800862e:	2c00      	cmp	r4, #0
 8008630:	f040 809a 	bne.w	8008768 <_dtoa_r+0x538>
 8008634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008638:	2200      	movs	r2, #0
 800863a:	4b4a      	ldr	r3, [pc, #296]	@ (8008764 <_dtoa_r+0x534>)
 800863c:	f7f7 fd94 	bl	8000168 <__aeabi_dsub>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008648:	462a      	mov	r2, r5
 800864a:	4633      	mov	r3, r6
 800864c:	f7f8 f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 8008650:	2800      	cmp	r0, #0
 8008652:	f040 828e 	bne.w	8008b72 <_dtoa_r+0x942>
 8008656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800865a:	462a      	mov	r2, r5
 800865c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008660:	f7f8 f9ac 	bl	80009bc <__aeabi_dcmplt>
 8008664:	2800      	cmp	r0, #0
 8008666:	f040 8127 	bne.w	80088b8 <_dtoa_r+0x688>
 800866a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800866e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008672:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008674:	2b00      	cmp	r3, #0
 8008676:	f2c0 8163 	blt.w	8008940 <_dtoa_r+0x710>
 800867a:	2f0e      	cmp	r7, #14
 800867c:	f300 8160 	bgt.w	8008940 <_dtoa_r+0x710>
 8008680:	4b33      	ldr	r3, [pc, #204]	@ (8008750 <_dtoa_r+0x520>)
 8008682:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800868a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800868e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008690:	2b00      	cmp	r3, #0
 8008692:	da03      	bge.n	800869c <_dtoa_r+0x46c>
 8008694:	9b07      	ldr	r3, [sp, #28]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f340 8100 	ble.w	800889c <_dtoa_r+0x66c>
 800869c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086a0:	4656      	mov	r6, sl
 80086a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f8 f83f 	bl	800072c <__aeabi_ddiv>
 80086ae:	f7f8 f9c3 	bl	8000a38 <__aeabi_d2iz>
 80086b2:	4680      	mov	r8, r0
 80086b4:	f7f7 fea6 	bl	8000404 <__aeabi_i2d>
 80086b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086bc:	f7f7 ff0c 	bl	80004d8 <__aeabi_dmul>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4620      	mov	r0, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	f7f7 fd4e 	bl	8000168 <__aeabi_dsub>
 80086cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086d0:	9d07      	ldr	r5, [sp, #28]
 80086d2:	f806 4b01 	strb.w	r4, [r6], #1
 80086d6:	eba6 040a 	sub.w	r4, r6, sl
 80086da:	42a5      	cmp	r5, r4
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	f040 8116 	bne.w	8008910 <_dtoa_r+0x6e0>
 80086e4:	f7f7 fd42 	bl	800016c <__adddf3>
 80086e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ec:	4604      	mov	r4, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	f7f8 f982 	bl	80009f8 <__aeabi_dcmpgt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f040 80f8 	bne.w	80088ea <_dtoa_r+0x6ba>
 80086fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f8 f951 	bl	80009a8 <__aeabi_dcmpeq>
 8008706:	b118      	cbz	r0, 8008710 <_dtoa_r+0x4e0>
 8008708:	f018 0f01 	tst.w	r8, #1
 800870c:	f040 80ed 	bne.w	80088ea <_dtoa_r+0x6ba>
 8008710:	4649      	mov	r1, r9
 8008712:	4658      	mov	r0, fp
 8008714:	f000 fc92 	bl	800903c <_Bfree>
 8008718:	2300      	movs	r3, #0
 800871a:	7033      	strb	r3, [r6, #0]
 800871c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800871e:	3701      	adds	r7, #1
 8008720:	601f      	str	r7, [r3, #0]
 8008722:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8320 	beq.w	8008d6a <_dtoa_r+0xb3a>
 800872a:	601e      	str	r6, [r3, #0]
 800872c:	e31d      	b.n	8008d6a <_dtoa_r+0xb3a>
 800872e:	07e2      	lsls	r2, r4, #31
 8008730:	d505      	bpl.n	800873e <_dtoa_r+0x50e>
 8008732:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008736:	f7f7 fecf 	bl	80004d8 <__aeabi_dmul>
 800873a:	2301      	movs	r3, #1
 800873c:	3601      	adds	r6, #1
 800873e:	1064      	asrs	r4, r4, #1
 8008740:	3508      	adds	r5, #8
 8008742:	e73f      	b.n	80085c4 <_dtoa_r+0x394>
 8008744:	2602      	movs	r6, #2
 8008746:	e742      	b.n	80085ce <_dtoa_r+0x39e>
 8008748:	9c07      	ldr	r4, [sp, #28]
 800874a:	9704      	str	r7, [sp, #16]
 800874c:	e761      	b.n	8008612 <_dtoa_r+0x3e2>
 800874e:	bf00      	nop
 8008750:	0800a3f0 	.word	0x0800a3f0
 8008754:	0800a3c8 	.word	0x0800a3c8
 8008758:	3ff00000 	.word	0x3ff00000
 800875c:	40240000 	.word	0x40240000
 8008760:	401c0000 	.word	0x401c0000
 8008764:	40140000 	.word	0x40140000
 8008768:	4b70      	ldr	r3, [pc, #448]	@ (800892c <_dtoa_r+0x6fc>)
 800876a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800876c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008774:	4454      	add	r4, sl
 8008776:	2900      	cmp	r1, #0
 8008778:	d045      	beq.n	8008806 <_dtoa_r+0x5d6>
 800877a:	2000      	movs	r0, #0
 800877c:	496c      	ldr	r1, [pc, #432]	@ (8008930 <_dtoa_r+0x700>)
 800877e:	f7f7 ffd5 	bl	800072c <__aeabi_ddiv>
 8008782:	4633      	mov	r3, r6
 8008784:	462a      	mov	r2, r5
 8008786:	f7f7 fcef 	bl	8000168 <__aeabi_dsub>
 800878a:	4656      	mov	r6, sl
 800878c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008794:	f7f8 f950 	bl	8000a38 <__aeabi_d2iz>
 8008798:	4605      	mov	r5, r0
 800879a:	f7f7 fe33 	bl	8000404 <__aeabi_i2d>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087a6:	f7f7 fcdf 	bl	8000168 <__aeabi_dsub>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	3530      	adds	r5, #48	@ 0x30
 80087b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087b8:	f806 5b01 	strb.w	r5, [r6], #1
 80087bc:	f7f8 f8fe 	bl	80009bc <__aeabi_dcmplt>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d163      	bne.n	800888c <_dtoa_r+0x65c>
 80087c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087c8:	2000      	movs	r0, #0
 80087ca:	495a      	ldr	r1, [pc, #360]	@ (8008934 <_dtoa_r+0x704>)
 80087cc:	f7f7 fccc 	bl	8000168 <__aeabi_dsub>
 80087d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087d4:	f7f8 f8f2 	bl	80009bc <__aeabi_dcmplt>
 80087d8:	2800      	cmp	r0, #0
 80087da:	f040 8087 	bne.w	80088ec <_dtoa_r+0x6bc>
 80087de:	42a6      	cmp	r6, r4
 80087e0:	f43f af43 	beq.w	800866a <_dtoa_r+0x43a>
 80087e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087e8:	2200      	movs	r2, #0
 80087ea:	4b53      	ldr	r3, [pc, #332]	@ (8008938 <_dtoa_r+0x708>)
 80087ec:	f7f7 fe74 	bl	80004d8 <__aeabi_dmul>
 80087f0:	2200      	movs	r2, #0
 80087f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008938 <_dtoa_r+0x708>)
 80087fc:	f7f7 fe6c 	bl	80004d8 <__aeabi_dmul>
 8008800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008804:	e7c4      	b.n	8008790 <_dtoa_r+0x560>
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	f7f7 fe65 	bl	80004d8 <__aeabi_dmul>
 800880e:	4656      	mov	r6, sl
 8008810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008814:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881a:	f7f8 f90d 	bl	8000a38 <__aeabi_d2iz>
 800881e:	4605      	mov	r5, r0
 8008820:	f7f7 fdf0 	bl	8000404 <__aeabi_i2d>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800882c:	f7f7 fc9c 	bl	8000168 <__aeabi_dsub>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	3530      	adds	r5, #48	@ 0x30
 8008836:	f806 5b01 	strb.w	r5, [r6], #1
 800883a:	42a6      	cmp	r6, r4
 800883c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008840:	f04f 0200 	mov.w	r2, #0
 8008844:	d124      	bne.n	8008890 <_dtoa_r+0x660>
 8008846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800884a:	4b39      	ldr	r3, [pc, #228]	@ (8008930 <_dtoa_r+0x700>)
 800884c:	f7f7 fc8e 	bl	800016c <__adddf3>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008858:	f7f8 f8ce 	bl	80009f8 <__aeabi_dcmpgt>
 800885c:	2800      	cmp	r0, #0
 800885e:	d145      	bne.n	80088ec <_dtoa_r+0x6bc>
 8008860:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008864:	2000      	movs	r0, #0
 8008866:	4932      	ldr	r1, [pc, #200]	@ (8008930 <_dtoa_r+0x700>)
 8008868:	f7f7 fc7e 	bl	8000168 <__aeabi_dsub>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008874:	f7f8 f8a2 	bl	80009bc <__aeabi_dcmplt>
 8008878:	2800      	cmp	r0, #0
 800887a:	f43f aef6 	beq.w	800866a <_dtoa_r+0x43a>
 800887e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008880:	1e73      	subs	r3, r6, #1
 8008882:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008884:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008888:	2b30      	cmp	r3, #48	@ 0x30
 800888a:	d0f8      	beq.n	800887e <_dtoa_r+0x64e>
 800888c:	9f04      	ldr	r7, [sp, #16]
 800888e:	e73f      	b.n	8008710 <_dtoa_r+0x4e0>
 8008890:	4b29      	ldr	r3, [pc, #164]	@ (8008938 <_dtoa_r+0x708>)
 8008892:	f7f7 fe21 	bl	80004d8 <__aeabi_dmul>
 8008896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800889a:	e7bc      	b.n	8008816 <_dtoa_r+0x5e6>
 800889c:	d10c      	bne.n	80088b8 <_dtoa_r+0x688>
 800889e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088a2:	2200      	movs	r2, #0
 80088a4:	4b25      	ldr	r3, [pc, #148]	@ (800893c <_dtoa_r+0x70c>)
 80088a6:	f7f7 fe17 	bl	80004d8 <__aeabi_dmul>
 80088aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ae:	f7f8 f899 	bl	80009e4 <__aeabi_dcmpge>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f000 815b 	beq.w	8008b6e <_dtoa_r+0x93e>
 80088b8:	2400      	movs	r4, #0
 80088ba:	4625      	mov	r5, r4
 80088bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088be:	4656      	mov	r6, sl
 80088c0:	43db      	mvns	r3, r3
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	2700      	movs	r7, #0
 80088c6:	4621      	mov	r1, r4
 80088c8:	4658      	mov	r0, fp
 80088ca:	f000 fbb7 	bl	800903c <_Bfree>
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	d0dc      	beq.n	800888c <_dtoa_r+0x65c>
 80088d2:	b12f      	cbz	r7, 80088e0 <_dtoa_r+0x6b0>
 80088d4:	42af      	cmp	r7, r5
 80088d6:	d003      	beq.n	80088e0 <_dtoa_r+0x6b0>
 80088d8:	4639      	mov	r1, r7
 80088da:	4658      	mov	r0, fp
 80088dc:	f000 fbae 	bl	800903c <_Bfree>
 80088e0:	4629      	mov	r1, r5
 80088e2:	4658      	mov	r0, fp
 80088e4:	f000 fbaa 	bl	800903c <_Bfree>
 80088e8:	e7d0      	b.n	800888c <_dtoa_r+0x65c>
 80088ea:	9704      	str	r7, [sp, #16]
 80088ec:	4633      	mov	r3, r6
 80088ee:	461e      	mov	r6, r3
 80088f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088f4:	2a39      	cmp	r2, #57	@ 0x39
 80088f6:	d107      	bne.n	8008908 <_dtoa_r+0x6d8>
 80088f8:	459a      	cmp	sl, r3
 80088fa:	d1f8      	bne.n	80088ee <_dtoa_r+0x6be>
 80088fc:	9a04      	ldr	r2, [sp, #16]
 80088fe:	3201      	adds	r2, #1
 8008900:	9204      	str	r2, [sp, #16]
 8008902:	2230      	movs	r2, #48	@ 0x30
 8008904:	f88a 2000 	strb.w	r2, [sl]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	3201      	adds	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	e7bd      	b.n	800888c <_dtoa_r+0x65c>
 8008910:	2200      	movs	r2, #0
 8008912:	4b09      	ldr	r3, [pc, #36]	@ (8008938 <_dtoa_r+0x708>)
 8008914:	f7f7 fde0 	bl	80004d8 <__aeabi_dmul>
 8008918:	2200      	movs	r2, #0
 800891a:	2300      	movs	r3, #0
 800891c:	4604      	mov	r4, r0
 800891e:	460d      	mov	r5, r1
 8008920:	f7f8 f842 	bl	80009a8 <__aeabi_dcmpeq>
 8008924:	2800      	cmp	r0, #0
 8008926:	f43f aebc 	beq.w	80086a2 <_dtoa_r+0x472>
 800892a:	e6f1      	b.n	8008710 <_dtoa_r+0x4e0>
 800892c:	0800a3f0 	.word	0x0800a3f0
 8008930:	3fe00000 	.word	0x3fe00000
 8008934:	3ff00000 	.word	0x3ff00000
 8008938:	40240000 	.word	0x40240000
 800893c:	40140000 	.word	0x40140000
 8008940:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008942:	2a00      	cmp	r2, #0
 8008944:	f000 80db 	beq.w	8008afe <_dtoa_r+0x8ce>
 8008948:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800894a:	2a01      	cmp	r2, #1
 800894c:	f300 80bf 	bgt.w	8008ace <_dtoa_r+0x89e>
 8008950:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008952:	2a00      	cmp	r2, #0
 8008954:	f000 80b7 	beq.w	8008ac6 <_dtoa_r+0x896>
 8008958:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800895c:	4646      	mov	r6, r8
 800895e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008962:	2101      	movs	r1, #1
 8008964:	441a      	add	r2, r3
 8008966:	4658      	mov	r0, fp
 8008968:	4498      	add	r8, r3
 800896a:	9209      	str	r2, [sp, #36]	@ 0x24
 800896c:	f000 fc1a 	bl	80091a4 <__i2b>
 8008970:	4605      	mov	r5, r0
 8008972:	b15e      	cbz	r6, 800898c <_dtoa_r+0x75c>
 8008974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008976:	2b00      	cmp	r3, #0
 8008978:	dd08      	ble.n	800898c <_dtoa_r+0x75c>
 800897a:	42b3      	cmp	r3, r6
 800897c:	bfa8      	it	ge
 800897e:	4633      	movge	r3, r6
 8008980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008982:	eba8 0803 	sub.w	r8, r8, r3
 8008986:	1af6      	subs	r6, r6, r3
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	9309      	str	r3, [sp, #36]	@ 0x24
 800898c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800898e:	b1f3      	cbz	r3, 80089ce <_dtoa_r+0x79e>
 8008990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80b7 	beq.w	8008b06 <_dtoa_r+0x8d6>
 8008998:	b18c      	cbz	r4, 80089be <_dtoa_r+0x78e>
 800899a:	4629      	mov	r1, r5
 800899c:	4622      	mov	r2, r4
 800899e:	4658      	mov	r0, fp
 80089a0:	f000 fcbe 	bl	8009320 <__pow5mult>
 80089a4:	464a      	mov	r2, r9
 80089a6:	4601      	mov	r1, r0
 80089a8:	4605      	mov	r5, r0
 80089aa:	4658      	mov	r0, fp
 80089ac:	f000 fc10 	bl	80091d0 <__multiply>
 80089b0:	4649      	mov	r1, r9
 80089b2:	9004      	str	r0, [sp, #16]
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 fb41 	bl	800903c <_Bfree>
 80089ba:	9b04      	ldr	r3, [sp, #16]
 80089bc:	4699      	mov	r9, r3
 80089be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089c0:	1b1a      	subs	r2, r3, r4
 80089c2:	d004      	beq.n	80089ce <_dtoa_r+0x79e>
 80089c4:	4649      	mov	r1, r9
 80089c6:	4658      	mov	r0, fp
 80089c8:	f000 fcaa 	bl	8009320 <__pow5mult>
 80089cc:	4681      	mov	r9, r0
 80089ce:	2101      	movs	r1, #1
 80089d0:	4658      	mov	r0, fp
 80089d2:	f000 fbe7 	bl	80091a4 <__i2b>
 80089d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089d8:	4604      	mov	r4, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 81c9 	beq.w	8008d72 <_dtoa_r+0xb42>
 80089e0:	461a      	mov	r2, r3
 80089e2:	4601      	mov	r1, r0
 80089e4:	4658      	mov	r0, fp
 80089e6:	f000 fc9b 	bl	8009320 <__pow5mult>
 80089ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089ec:	4604      	mov	r4, r0
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	f300 808f 	bgt.w	8008b12 <_dtoa_r+0x8e2>
 80089f4:	9b02      	ldr	r3, [sp, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f040 8087 	bne.w	8008b0a <_dtoa_r+0x8da>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 8083 	bne.w	8008b0e <_dtoa_r+0x8de>
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a0e:	0d1b      	lsrs	r3, r3, #20
 8008a10:	051b      	lsls	r3, r3, #20
 8008a12:	b12b      	cbz	r3, 8008a20 <_dtoa_r+0x7f0>
 8008a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a16:	f108 0801 	add.w	r8, r8, #1
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a1e:	2301      	movs	r3, #1
 8008a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 81aa 	beq.w	8008d7e <_dtoa_r+0xb4e>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a30:	6918      	ldr	r0, [r3, #16]
 8008a32:	f000 fb6b 	bl	800910c <__hi0bits>
 8008a36:	f1c0 0020 	rsb	r0, r0, #32
 8008a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a3c:	4418      	add	r0, r3
 8008a3e:	f010 001f 	ands.w	r0, r0, #31
 8008a42:	d071      	beq.n	8008b28 <_dtoa_r+0x8f8>
 8008a44:	f1c0 0320 	rsb	r3, r0, #32
 8008a48:	2b04      	cmp	r3, #4
 8008a4a:	dd65      	ble.n	8008b18 <_dtoa_r+0x8e8>
 8008a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a4e:	f1c0 001c 	rsb	r0, r0, #28
 8008a52:	4403      	add	r3, r0
 8008a54:	4480      	add	r8, r0
 8008a56:	4406      	add	r6, r0
 8008a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5a:	f1b8 0f00 	cmp.w	r8, #0
 8008a5e:	dd05      	ble.n	8008a6c <_dtoa_r+0x83c>
 8008a60:	4649      	mov	r1, r9
 8008a62:	4642      	mov	r2, r8
 8008a64:	4658      	mov	r0, fp
 8008a66:	f000 fcb5 	bl	80093d4 <__lshift>
 8008a6a:	4681      	mov	r9, r0
 8008a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dd05      	ble.n	8008a7e <_dtoa_r+0x84e>
 8008a72:	4621      	mov	r1, r4
 8008a74:	461a      	mov	r2, r3
 8008a76:	4658      	mov	r0, fp
 8008a78:	f000 fcac 	bl	80093d4 <__lshift>
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d053      	beq.n	8008b2c <_dtoa_r+0x8fc>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4648      	mov	r0, r9
 8008a88:	f000 fd10 	bl	80094ac <__mcmp>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	da4d      	bge.n	8008b2c <_dtoa_r+0x8fc>
 8008a90:	1e7b      	subs	r3, r7, #1
 8008a92:	4649      	mov	r1, r9
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	220a      	movs	r2, #10
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4658      	mov	r0, fp
 8008a9c:	f000 faf0 	bl	8009080 <__multadd>
 8008aa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa2:	4681      	mov	r9, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 816c 	beq.w	8008d82 <_dtoa_r+0xb52>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4629      	mov	r1, r5
 8008aae:	220a      	movs	r2, #10
 8008ab0:	4658      	mov	r0, fp
 8008ab2:	f000 fae5 	bl	8009080 <__multadd>
 8008ab6:	9b08      	ldr	r3, [sp, #32]
 8008ab8:	4605      	mov	r5, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	dc61      	bgt.n	8008b82 <_dtoa_r+0x952>
 8008abe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	dc3b      	bgt.n	8008b3c <_dtoa_r+0x90c>
 8008ac4:	e05d      	b.n	8008b82 <_dtoa_r+0x952>
 8008ac6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ac8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008acc:	e746      	b.n	800895c <_dtoa_r+0x72c>
 8008ace:	9b07      	ldr	r3, [sp, #28]
 8008ad0:	1e5c      	subs	r4, r3, #1
 8008ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	bfbf      	itttt	lt
 8008ad8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ada:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008adc:	1ae3      	sublt	r3, r4, r3
 8008ade:	18d2      	addlt	r2, r2, r3
 8008ae0:	bfa8      	it	ge
 8008ae2:	1b1c      	subge	r4, r3, r4
 8008ae4:	9b07      	ldr	r3, [sp, #28]
 8008ae6:	bfbe      	ittt	lt
 8008ae8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008aea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008aec:	2400      	movlt	r4, #0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bfb5      	itete	lt
 8008af2:	eba8 0603 	sublt.w	r6, r8, r3
 8008af6:	4646      	movge	r6, r8
 8008af8:	2300      	movlt	r3, #0
 8008afa:	9b07      	ldrge	r3, [sp, #28]
 8008afc:	e730      	b.n	8008960 <_dtoa_r+0x730>
 8008afe:	4646      	mov	r6, r8
 8008b00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b02:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b04:	e735      	b.n	8008972 <_dtoa_r+0x742>
 8008b06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b08:	e75c      	b.n	80089c4 <_dtoa_r+0x794>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e788      	b.n	8008a20 <_dtoa_r+0x7f0>
 8008b0e:	9b02      	ldr	r3, [sp, #8]
 8008b10:	e786      	b.n	8008a20 <_dtoa_r+0x7f0>
 8008b12:	2300      	movs	r3, #0
 8008b14:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b16:	e788      	b.n	8008a2a <_dtoa_r+0x7fa>
 8008b18:	d09f      	beq.n	8008a5a <_dtoa_r+0x82a>
 8008b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b1c:	331c      	adds	r3, #28
 8008b1e:	441a      	add	r2, r3
 8008b20:	4498      	add	r8, r3
 8008b22:	441e      	add	r6, r3
 8008b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b26:	e798      	b.n	8008a5a <_dtoa_r+0x82a>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	e7f6      	b.n	8008b1a <_dtoa_r+0x8ea>
 8008b2c:	9b07      	ldr	r3, [sp, #28]
 8008b2e:	9704      	str	r7, [sp, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dc20      	bgt.n	8008b76 <_dtoa_r+0x946>
 8008b34:	9308      	str	r3, [sp, #32]
 8008b36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	dd1e      	ble.n	8008b7a <_dtoa_r+0x94a>
 8008b3c:	9b08      	ldr	r3, [sp, #32]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f47f aebc 	bne.w	80088bc <_dtoa_r+0x68c>
 8008b44:	4621      	mov	r1, r4
 8008b46:	2205      	movs	r2, #5
 8008b48:	4658      	mov	r0, fp
 8008b4a:	f000 fa99 	bl	8009080 <__multadd>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	4604      	mov	r4, r0
 8008b52:	4648      	mov	r0, r9
 8008b54:	f000 fcaa 	bl	80094ac <__mcmp>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f77f aeaf 	ble.w	80088bc <_dtoa_r+0x68c>
 8008b5e:	2331      	movs	r3, #49	@ 0x31
 8008b60:	4656      	mov	r6, sl
 8008b62:	f806 3b01 	strb.w	r3, [r6], #1
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	e6aa      	b.n	80088c4 <_dtoa_r+0x694>
 8008b6e:	9c07      	ldr	r4, [sp, #28]
 8008b70:	9704      	str	r7, [sp, #16]
 8008b72:	4625      	mov	r5, r4
 8008b74:	e7f3      	b.n	8008b5e <_dtoa_r+0x92e>
 8008b76:	9b07      	ldr	r3, [sp, #28]
 8008b78:	9308      	str	r3, [sp, #32]
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 8104 	beq.w	8008d8a <_dtoa_r+0xb5a>
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	dd05      	ble.n	8008b92 <_dtoa_r+0x962>
 8008b86:	4629      	mov	r1, r5
 8008b88:	4632      	mov	r2, r6
 8008b8a:	4658      	mov	r0, fp
 8008b8c:	f000 fc22 	bl	80093d4 <__lshift>
 8008b90:	4605      	mov	r5, r0
 8008b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d05a      	beq.n	8008c4e <_dtoa_r+0xa1e>
 8008b98:	4658      	mov	r0, fp
 8008b9a:	6869      	ldr	r1, [r5, #4]
 8008b9c:	f000 fa0e 	bl	8008fbc <_Balloc>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	b928      	cbnz	r0, 8008bb0 <_dtoa_r+0x980>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008baa:	4b83      	ldr	r3, [pc, #524]	@ (8008db8 <_dtoa_r+0xb88>)
 8008bac:	f7ff bb54 	b.w	8008258 <_dtoa_r+0x28>
 8008bb0:	692a      	ldr	r2, [r5, #16]
 8008bb2:	f105 010c 	add.w	r1, r5, #12
 8008bb6:	3202      	adds	r2, #2
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	300c      	adds	r0, #12
 8008bbc:	f000 ffa8 	bl	8009b10 <memcpy>
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4658      	mov	r0, fp
 8008bc6:	f000 fc05 	bl	80093d4 <__lshift>
 8008bca:	462f      	mov	r7, r5
 8008bcc:	4605      	mov	r5, r0
 8008bce:	f10a 0301 	add.w	r3, sl, #1
 8008bd2:	9307      	str	r3, [sp, #28]
 8008bd4:	9b08      	ldr	r3, [sp, #32]
 8008bd6:	4453      	add	r3, sl
 8008bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bda:	9b02      	ldr	r3, [sp, #8]
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be2:	9b07      	ldr	r3, [sp, #28]
 8008be4:	4621      	mov	r1, r4
 8008be6:	3b01      	subs	r3, #1
 8008be8:	4648      	mov	r0, r9
 8008bea:	9302      	str	r3, [sp, #8]
 8008bec:	f7ff fa95 	bl	800811a <quorem>
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	9008      	str	r0, [sp, #32]
 8008bf4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bf8:	4648      	mov	r0, r9
 8008bfa:	f000 fc57 	bl	80094ac <__mcmp>
 8008bfe:	462a      	mov	r2, r5
 8008c00:	9009      	str	r0, [sp, #36]	@ 0x24
 8008c02:	4621      	mov	r1, r4
 8008c04:	4658      	mov	r0, fp
 8008c06:	f000 fc6d 	bl	80094e4 <__mdiff>
 8008c0a:	68c2      	ldr	r2, [r0, #12]
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	bb02      	cbnz	r2, 8008c52 <_dtoa_r+0xa22>
 8008c10:	4601      	mov	r1, r0
 8008c12:	4648      	mov	r0, r9
 8008c14:	f000 fc4a 	bl	80094ac <__mcmp>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c20:	f000 fa0c 	bl	800903c <_Bfree>
 8008c24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c28:	9e07      	ldr	r6, [sp, #28]
 8008c2a:	ea43 0102 	orr.w	r1, r3, r2
 8008c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c30:	4319      	orrs	r1, r3
 8008c32:	d110      	bne.n	8008c56 <_dtoa_r+0xa26>
 8008c34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c38:	d029      	beq.n	8008c8e <_dtoa_r+0xa5e>
 8008c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dd02      	ble.n	8008c46 <_dtoa_r+0xa16>
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	f883 8000 	strb.w	r8, [r3]
 8008c4c:	e63b      	b.n	80088c6 <_dtoa_r+0x696>
 8008c4e:	4628      	mov	r0, r5
 8008c50:	e7bb      	b.n	8008bca <_dtoa_r+0x99a>
 8008c52:	2201      	movs	r2, #1
 8008c54:	e7e1      	b.n	8008c1a <_dtoa_r+0x9ea>
 8008c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	db04      	blt.n	8008c66 <_dtoa_r+0xa36>
 8008c5c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c62:	430b      	orrs	r3, r1
 8008c64:	d120      	bne.n	8008ca8 <_dtoa_r+0xa78>
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	dded      	ble.n	8008c46 <_dtoa_r+0xa16>
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	4658      	mov	r0, fp
 8008c70:	f000 fbb0 	bl	80093d4 <__lshift>
 8008c74:	4621      	mov	r1, r4
 8008c76:	4681      	mov	r9, r0
 8008c78:	f000 fc18 	bl	80094ac <__mcmp>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dc03      	bgt.n	8008c88 <_dtoa_r+0xa58>
 8008c80:	d1e1      	bne.n	8008c46 <_dtoa_r+0xa16>
 8008c82:	f018 0f01 	tst.w	r8, #1
 8008c86:	d0de      	beq.n	8008c46 <_dtoa_r+0xa16>
 8008c88:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c8c:	d1d8      	bne.n	8008c40 <_dtoa_r+0xa10>
 8008c8e:	2339      	movs	r3, #57	@ 0x39
 8008c90:	9a02      	ldr	r2, [sp, #8]
 8008c92:	7013      	strb	r3, [r2, #0]
 8008c94:	4633      	mov	r3, r6
 8008c96:	461e      	mov	r6, r3
 8008c98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	2a39      	cmp	r2, #57	@ 0x39
 8008ca0:	d052      	beq.n	8008d48 <_dtoa_r+0xb18>
 8008ca2:	3201      	adds	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e60e      	b.n	80088c6 <_dtoa_r+0x696>
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	dd07      	ble.n	8008cbc <_dtoa_r+0xa8c>
 8008cac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cb0:	d0ed      	beq.n	8008c8e <_dtoa_r+0xa5e>
 8008cb2:	9a02      	ldr	r2, [sp, #8]
 8008cb4:	f108 0301 	add.w	r3, r8, #1
 8008cb8:	7013      	strb	r3, [r2, #0]
 8008cba:	e604      	b.n	80088c6 <_dtoa_r+0x696>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	9a07      	ldr	r2, [sp, #28]
 8008cc0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d028      	beq.n	8008d1c <_dtoa_r+0xaec>
 8008cca:	4649      	mov	r1, r9
 8008ccc:	2300      	movs	r3, #0
 8008cce:	220a      	movs	r2, #10
 8008cd0:	4658      	mov	r0, fp
 8008cd2:	f000 f9d5 	bl	8009080 <__multadd>
 8008cd6:	42af      	cmp	r7, r5
 8008cd8:	4681      	mov	r9, r0
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	f04f 020a 	mov.w	r2, #10
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	d107      	bne.n	8008cf8 <_dtoa_r+0xac8>
 8008ce8:	f000 f9ca 	bl	8009080 <__multadd>
 8008cec:	4607      	mov	r7, r0
 8008cee:	4605      	mov	r5, r0
 8008cf0:	9b07      	ldr	r3, [sp, #28]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	9307      	str	r3, [sp, #28]
 8008cf6:	e774      	b.n	8008be2 <_dtoa_r+0x9b2>
 8008cf8:	f000 f9c2 	bl	8009080 <__multadd>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4607      	mov	r7, r0
 8008d00:	2300      	movs	r3, #0
 8008d02:	220a      	movs	r2, #10
 8008d04:	4658      	mov	r0, fp
 8008d06:	f000 f9bb 	bl	8009080 <__multadd>
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	e7f0      	b.n	8008cf0 <_dtoa_r+0xac0>
 8008d0e:	9b08      	ldr	r3, [sp, #32]
 8008d10:	2700      	movs	r7, #0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bfcc      	ite	gt
 8008d16:	461e      	movgt	r6, r3
 8008d18:	2601      	movle	r6, #1
 8008d1a:	4456      	add	r6, sl
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4658      	mov	r0, fp
 8008d22:	f000 fb57 	bl	80093d4 <__lshift>
 8008d26:	4621      	mov	r1, r4
 8008d28:	4681      	mov	r9, r0
 8008d2a:	f000 fbbf 	bl	80094ac <__mcmp>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	dcb0      	bgt.n	8008c94 <_dtoa_r+0xa64>
 8008d32:	d102      	bne.n	8008d3a <_dtoa_r+0xb0a>
 8008d34:	f018 0f01 	tst.w	r8, #1
 8008d38:	d1ac      	bne.n	8008c94 <_dtoa_r+0xa64>
 8008d3a:	4633      	mov	r3, r6
 8008d3c:	461e      	mov	r6, r3
 8008d3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d42:	2a30      	cmp	r2, #48	@ 0x30
 8008d44:	d0fa      	beq.n	8008d3c <_dtoa_r+0xb0c>
 8008d46:	e5be      	b.n	80088c6 <_dtoa_r+0x696>
 8008d48:	459a      	cmp	sl, r3
 8008d4a:	d1a4      	bne.n	8008c96 <_dtoa_r+0xa66>
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	2331      	movs	r3, #49	@ 0x31
 8008d54:	f88a 3000 	strb.w	r3, [sl]
 8008d58:	e5b5      	b.n	80088c6 <_dtoa_r+0x696>
 8008d5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d5c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008dbc <_dtoa_r+0xb8c>
 8008d60:	b11b      	cbz	r3, 8008d6a <_dtoa_r+0xb3a>
 8008d62:	f10a 0308 	add.w	r3, sl, #8
 8008d66:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	b017      	add	sp, #92	@ 0x5c
 8008d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	f77f ae3d 	ble.w	80089f4 <_dtoa_r+0x7c4>
 8008d7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d7e:	2001      	movs	r0, #1
 8008d80:	e65b      	b.n	8008a3a <_dtoa_r+0x80a>
 8008d82:	9b08      	ldr	r3, [sp, #32]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f77f aed6 	ble.w	8008b36 <_dtoa_r+0x906>
 8008d8a:	4656      	mov	r6, sl
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	4648      	mov	r0, r9
 8008d90:	f7ff f9c3 	bl	800811a <quorem>
 8008d94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d98:	9b08      	ldr	r3, [sp, #32]
 8008d9a:	f806 8b01 	strb.w	r8, [r6], #1
 8008d9e:	eba6 020a 	sub.w	r2, r6, sl
 8008da2:	4293      	cmp	r3, r2
 8008da4:	ddb3      	ble.n	8008d0e <_dtoa_r+0xade>
 8008da6:	4649      	mov	r1, r9
 8008da8:	2300      	movs	r3, #0
 8008daa:	220a      	movs	r2, #10
 8008dac:	4658      	mov	r0, fp
 8008dae:	f000 f967 	bl	8009080 <__multadd>
 8008db2:	4681      	mov	r9, r0
 8008db4:	e7ea      	b.n	8008d8c <_dtoa_r+0xb5c>
 8008db6:	bf00      	nop
 8008db8:	0800a350 	.word	0x0800a350
 8008dbc:	0800a2d4 	.word	0x0800a2d4

08008dc0 <_free_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d040      	beq.n	8008e4a <_free_r+0x8a>
 8008dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dcc:	1f0c      	subs	r4, r1, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfb8      	it	lt
 8008dd2:	18e4      	addlt	r4, r4, r3
 8008dd4:	f000 f8e6 	bl	8008fa4 <__malloc_lock>
 8008dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e4c <_free_r+0x8c>)
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	b933      	cbnz	r3, 8008dec <_free_r+0x2c>
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	6014      	str	r4, [r2, #0]
 8008de2:	4628      	mov	r0, r5
 8008de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de8:	f000 b8e2 	b.w	8008fb0 <__malloc_unlock>
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d908      	bls.n	8008e02 <_free_r+0x42>
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	1821      	adds	r1, r4, r0
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf01      	itttt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	1809      	addeq	r1, r1, r0
 8008dfe:	6021      	streq	r1, [r4, #0]
 8008e00:	e7ed      	b.n	8008dde <_free_r+0x1e>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x4c>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x42>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1850      	adds	r0, r2, r1
 8008e10:	42a0      	cmp	r0, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x6c>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	4401      	add	r1, r0
 8008e18:	1850      	adds	r0, r2, r1
 8008e1a:	4283      	cmp	r3, r0
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1e0      	bne.n	8008de2 <_free_r+0x22>
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4408      	add	r0, r1
 8008e26:	6010      	str	r0, [r2, #0]
 8008e28:	6053      	str	r3, [r2, #4]
 8008e2a:	e7da      	b.n	8008de2 <_free_r+0x22>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x74>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	e7d6      	b.n	8008de2 <_free_r+0x22>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	1821      	adds	r1, r4, r0
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf01      	itttt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	1809      	addeq	r1, r1, r0
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	6063      	str	r3, [r4, #4]
 8008e46:	6054      	str	r4, [r2, #4]
 8008e48:	e7cb      	b.n	8008de2 <_free_r+0x22>
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	200008a0 	.word	0x200008a0

08008e50 <malloc>:
 8008e50:	4b02      	ldr	r3, [pc, #8]	@ (8008e5c <malloc+0xc>)
 8008e52:	4601      	mov	r1, r0
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f000 b825 	b.w	8008ea4 <_malloc_r>
 8008e5a:	bf00      	nop
 8008e5c:	200000d4 	.word	0x200000d4

08008e60 <sbrk_aligned>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4e0f      	ldr	r6, [pc, #60]	@ (8008ea0 <sbrk_aligned+0x40>)
 8008e64:	460c      	mov	r4, r1
 8008e66:	6831      	ldr	r1, [r6, #0]
 8008e68:	4605      	mov	r5, r0
 8008e6a:	b911      	cbnz	r1, 8008e72 <sbrk_aligned+0x12>
 8008e6c:	f000 fe40 	bl	8009af0 <_sbrk_r>
 8008e70:	6030      	str	r0, [r6, #0]
 8008e72:	4621      	mov	r1, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	f000 fe3b 	bl	8009af0 <_sbrk_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d103      	bne.n	8008e86 <sbrk_aligned+0x26>
 8008e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8008e82:	4620      	mov	r0, r4
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
 8008e86:	1cc4      	adds	r4, r0, #3
 8008e88:	f024 0403 	bic.w	r4, r4, #3
 8008e8c:	42a0      	cmp	r0, r4
 8008e8e:	d0f8      	beq.n	8008e82 <sbrk_aligned+0x22>
 8008e90:	1a21      	subs	r1, r4, r0
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 fe2c 	bl	8009af0 <_sbrk_r>
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d1f2      	bne.n	8008e82 <sbrk_aligned+0x22>
 8008e9c:	e7ef      	b.n	8008e7e <sbrk_aligned+0x1e>
 8008e9e:	bf00      	nop
 8008ea0:	2000089c 	.word	0x2000089c

08008ea4 <_malloc_r>:
 8008ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	1ccd      	adds	r5, r1, #3
 8008eaa:	f025 0503 	bic.w	r5, r5, #3
 8008eae:	3508      	adds	r5, #8
 8008eb0:	2d0c      	cmp	r5, #12
 8008eb2:	bf38      	it	cc
 8008eb4:	250c      	movcc	r5, #12
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	4606      	mov	r6, r0
 8008eba:	db01      	blt.n	8008ec0 <_malloc_r+0x1c>
 8008ebc:	42a9      	cmp	r1, r5
 8008ebe:	d904      	bls.n	8008eca <_malloc_r+0x26>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fa0 <_malloc_r+0xfc>
 8008ece:	f000 f869 	bl	8008fa4 <__malloc_lock>
 8008ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	bb44      	cbnz	r4, 8008f2c <_malloc_r+0x88>
 8008eda:	4629      	mov	r1, r5
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff ffbf 	bl	8008e60 <sbrk_aligned>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	d158      	bne.n	8008f9a <_malloc_r+0xf6>
 8008ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8008eec:	4627      	mov	r7, r4
 8008eee:	2f00      	cmp	r7, #0
 8008ef0:	d143      	bne.n	8008f7a <_malloc_r+0xd6>
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d04b      	beq.n	8008f8e <_malloc_r+0xea>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	4639      	mov	r1, r7
 8008efa:	4630      	mov	r0, r6
 8008efc:	eb04 0903 	add.w	r9, r4, r3
 8008f00:	f000 fdf6 	bl	8009af0 <_sbrk_r>
 8008f04:	4581      	cmp	r9, r0
 8008f06:	d142      	bne.n	8008f8e <_malloc_r+0xea>
 8008f08:	6821      	ldr	r1, [r4, #0]
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	1a6d      	subs	r5, r5, r1
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7ff ffa6 	bl	8008e60 <sbrk_aligned>
 8008f14:	3001      	adds	r0, #1
 8008f16:	d03a      	beq.n	8008f8e <_malloc_r+0xea>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	442b      	add	r3, r5
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	bb62      	cbnz	r2, 8008f80 <_malloc_r+0xdc>
 8008f26:	f8c8 7000 	str.w	r7, [r8]
 8008f2a:	e00f      	b.n	8008f4c <_malloc_r+0xa8>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	1b52      	subs	r2, r2, r5
 8008f30:	d420      	bmi.n	8008f74 <_malloc_r+0xd0>
 8008f32:	2a0b      	cmp	r2, #11
 8008f34:	d917      	bls.n	8008f66 <_malloc_r+0xc2>
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	6025      	str	r5, [r4, #0]
 8008f3c:	bf18      	it	ne
 8008f3e:	6059      	strne	r1, [r3, #4]
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	bf08      	it	eq
 8008f44:	f8c8 1000 	streq.w	r1, [r8]
 8008f48:	5162      	str	r2, [r4, r5]
 8008f4a:	604b      	str	r3, [r1, #4]
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 f82f 	bl	8008fb0 <__malloc_unlock>
 8008f52:	f104 000b 	add.w	r0, r4, #11
 8008f56:	1d23      	adds	r3, r4, #4
 8008f58:	f020 0007 	bic.w	r0, r0, #7
 8008f5c:	1ac2      	subs	r2, r0, r3
 8008f5e:	bf1c      	itt	ne
 8008f60:	1a1b      	subne	r3, r3, r0
 8008f62:	50a3      	strne	r3, [r4, r2]
 8008f64:	e7af      	b.n	8008ec6 <_malloc_r+0x22>
 8008f66:	6862      	ldr	r2, [r4, #4]
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	bf0c      	ite	eq
 8008f6c:	f8c8 2000 	streq.w	r2, [r8]
 8008f70:	605a      	strne	r2, [r3, #4]
 8008f72:	e7eb      	b.n	8008f4c <_malloc_r+0xa8>
 8008f74:	4623      	mov	r3, r4
 8008f76:	6864      	ldr	r4, [r4, #4]
 8008f78:	e7ae      	b.n	8008ed8 <_malloc_r+0x34>
 8008f7a:	463c      	mov	r4, r7
 8008f7c:	687f      	ldr	r7, [r7, #4]
 8008f7e:	e7b6      	b.n	8008eee <_malloc_r+0x4a>
 8008f80:	461a      	mov	r2, r3
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d1fb      	bne.n	8008f80 <_malloc_r+0xdc>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6053      	str	r3, [r2, #4]
 8008f8c:	e7de      	b.n	8008f4c <_malloc_r+0xa8>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	4630      	mov	r0, r6
 8008f92:	6033      	str	r3, [r6, #0]
 8008f94:	f000 f80c 	bl	8008fb0 <__malloc_unlock>
 8008f98:	e794      	b.n	8008ec4 <_malloc_r+0x20>
 8008f9a:	6005      	str	r5, [r0, #0]
 8008f9c:	e7d6      	b.n	8008f4c <_malloc_r+0xa8>
 8008f9e:	bf00      	nop
 8008fa0:	200008a0 	.word	0x200008a0

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	@ (8008fac <__malloc_lock+0x8>)
 8008fa6:	f7ff b8a8 	b.w	80080fa <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	20000898 	.word	0x20000898

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	@ (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f7ff b8a3 	b.w	80080fc <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20000898 	.word	0x20000898

08008fbc <_Balloc>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	69c6      	ldr	r6, [r0, #28]
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	b976      	cbnz	r6, 8008fe4 <_Balloc+0x28>
 8008fc6:	2010      	movs	r0, #16
 8008fc8:	f7ff ff42 	bl	8008e50 <malloc>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	61e0      	str	r0, [r4, #28]
 8008fd0:	b920      	cbnz	r0, 8008fdc <_Balloc+0x20>
 8008fd2:	216b      	movs	r1, #107	@ 0x6b
 8008fd4:	4b17      	ldr	r3, [pc, #92]	@ (8009034 <_Balloc+0x78>)
 8008fd6:	4818      	ldr	r0, [pc, #96]	@ (8009038 <_Balloc+0x7c>)
 8008fd8:	f000 fda8 	bl	8009b2c <__assert_func>
 8008fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe0:	6006      	str	r6, [r0, #0]
 8008fe2:	60c6      	str	r6, [r0, #12]
 8008fe4:	69e6      	ldr	r6, [r4, #28]
 8008fe6:	68f3      	ldr	r3, [r6, #12]
 8008fe8:	b183      	cbz	r3, 800900c <_Balloc+0x50>
 8008fea:	69e3      	ldr	r3, [r4, #28]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ff2:	b9b8      	cbnz	r0, 8009024 <_Balloc+0x68>
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	fa01 f605 	lsl.w	r6, r1, r5
 8008ffa:	1d72      	adds	r2, r6, #5
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	0092      	lsls	r2, r2, #2
 8009000:	f000 fdb2 	bl	8009b68 <_calloc_r>
 8009004:	b160      	cbz	r0, 8009020 <_Balloc+0x64>
 8009006:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800900a:	e00e      	b.n	800902a <_Balloc+0x6e>
 800900c:	2221      	movs	r2, #33	@ 0x21
 800900e:	2104      	movs	r1, #4
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fda9 	bl	8009b68 <_calloc_r>
 8009016:	69e3      	ldr	r3, [r4, #28]
 8009018:	60f0      	str	r0, [r6, #12]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e4      	bne.n	8008fea <_Balloc+0x2e>
 8009020:	2000      	movs	r0, #0
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	6802      	ldr	r2, [r0, #0]
 8009026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800902a:	2300      	movs	r3, #0
 800902c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009030:	e7f7      	b.n	8009022 <_Balloc+0x66>
 8009032:	bf00      	nop
 8009034:	0800a2e1 	.word	0x0800a2e1
 8009038:	0800a361 	.word	0x0800a361

0800903c <_Bfree>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	69c6      	ldr	r6, [r0, #28]
 8009040:	4605      	mov	r5, r0
 8009042:	460c      	mov	r4, r1
 8009044:	b976      	cbnz	r6, 8009064 <_Bfree+0x28>
 8009046:	2010      	movs	r0, #16
 8009048:	f7ff ff02 	bl	8008e50 <malloc>
 800904c:	4602      	mov	r2, r0
 800904e:	61e8      	str	r0, [r5, #28]
 8009050:	b920      	cbnz	r0, 800905c <_Bfree+0x20>
 8009052:	218f      	movs	r1, #143	@ 0x8f
 8009054:	4b08      	ldr	r3, [pc, #32]	@ (8009078 <_Bfree+0x3c>)
 8009056:	4809      	ldr	r0, [pc, #36]	@ (800907c <_Bfree+0x40>)
 8009058:	f000 fd68 	bl	8009b2c <__assert_func>
 800905c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009060:	6006      	str	r6, [r0, #0]
 8009062:	60c6      	str	r6, [r0, #12]
 8009064:	b13c      	cbz	r4, 8009076 <_Bfree+0x3a>
 8009066:	69eb      	ldr	r3, [r5, #28]
 8009068:	6862      	ldr	r2, [r4, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009070:	6021      	str	r1, [r4, #0]
 8009072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	0800a2e1 	.word	0x0800a2e1
 800907c:	0800a361 	.word	0x0800a361

08009080 <__multadd>:
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	4607      	mov	r7, r0
 8009086:	460c      	mov	r4, r1
 8009088:	461e      	mov	r6, r3
 800908a:	2000      	movs	r0, #0
 800908c:	690d      	ldr	r5, [r1, #16]
 800908e:	f101 0c14 	add.w	ip, r1, #20
 8009092:	f8dc 3000 	ldr.w	r3, [ip]
 8009096:	3001      	adds	r0, #1
 8009098:	b299      	uxth	r1, r3
 800909a:	fb02 6101 	mla	r1, r2, r1, r6
 800909e:	0c1e      	lsrs	r6, r3, #16
 80090a0:	0c0b      	lsrs	r3, r1, #16
 80090a2:	fb02 3306 	mla	r3, r2, r6, r3
 80090a6:	b289      	uxth	r1, r1
 80090a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090ac:	4285      	cmp	r5, r0
 80090ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090b2:	f84c 1b04 	str.w	r1, [ip], #4
 80090b6:	dcec      	bgt.n	8009092 <__multadd+0x12>
 80090b8:	b30e      	cbz	r6, 80090fe <__multadd+0x7e>
 80090ba:	68a3      	ldr	r3, [r4, #8]
 80090bc:	42ab      	cmp	r3, r5
 80090be:	dc19      	bgt.n	80090f4 <__multadd+0x74>
 80090c0:	6861      	ldr	r1, [r4, #4]
 80090c2:	4638      	mov	r0, r7
 80090c4:	3101      	adds	r1, #1
 80090c6:	f7ff ff79 	bl	8008fbc <_Balloc>
 80090ca:	4680      	mov	r8, r0
 80090cc:	b928      	cbnz	r0, 80090da <__multadd+0x5a>
 80090ce:	4602      	mov	r2, r0
 80090d0:	21ba      	movs	r1, #186	@ 0xba
 80090d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <__multadd+0x84>)
 80090d4:	480c      	ldr	r0, [pc, #48]	@ (8009108 <__multadd+0x88>)
 80090d6:	f000 fd29 	bl	8009b2c <__assert_func>
 80090da:	6922      	ldr	r2, [r4, #16]
 80090dc:	f104 010c 	add.w	r1, r4, #12
 80090e0:	3202      	adds	r2, #2
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	300c      	adds	r0, #12
 80090e6:	f000 fd13 	bl	8009b10 <memcpy>
 80090ea:	4621      	mov	r1, r4
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff ffa5 	bl	800903c <_Bfree>
 80090f2:	4644      	mov	r4, r8
 80090f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090f8:	3501      	adds	r5, #1
 80090fa:	615e      	str	r6, [r3, #20]
 80090fc:	6125      	str	r5, [r4, #16]
 80090fe:	4620      	mov	r0, r4
 8009100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009104:	0800a350 	.word	0x0800a350
 8009108:	0800a361 	.word	0x0800a361

0800910c <__hi0bits>:
 800910c:	4603      	mov	r3, r0
 800910e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009112:	bf3a      	itte	cc
 8009114:	0403      	lslcc	r3, r0, #16
 8009116:	2010      	movcc	r0, #16
 8009118:	2000      	movcs	r0, #0
 800911a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800911e:	bf3c      	itt	cc
 8009120:	021b      	lslcc	r3, r3, #8
 8009122:	3008      	addcc	r0, #8
 8009124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009128:	bf3c      	itt	cc
 800912a:	011b      	lslcc	r3, r3, #4
 800912c:	3004      	addcc	r0, #4
 800912e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009132:	bf3c      	itt	cc
 8009134:	009b      	lslcc	r3, r3, #2
 8009136:	3002      	addcc	r0, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	db05      	blt.n	8009148 <__hi0bits+0x3c>
 800913c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009140:	f100 0001 	add.w	r0, r0, #1
 8009144:	bf08      	it	eq
 8009146:	2020      	moveq	r0, #32
 8009148:	4770      	bx	lr

0800914a <__lo0bits>:
 800914a:	6803      	ldr	r3, [r0, #0]
 800914c:	4602      	mov	r2, r0
 800914e:	f013 0007 	ands.w	r0, r3, #7
 8009152:	d00b      	beq.n	800916c <__lo0bits+0x22>
 8009154:	07d9      	lsls	r1, r3, #31
 8009156:	d421      	bmi.n	800919c <__lo0bits+0x52>
 8009158:	0798      	lsls	r0, r3, #30
 800915a:	bf49      	itett	mi
 800915c:	085b      	lsrmi	r3, r3, #1
 800915e:	089b      	lsrpl	r3, r3, #2
 8009160:	2001      	movmi	r0, #1
 8009162:	6013      	strmi	r3, [r2, #0]
 8009164:	bf5c      	itt	pl
 8009166:	2002      	movpl	r0, #2
 8009168:	6013      	strpl	r3, [r2, #0]
 800916a:	4770      	bx	lr
 800916c:	b299      	uxth	r1, r3
 800916e:	b909      	cbnz	r1, 8009174 <__lo0bits+0x2a>
 8009170:	2010      	movs	r0, #16
 8009172:	0c1b      	lsrs	r3, r3, #16
 8009174:	b2d9      	uxtb	r1, r3
 8009176:	b909      	cbnz	r1, 800917c <__lo0bits+0x32>
 8009178:	3008      	adds	r0, #8
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	0719      	lsls	r1, r3, #28
 800917e:	bf04      	itt	eq
 8009180:	091b      	lsreq	r3, r3, #4
 8009182:	3004      	addeq	r0, #4
 8009184:	0799      	lsls	r1, r3, #30
 8009186:	bf04      	itt	eq
 8009188:	089b      	lsreq	r3, r3, #2
 800918a:	3002      	addeq	r0, #2
 800918c:	07d9      	lsls	r1, r3, #31
 800918e:	d403      	bmi.n	8009198 <__lo0bits+0x4e>
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	f100 0001 	add.w	r0, r0, #1
 8009196:	d003      	beq.n	80091a0 <__lo0bits+0x56>
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	4770      	bx	lr
 800919c:	2000      	movs	r0, #0
 800919e:	4770      	bx	lr
 80091a0:	2020      	movs	r0, #32
 80091a2:	4770      	bx	lr

080091a4 <__i2b>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	2101      	movs	r1, #1
 80091aa:	f7ff ff07 	bl	8008fbc <_Balloc>
 80091ae:	4602      	mov	r2, r0
 80091b0:	b928      	cbnz	r0, 80091be <__i2b+0x1a>
 80091b2:	f240 1145 	movw	r1, #325	@ 0x145
 80091b6:	4b04      	ldr	r3, [pc, #16]	@ (80091c8 <__i2b+0x24>)
 80091b8:	4804      	ldr	r0, [pc, #16]	@ (80091cc <__i2b+0x28>)
 80091ba:	f000 fcb7 	bl	8009b2c <__assert_func>
 80091be:	2301      	movs	r3, #1
 80091c0:	6144      	str	r4, [r0, #20]
 80091c2:	6103      	str	r3, [r0, #16]
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	bf00      	nop
 80091c8:	0800a350 	.word	0x0800a350
 80091cc:	0800a361 	.word	0x0800a361

080091d0 <__multiply>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4614      	mov	r4, r2
 80091d6:	690a      	ldr	r2, [r1, #16]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	460f      	mov	r7, r1
 80091dc:	429a      	cmp	r2, r3
 80091de:	bfa2      	ittt	ge
 80091e0:	4623      	movge	r3, r4
 80091e2:	460c      	movge	r4, r1
 80091e4:	461f      	movge	r7, r3
 80091e6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091ea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	6861      	ldr	r1, [r4, #4]
 80091f2:	eb0a 0609 	add.w	r6, sl, r9
 80091f6:	42b3      	cmp	r3, r6
 80091f8:	b085      	sub	sp, #20
 80091fa:	bfb8      	it	lt
 80091fc:	3101      	addlt	r1, #1
 80091fe:	f7ff fedd 	bl	8008fbc <_Balloc>
 8009202:	b930      	cbnz	r0, 8009212 <__multiply+0x42>
 8009204:	4602      	mov	r2, r0
 8009206:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800920a:	4b43      	ldr	r3, [pc, #268]	@ (8009318 <__multiply+0x148>)
 800920c:	4843      	ldr	r0, [pc, #268]	@ (800931c <__multiply+0x14c>)
 800920e:	f000 fc8d 	bl	8009b2c <__assert_func>
 8009212:	f100 0514 	add.w	r5, r0, #20
 8009216:	462b      	mov	r3, r5
 8009218:	2200      	movs	r2, #0
 800921a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800921e:	4543      	cmp	r3, r8
 8009220:	d321      	bcc.n	8009266 <__multiply+0x96>
 8009222:	f107 0114 	add.w	r1, r7, #20
 8009226:	f104 0214 	add.w	r2, r4, #20
 800922a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800922e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009232:	9302      	str	r3, [sp, #8]
 8009234:	1b13      	subs	r3, r2, r4
 8009236:	3b15      	subs	r3, #21
 8009238:	f023 0303 	bic.w	r3, r3, #3
 800923c:	3304      	adds	r3, #4
 800923e:	f104 0715 	add.w	r7, r4, #21
 8009242:	42ba      	cmp	r2, r7
 8009244:	bf38      	it	cc
 8009246:	2304      	movcc	r3, #4
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	9b02      	ldr	r3, [sp, #8]
 800924c:	9103      	str	r1, [sp, #12]
 800924e:	428b      	cmp	r3, r1
 8009250:	d80c      	bhi.n	800926c <__multiply+0x9c>
 8009252:	2e00      	cmp	r6, #0
 8009254:	dd03      	ble.n	800925e <__multiply+0x8e>
 8009256:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800925a:	2b00      	cmp	r3, #0
 800925c:	d05a      	beq.n	8009314 <__multiply+0x144>
 800925e:	6106      	str	r6, [r0, #16]
 8009260:	b005      	add	sp, #20
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	f843 2b04 	str.w	r2, [r3], #4
 800926a:	e7d8      	b.n	800921e <__multiply+0x4e>
 800926c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009270:	f1ba 0f00 	cmp.w	sl, #0
 8009274:	d023      	beq.n	80092be <__multiply+0xee>
 8009276:	46a9      	mov	r9, r5
 8009278:	f04f 0c00 	mov.w	ip, #0
 800927c:	f104 0e14 	add.w	lr, r4, #20
 8009280:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009284:	f8d9 3000 	ldr.w	r3, [r9]
 8009288:	fa1f fb87 	uxth.w	fp, r7
 800928c:	b29b      	uxth	r3, r3
 800928e:	fb0a 330b 	mla	r3, sl, fp, r3
 8009292:	4463      	add	r3, ip
 8009294:	f8d9 c000 	ldr.w	ip, [r9]
 8009298:	0c3f      	lsrs	r7, r7, #16
 800929a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800929e:	fb0a c707 	mla	r7, sl, r7, ip
 80092a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092ac:	4572      	cmp	r2, lr
 80092ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092b2:	f849 3b04 	str.w	r3, [r9], #4
 80092b6:	d8e3      	bhi.n	8009280 <__multiply+0xb0>
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	f845 c003 	str.w	ip, [r5, r3]
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	3104      	adds	r1, #4
 80092c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092c6:	f1b9 0f00 	cmp.w	r9, #0
 80092ca:	d021      	beq.n	8009310 <__multiply+0x140>
 80092cc:	46ae      	mov	lr, r5
 80092ce:	f04f 0a00 	mov.w	sl, #0
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	f104 0c14 	add.w	ip, r4, #20
 80092d8:	f8bc b000 	ldrh.w	fp, [ip]
 80092dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	fb09 770b 	mla	r7, r9, fp, r7
 80092e6:	4457      	add	r7, sl
 80092e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092ec:	f84e 3b04 	str.w	r3, [lr], #4
 80092f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092f8:	f8be 3000 	ldrh.w	r3, [lr]
 80092fc:	4562      	cmp	r2, ip
 80092fe:	fb09 330a 	mla	r3, r9, sl, r3
 8009302:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009306:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800930a:	d8e5      	bhi.n	80092d8 <__multiply+0x108>
 800930c:	9f01      	ldr	r7, [sp, #4]
 800930e:	51eb      	str	r3, [r5, r7]
 8009310:	3504      	adds	r5, #4
 8009312:	e79a      	b.n	800924a <__multiply+0x7a>
 8009314:	3e01      	subs	r6, #1
 8009316:	e79c      	b.n	8009252 <__multiply+0x82>
 8009318:	0800a350 	.word	0x0800a350
 800931c:	0800a361 	.word	0x0800a361

08009320 <__pow5mult>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	4615      	mov	r5, r2
 8009326:	f012 0203 	ands.w	r2, r2, #3
 800932a:	4607      	mov	r7, r0
 800932c:	460e      	mov	r6, r1
 800932e:	d007      	beq.n	8009340 <__pow5mult+0x20>
 8009330:	4c25      	ldr	r4, [pc, #148]	@ (80093c8 <__pow5mult+0xa8>)
 8009332:	3a01      	subs	r2, #1
 8009334:	2300      	movs	r3, #0
 8009336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800933a:	f7ff fea1 	bl	8009080 <__multadd>
 800933e:	4606      	mov	r6, r0
 8009340:	10ad      	asrs	r5, r5, #2
 8009342:	d03d      	beq.n	80093c0 <__pow5mult+0xa0>
 8009344:	69fc      	ldr	r4, [r7, #28]
 8009346:	b97c      	cbnz	r4, 8009368 <__pow5mult+0x48>
 8009348:	2010      	movs	r0, #16
 800934a:	f7ff fd81 	bl	8008e50 <malloc>
 800934e:	4602      	mov	r2, r0
 8009350:	61f8      	str	r0, [r7, #28]
 8009352:	b928      	cbnz	r0, 8009360 <__pow5mult+0x40>
 8009354:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009358:	4b1c      	ldr	r3, [pc, #112]	@ (80093cc <__pow5mult+0xac>)
 800935a:	481d      	ldr	r0, [pc, #116]	@ (80093d0 <__pow5mult+0xb0>)
 800935c:	f000 fbe6 	bl	8009b2c <__assert_func>
 8009360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009364:	6004      	str	r4, [r0, #0]
 8009366:	60c4      	str	r4, [r0, #12]
 8009368:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800936c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009370:	b94c      	cbnz	r4, 8009386 <__pow5mult+0x66>
 8009372:	f240 2171 	movw	r1, #625	@ 0x271
 8009376:	4638      	mov	r0, r7
 8009378:	f7ff ff14 	bl	80091a4 <__i2b>
 800937c:	2300      	movs	r3, #0
 800937e:	4604      	mov	r4, r0
 8009380:	f8c8 0008 	str.w	r0, [r8, #8]
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	f04f 0900 	mov.w	r9, #0
 800938a:	07eb      	lsls	r3, r5, #31
 800938c:	d50a      	bpl.n	80093a4 <__pow5mult+0x84>
 800938e:	4631      	mov	r1, r6
 8009390:	4622      	mov	r2, r4
 8009392:	4638      	mov	r0, r7
 8009394:	f7ff ff1c 	bl	80091d0 <__multiply>
 8009398:	4680      	mov	r8, r0
 800939a:	4631      	mov	r1, r6
 800939c:	4638      	mov	r0, r7
 800939e:	f7ff fe4d 	bl	800903c <_Bfree>
 80093a2:	4646      	mov	r6, r8
 80093a4:	106d      	asrs	r5, r5, #1
 80093a6:	d00b      	beq.n	80093c0 <__pow5mult+0xa0>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	b938      	cbnz	r0, 80093bc <__pow5mult+0x9c>
 80093ac:	4622      	mov	r2, r4
 80093ae:	4621      	mov	r1, r4
 80093b0:	4638      	mov	r0, r7
 80093b2:	f7ff ff0d 	bl	80091d0 <__multiply>
 80093b6:	6020      	str	r0, [r4, #0]
 80093b8:	f8c0 9000 	str.w	r9, [r0]
 80093bc:	4604      	mov	r4, r0
 80093be:	e7e4      	b.n	800938a <__pow5mult+0x6a>
 80093c0:	4630      	mov	r0, r6
 80093c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c6:	bf00      	nop
 80093c8:	0800a3bc 	.word	0x0800a3bc
 80093cc:	0800a2e1 	.word	0x0800a2e1
 80093d0:	0800a361 	.word	0x0800a361

080093d4 <__lshift>:
 80093d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	460c      	mov	r4, r1
 80093da:	4607      	mov	r7, r0
 80093dc:	4691      	mov	r9, r2
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6849      	ldr	r1, [r1, #4]
 80093e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093ec:	f108 0601 	add.w	r6, r8, #1
 80093f0:	42b3      	cmp	r3, r6
 80093f2:	db0b      	blt.n	800940c <__lshift+0x38>
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff fde1 	bl	8008fbc <_Balloc>
 80093fa:	4605      	mov	r5, r0
 80093fc:	b948      	cbnz	r0, 8009412 <__lshift+0x3e>
 80093fe:	4602      	mov	r2, r0
 8009400:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009404:	4b27      	ldr	r3, [pc, #156]	@ (80094a4 <__lshift+0xd0>)
 8009406:	4828      	ldr	r0, [pc, #160]	@ (80094a8 <__lshift+0xd4>)
 8009408:	f000 fb90 	bl	8009b2c <__assert_func>
 800940c:	3101      	adds	r1, #1
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	e7ee      	b.n	80093f0 <__lshift+0x1c>
 8009412:	2300      	movs	r3, #0
 8009414:	f100 0114 	add.w	r1, r0, #20
 8009418:	f100 0210 	add.w	r2, r0, #16
 800941c:	4618      	mov	r0, r3
 800941e:	4553      	cmp	r3, sl
 8009420:	db33      	blt.n	800948a <__lshift+0xb6>
 8009422:	6920      	ldr	r0, [r4, #16]
 8009424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009428:	f104 0314 	add.w	r3, r4, #20
 800942c:	f019 091f 	ands.w	r9, r9, #31
 8009430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009434:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009438:	d02b      	beq.n	8009492 <__lshift+0xbe>
 800943a:	468a      	mov	sl, r1
 800943c:	2200      	movs	r2, #0
 800943e:	f1c9 0e20 	rsb	lr, r9, #32
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	fa00 f009 	lsl.w	r0, r0, r9
 8009448:	4310      	orrs	r0, r2
 800944a:	f84a 0b04 	str.w	r0, [sl], #4
 800944e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009452:	459c      	cmp	ip, r3
 8009454:	fa22 f20e 	lsr.w	r2, r2, lr
 8009458:	d8f3      	bhi.n	8009442 <__lshift+0x6e>
 800945a:	ebac 0304 	sub.w	r3, ip, r4
 800945e:	3b15      	subs	r3, #21
 8009460:	f023 0303 	bic.w	r3, r3, #3
 8009464:	3304      	adds	r3, #4
 8009466:	f104 0015 	add.w	r0, r4, #21
 800946a:	4584      	cmp	ip, r0
 800946c:	bf38      	it	cc
 800946e:	2304      	movcc	r3, #4
 8009470:	50ca      	str	r2, [r1, r3]
 8009472:	b10a      	cbz	r2, 8009478 <__lshift+0xa4>
 8009474:	f108 0602 	add.w	r6, r8, #2
 8009478:	3e01      	subs	r6, #1
 800947a:	4638      	mov	r0, r7
 800947c:	4621      	mov	r1, r4
 800947e:	612e      	str	r6, [r5, #16]
 8009480:	f7ff fddc 	bl	800903c <_Bfree>
 8009484:	4628      	mov	r0, r5
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	f842 0f04 	str.w	r0, [r2, #4]!
 800948e:	3301      	adds	r3, #1
 8009490:	e7c5      	b.n	800941e <__lshift+0x4a>
 8009492:	3904      	subs	r1, #4
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	459c      	cmp	ip, r3
 800949a:	f841 2f04 	str.w	r2, [r1, #4]!
 800949e:	d8f9      	bhi.n	8009494 <__lshift+0xc0>
 80094a0:	e7ea      	b.n	8009478 <__lshift+0xa4>
 80094a2:	bf00      	nop
 80094a4:	0800a350 	.word	0x0800a350
 80094a8:	0800a361 	.word	0x0800a361

080094ac <__mcmp>:
 80094ac:	4603      	mov	r3, r0
 80094ae:	690a      	ldr	r2, [r1, #16]
 80094b0:	6900      	ldr	r0, [r0, #16]
 80094b2:	b530      	push	{r4, r5, lr}
 80094b4:	1a80      	subs	r0, r0, r2
 80094b6:	d10e      	bne.n	80094d6 <__mcmp+0x2a>
 80094b8:	3314      	adds	r3, #20
 80094ba:	3114      	adds	r1, #20
 80094bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094cc:	4295      	cmp	r5, r2
 80094ce:	d003      	beq.n	80094d8 <__mcmp+0x2c>
 80094d0:	d205      	bcs.n	80094de <__mcmp+0x32>
 80094d2:	f04f 30ff 	mov.w	r0, #4294967295
 80094d6:	bd30      	pop	{r4, r5, pc}
 80094d8:	42a3      	cmp	r3, r4
 80094da:	d3f3      	bcc.n	80094c4 <__mcmp+0x18>
 80094dc:	e7fb      	b.n	80094d6 <__mcmp+0x2a>
 80094de:	2001      	movs	r0, #1
 80094e0:	e7f9      	b.n	80094d6 <__mcmp+0x2a>
	...

080094e4 <__mdiff>:
 80094e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	4689      	mov	r9, r1
 80094ea:	4606      	mov	r6, r0
 80094ec:	4611      	mov	r1, r2
 80094ee:	4648      	mov	r0, r9
 80094f0:	4614      	mov	r4, r2
 80094f2:	f7ff ffdb 	bl	80094ac <__mcmp>
 80094f6:	1e05      	subs	r5, r0, #0
 80094f8:	d112      	bne.n	8009520 <__mdiff+0x3c>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7ff fd5d 	bl	8008fbc <_Balloc>
 8009502:	4602      	mov	r2, r0
 8009504:	b928      	cbnz	r0, 8009512 <__mdiff+0x2e>
 8009506:	f240 2137 	movw	r1, #567	@ 0x237
 800950a:	4b3e      	ldr	r3, [pc, #248]	@ (8009604 <__mdiff+0x120>)
 800950c:	483e      	ldr	r0, [pc, #248]	@ (8009608 <__mdiff+0x124>)
 800950e:	f000 fb0d 	bl	8009b2c <__assert_func>
 8009512:	2301      	movs	r3, #1
 8009514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009518:	4610      	mov	r0, r2
 800951a:	b003      	add	sp, #12
 800951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009520:	bfbc      	itt	lt
 8009522:	464b      	movlt	r3, r9
 8009524:	46a1      	movlt	r9, r4
 8009526:	4630      	mov	r0, r6
 8009528:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800952c:	bfba      	itte	lt
 800952e:	461c      	movlt	r4, r3
 8009530:	2501      	movlt	r5, #1
 8009532:	2500      	movge	r5, #0
 8009534:	f7ff fd42 	bl	8008fbc <_Balloc>
 8009538:	4602      	mov	r2, r0
 800953a:	b918      	cbnz	r0, 8009544 <__mdiff+0x60>
 800953c:	f240 2145 	movw	r1, #581	@ 0x245
 8009540:	4b30      	ldr	r3, [pc, #192]	@ (8009604 <__mdiff+0x120>)
 8009542:	e7e3      	b.n	800950c <__mdiff+0x28>
 8009544:	f100 0b14 	add.w	fp, r0, #20
 8009548:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800954c:	f109 0310 	add.w	r3, r9, #16
 8009550:	60c5      	str	r5, [r0, #12]
 8009552:	f04f 0c00 	mov.w	ip, #0
 8009556:	f109 0514 	add.w	r5, r9, #20
 800955a:	46d9      	mov	r9, fp
 800955c:	6926      	ldr	r6, [r4, #16]
 800955e:	f104 0e14 	add.w	lr, r4, #20
 8009562:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009566:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	9b01      	ldr	r3, [sp, #4]
 800956e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009572:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009576:	b281      	uxth	r1, r0
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	fa1f f38a 	uxth.w	r3, sl
 800957e:	1a5b      	subs	r3, r3, r1
 8009580:	0c00      	lsrs	r0, r0, #16
 8009582:	4463      	add	r3, ip
 8009584:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009588:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800958c:	b29b      	uxth	r3, r3
 800958e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009592:	4576      	cmp	r6, lr
 8009594:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009598:	f849 3b04 	str.w	r3, [r9], #4
 800959c:	d8e6      	bhi.n	800956c <__mdiff+0x88>
 800959e:	1b33      	subs	r3, r6, r4
 80095a0:	3b15      	subs	r3, #21
 80095a2:	f023 0303 	bic.w	r3, r3, #3
 80095a6:	3415      	adds	r4, #21
 80095a8:	3304      	adds	r3, #4
 80095aa:	42a6      	cmp	r6, r4
 80095ac:	bf38      	it	cc
 80095ae:	2304      	movcc	r3, #4
 80095b0:	441d      	add	r5, r3
 80095b2:	445b      	add	r3, fp
 80095b4:	461e      	mov	r6, r3
 80095b6:	462c      	mov	r4, r5
 80095b8:	4544      	cmp	r4, r8
 80095ba:	d30e      	bcc.n	80095da <__mdiff+0xf6>
 80095bc:	f108 0103 	add.w	r1, r8, #3
 80095c0:	1b49      	subs	r1, r1, r5
 80095c2:	f021 0103 	bic.w	r1, r1, #3
 80095c6:	3d03      	subs	r5, #3
 80095c8:	45a8      	cmp	r8, r5
 80095ca:	bf38      	it	cc
 80095cc:	2100      	movcc	r1, #0
 80095ce:	440b      	add	r3, r1
 80095d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095d4:	b199      	cbz	r1, 80095fe <__mdiff+0x11a>
 80095d6:	6117      	str	r7, [r2, #16]
 80095d8:	e79e      	b.n	8009518 <__mdiff+0x34>
 80095da:	46e6      	mov	lr, ip
 80095dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80095e0:	fa1f fc81 	uxth.w	ip, r1
 80095e4:	44f4      	add	ip, lr
 80095e6:	0c08      	lsrs	r0, r1, #16
 80095e8:	4471      	add	r1, lr
 80095ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095ee:	b289      	uxth	r1, r1
 80095f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095f8:	f846 1b04 	str.w	r1, [r6], #4
 80095fc:	e7dc      	b.n	80095b8 <__mdiff+0xd4>
 80095fe:	3f01      	subs	r7, #1
 8009600:	e7e6      	b.n	80095d0 <__mdiff+0xec>
 8009602:	bf00      	nop
 8009604:	0800a350 	.word	0x0800a350
 8009608:	0800a361 	.word	0x0800a361

0800960c <__d2b>:
 800960c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009610:	2101      	movs	r1, #1
 8009612:	4690      	mov	r8, r2
 8009614:	4699      	mov	r9, r3
 8009616:	9e08      	ldr	r6, [sp, #32]
 8009618:	f7ff fcd0 	bl	8008fbc <_Balloc>
 800961c:	4604      	mov	r4, r0
 800961e:	b930      	cbnz	r0, 800962e <__d2b+0x22>
 8009620:	4602      	mov	r2, r0
 8009622:	f240 310f 	movw	r1, #783	@ 0x30f
 8009626:	4b23      	ldr	r3, [pc, #140]	@ (80096b4 <__d2b+0xa8>)
 8009628:	4823      	ldr	r0, [pc, #140]	@ (80096b8 <__d2b+0xac>)
 800962a:	f000 fa7f 	bl	8009b2c <__assert_func>
 800962e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009632:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009636:	b10d      	cbz	r5, 800963c <__d2b+0x30>
 8009638:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	f1b8 0300 	subs.w	r3, r8, #0
 8009642:	d024      	beq.n	800968e <__d2b+0x82>
 8009644:	4668      	mov	r0, sp
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	f7ff fd7f 	bl	800914a <__lo0bits>
 800964c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009650:	b1d8      	cbz	r0, 800968a <__d2b+0x7e>
 8009652:	f1c0 0320 	rsb	r3, r0, #32
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	430b      	orrs	r3, r1
 800965c:	40c2      	lsrs	r2, r0
 800965e:	6163      	str	r3, [r4, #20]
 8009660:	9201      	str	r2, [sp, #4]
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bf0c      	ite	eq
 8009668:	2201      	moveq	r2, #1
 800966a:	2202      	movne	r2, #2
 800966c:	61a3      	str	r3, [r4, #24]
 800966e:	6122      	str	r2, [r4, #16]
 8009670:	b1ad      	cbz	r5, 800969e <__d2b+0x92>
 8009672:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009676:	4405      	add	r5, r0
 8009678:	6035      	str	r5, [r6, #0]
 800967a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800967e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009680:	6018      	str	r0, [r3, #0]
 8009682:	4620      	mov	r0, r4
 8009684:	b002      	add	sp, #8
 8009686:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800968a:	6161      	str	r1, [r4, #20]
 800968c:	e7e9      	b.n	8009662 <__d2b+0x56>
 800968e:	a801      	add	r0, sp, #4
 8009690:	f7ff fd5b 	bl	800914a <__lo0bits>
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	6163      	str	r3, [r4, #20]
 800969a:	3020      	adds	r0, #32
 800969c:	e7e7      	b.n	800966e <__d2b+0x62>
 800969e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096a6:	6030      	str	r0, [r6, #0]
 80096a8:	6918      	ldr	r0, [r3, #16]
 80096aa:	f7ff fd2f 	bl	800910c <__hi0bits>
 80096ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096b2:	e7e4      	b.n	800967e <__d2b+0x72>
 80096b4:	0800a350 	.word	0x0800a350
 80096b8:	0800a361 	.word	0x0800a361

080096bc <__ssputs_r>:
 80096bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	461f      	mov	r7, r3
 80096c2:	688e      	ldr	r6, [r1, #8]
 80096c4:	4682      	mov	sl, r0
 80096c6:	42be      	cmp	r6, r7
 80096c8:	460c      	mov	r4, r1
 80096ca:	4690      	mov	r8, r2
 80096cc:	680b      	ldr	r3, [r1, #0]
 80096ce:	d82d      	bhi.n	800972c <__ssputs_r+0x70>
 80096d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096d8:	d026      	beq.n	8009728 <__ssputs_r+0x6c>
 80096da:	6965      	ldr	r5, [r4, #20]
 80096dc:	6909      	ldr	r1, [r1, #16]
 80096de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096e2:	eba3 0901 	sub.w	r9, r3, r1
 80096e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096ea:	1c7b      	adds	r3, r7, #1
 80096ec:	444b      	add	r3, r9
 80096ee:	106d      	asrs	r5, r5, #1
 80096f0:	429d      	cmp	r5, r3
 80096f2:	bf38      	it	cc
 80096f4:	461d      	movcc	r5, r3
 80096f6:	0553      	lsls	r3, r2, #21
 80096f8:	d527      	bpl.n	800974a <__ssputs_r+0x8e>
 80096fa:	4629      	mov	r1, r5
 80096fc:	f7ff fbd2 	bl	8008ea4 <_malloc_r>
 8009700:	4606      	mov	r6, r0
 8009702:	b360      	cbz	r0, 800975e <__ssputs_r+0xa2>
 8009704:	464a      	mov	r2, r9
 8009706:	6921      	ldr	r1, [r4, #16]
 8009708:	f000 fa02 	bl	8009b10 <memcpy>
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	6126      	str	r6, [r4, #16]
 800971a:	444e      	add	r6, r9
 800971c:	6026      	str	r6, [r4, #0]
 800971e:	463e      	mov	r6, r7
 8009720:	6165      	str	r5, [r4, #20]
 8009722:	eba5 0509 	sub.w	r5, r5, r9
 8009726:	60a5      	str	r5, [r4, #8]
 8009728:	42be      	cmp	r6, r7
 800972a:	d900      	bls.n	800972e <__ssputs_r+0x72>
 800972c:	463e      	mov	r6, r7
 800972e:	4632      	mov	r2, r6
 8009730:	4641      	mov	r1, r8
 8009732:	6820      	ldr	r0, [r4, #0]
 8009734:	f000 f9c2 	bl	8009abc <memmove>
 8009738:	2000      	movs	r0, #0
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	1b9b      	subs	r3, r3, r6
 800973e:	60a3      	str	r3, [r4, #8]
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	4433      	add	r3, r6
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974a:	462a      	mov	r2, r5
 800974c:	f000 fa32 	bl	8009bb4 <_realloc_r>
 8009750:	4606      	mov	r6, r0
 8009752:	2800      	cmp	r0, #0
 8009754:	d1e0      	bne.n	8009718 <__ssputs_r+0x5c>
 8009756:	4650      	mov	r0, sl
 8009758:	6921      	ldr	r1, [r4, #16]
 800975a:	f7ff fb31 	bl	8008dc0 <_free_r>
 800975e:	230c      	movs	r3, #12
 8009760:	f8ca 3000 	str.w	r3, [sl]
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800976e:	81a3      	strh	r3, [r4, #12]
 8009770:	e7e9      	b.n	8009746 <__ssputs_r+0x8a>
	...

08009774 <_svfiprintf_r>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	4698      	mov	r8, r3
 800977a:	898b      	ldrh	r3, [r1, #12]
 800977c:	4607      	mov	r7, r0
 800977e:	061b      	lsls	r3, r3, #24
 8009780:	460d      	mov	r5, r1
 8009782:	4614      	mov	r4, r2
 8009784:	b09d      	sub	sp, #116	@ 0x74
 8009786:	d510      	bpl.n	80097aa <_svfiprintf_r+0x36>
 8009788:	690b      	ldr	r3, [r1, #16]
 800978a:	b973      	cbnz	r3, 80097aa <_svfiprintf_r+0x36>
 800978c:	2140      	movs	r1, #64	@ 0x40
 800978e:	f7ff fb89 	bl	8008ea4 <_malloc_r>
 8009792:	6028      	str	r0, [r5, #0]
 8009794:	6128      	str	r0, [r5, #16]
 8009796:	b930      	cbnz	r0, 80097a6 <_svfiprintf_r+0x32>
 8009798:	230c      	movs	r3, #12
 800979a:	603b      	str	r3, [r7, #0]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	b01d      	add	sp, #116	@ 0x74
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	2340      	movs	r3, #64	@ 0x40
 80097a8:	616b      	str	r3, [r5, #20]
 80097aa:	2300      	movs	r3, #0
 80097ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ae:	2320      	movs	r3, #32
 80097b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097b4:	2330      	movs	r3, #48	@ 0x30
 80097b6:	f04f 0901 	mov.w	r9, #1
 80097ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80097be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009958 <_svfiprintf_r+0x1e4>
 80097c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097c6:	4623      	mov	r3, r4
 80097c8:	469a      	mov	sl, r3
 80097ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ce:	b10a      	cbz	r2, 80097d4 <_svfiprintf_r+0x60>
 80097d0:	2a25      	cmp	r2, #37	@ 0x25
 80097d2:	d1f9      	bne.n	80097c8 <_svfiprintf_r+0x54>
 80097d4:	ebba 0b04 	subs.w	fp, sl, r4
 80097d8:	d00b      	beq.n	80097f2 <_svfiprintf_r+0x7e>
 80097da:	465b      	mov	r3, fp
 80097dc:	4622      	mov	r2, r4
 80097de:	4629      	mov	r1, r5
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ff6b 	bl	80096bc <__ssputs_r>
 80097e6:	3001      	adds	r0, #1
 80097e8:	f000 80a7 	beq.w	800993a <_svfiprintf_r+0x1c6>
 80097ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ee:	445a      	add	r2, fp
 80097f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80097f2:	f89a 3000 	ldrb.w	r3, [sl]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 809f 	beq.w	800993a <_svfiprintf_r+0x1c6>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009806:	f10a 0a01 	add.w	sl, sl, #1
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	9307      	str	r3, [sp, #28]
 800980e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009812:	931a      	str	r3, [sp, #104]	@ 0x68
 8009814:	4654      	mov	r4, sl
 8009816:	2205      	movs	r2, #5
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	484e      	ldr	r0, [pc, #312]	@ (8009958 <_svfiprintf_r+0x1e4>)
 800981e:	f7fe fc6e 	bl	80080fe <memchr>
 8009822:	9a04      	ldr	r2, [sp, #16]
 8009824:	b9d8      	cbnz	r0, 800985e <_svfiprintf_r+0xea>
 8009826:	06d0      	lsls	r0, r2, #27
 8009828:	bf44      	itt	mi
 800982a:	2320      	movmi	r3, #32
 800982c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009830:	0711      	lsls	r1, r2, #28
 8009832:	bf44      	itt	mi
 8009834:	232b      	movmi	r3, #43	@ 0x2b
 8009836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800983a:	f89a 3000 	ldrb.w	r3, [sl]
 800983e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009840:	d015      	beq.n	800986e <_svfiprintf_r+0xfa>
 8009842:	4654      	mov	r4, sl
 8009844:	2000      	movs	r0, #0
 8009846:	f04f 0c0a 	mov.w	ip, #10
 800984a:	9a07      	ldr	r2, [sp, #28]
 800984c:	4621      	mov	r1, r4
 800984e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009852:	3b30      	subs	r3, #48	@ 0x30
 8009854:	2b09      	cmp	r3, #9
 8009856:	d94b      	bls.n	80098f0 <_svfiprintf_r+0x17c>
 8009858:	b1b0      	cbz	r0, 8009888 <_svfiprintf_r+0x114>
 800985a:	9207      	str	r2, [sp, #28]
 800985c:	e014      	b.n	8009888 <_svfiprintf_r+0x114>
 800985e:	eba0 0308 	sub.w	r3, r0, r8
 8009862:	fa09 f303 	lsl.w	r3, r9, r3
 8009866:	4313      	orrs	r3, r2
 8009868:	46a2      	mov	sl, r4
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	e7d2      	b.n	8009814 <_svfiprintf_r+0xa0>
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	1d19      	adds	r1, r3, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	9103      	str	r1, [sp, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfbb      	ittet	lt
 800987a:	425b      	neglt	r3, r3
 800987c:	f042 0202 	orrlt.w	r2, r2, #2
 8009880:	9307      	strge	r3, [sp, #28]
 8009882:	9307      	strlt	r3, [sp, #28]
 8009884:	bfb8      	it	lt
 8009886:	9204      	strlt	r2, [sp, #16]
 8009888:	7823      	ldrb	r3, [r4, #0]
 800988a:	2b2e      	cmp	r3, #46	@ 0x2e
 800988c:	d10a      	bne.n	80098a4 <_svfiprintf_r+0x130>
 800988e:	7863      	ldrb	r3, [r4, #1]
 8009890:	2b2a      	cmp	r3, #42	@ 0x2a
 8009892:	d132      	bne.n	80098fa <_svfiprintf_r+0x186>
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	3402      	adds	r4, #2
 8009898:	1d1a      	adds	r2, r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	9203      	str	r2, [sp, #12]
 800989e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098a2:	9305      	str	r3, [sp, #20]
 80098a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800995c <_svfiprintf_r+0x1e8>
 80098a8:	2203      	movs	r2, #3
 80098aa:	4650      	mov	r0, sl
 80098ac:	7821      	ldrb	r1, [r4, #0]
 80098ae:	f7fe fc26 	bl	80080fe <memchr>
 80098b2:	b138      	cbz	r0, 80098c4 <_svfiprintf_r+0x150>
 80098b4:	2240      	movs	r2, #64	@ 0x40
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	eba0 000a 	sub.w	r0, r0, sl
 80098bc:	4082      	lsls	r2, r0
 80098be:	4313      	orrs	r3, r2
 80098c0:	3401      	adds	r4, #1
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c8:	2206      	movs	r2, #6
 80098ca:	4825      	ldr	r0, [pc, #148]	@ (8009960 <_svfiprintf_r+0x1ec>)
 80098cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098d0:	f7fe fc15 	bl	80080fe <memchr>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d036      	beq.n	8009946 <_svfiprintf_r+0x1d2>
 80098d8:	4b22      	ldr	r3, [pc, #136]	@ (8009964 <_svfiprintf_r+0x1f0>)
 80098da:	bb1b      	cbnz	r3, 8009924 <_svfiprintf_r+0x1b0>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	3307      	adds	r3, #7
 80098e0:	f023 0307 	bic.w	r3, r3, #7
 80098e4:	3308      	adds	r3, #8
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ea:	4433      	add	r3, r6
 80098ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ee:	e76a      	b.n	80097c6 <_svfiprintf_r+0x52>
 80098f0:	460c      	mov	r4, r1
 80098f2:	2001      	movs	r0, #1
 80098f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f8:	e7a8      	b.n	800984c <_svfiprintf_r+0xd8>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f04f 0c0a 	mov.w	ip, #10
 8009900:	4619      	mov	r1, r3
 8009902:	3401      	adds	r4, #1
 8009904:	9305      	str	r3, [sp, #20]
 8009906:	4620      	mov	r0, r4
 8009908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800990c:	3a30      	subs	r2, #48	@ 0x30
 800990e:	2a09      	cmp	r2, #9
 8009910:	d903      	bls.n	800991a <_svfiprintf_r+0x1a6>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0c6      	beq.n	80098a4 <_svfiprintf_r+0x130>
 8009916:	9105      	str	r1, [sp, #20]
 8009918:	e7c4      	b.n	80098a4 <_svfiprintf_r+0x130>
 800991a:	4604      	mov	r4, r0
 800991c:	2301      	movs	r3, #1
 800991e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009922:	e7f0      	b.n	8009906 <_svfiprintf_r+0x192>
 8009924:	ab03      	add	r3, sp, #12
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	462a      	mov	r2, r5
 800992a:	4638      	mov	r0, r7
 800992c:	4b0e      	ldr	r3, [pc, #56]	@ (8009968 <_svfiprintf_r+0x1f4>)
 800992e:	a904      	add	r1, sp, #16
 8009930:	f7fd fe4e 	bl	80075d0 <_printf_float>
 8009934:	1c42      	adds	r2, r0, #1
 8009936:	4606      	mov	r6, r0
 8009938:	d1d6      	bne.n	80098e8 <_svfiprintf_r+0x174>
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	065b      	lsls	r3, r3, #25
 800993e:	f53f af2d 	bmi.w	800979c <_svfiprintf_r+0x28>
 8009942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009944:	e72c      	b.n	80097a0 <_svfiprintf_r+0x2c>
 8009946:	ab03      	add	r3, sp, #12
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	462a      	mov	r2, r5
 800994c:	4638      	mov	r0, r7
 800994e:	4b06      	ldr	r3, [pc, #24]	@ (8009968 <_svfiprintf_r+0x1f4>)
 8009950:	a904      	add	r1, sp, #16
 8009952:	f7fe f8db 	bl	8007b0c <_printf_i>
 8009956:	e7ed      	b.n	8009934 <_svfiprintf_r+0x1c0>
 8009958:	0800a4b8 	.word	0x0800a4b8
 800995c:	0800a4be 	.word	0x0800a4be
 8009960:	0800a4c2 	.word	0x0800a4c2
 8009964:	080075d1 	.word	0x080075d1
 8009968:	080096bd 	.word	0x080096bd

0800996c <__sflush_r>:
 800996c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	0716      	lsls	r6, r2, #28
 8009974:	4605      	mov	r5, r0
 8009976:	460c      	mov	r4, r1
 8009978:	d454      	bmi.n	8009a24 <__sflush_r+0xb8>
 800997a:	684b      	ldr	r3, [r1, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	dc02      	bgt.n	8009986 <__sflush_r+0x1a>
 8009980:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	dd48      	ble.n	8009a18 <__sflush_r+0xac>
 8009986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009988:	2e00      	cmp	r6, #0
 800998a:	d045      	beq.n	8009a18 <__sflush_r+0xac>
 800998c:	2300      	movs	r3, #0
 800998e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009992:	682f      	ldr	r7, [r5, #0]
 8009994:	6a21      	ldr	r1, [r4, #32]
 8009996:	602b      	str	r3, [r5, #0]
 8009998:	d030      	beq.n	80099fc <__sflush_r+0x90>
 800999a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	0759      	lsls	r1, r3, #29
 80099a0:	d505      	bpl.n	80099ae <__sflush_r+0x42>
 80099a2:	6863      	ldr	r3, [r4, #4]
 80099a4:	1ad2      	subs	r2, r2, r3
 80099a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099a8:	b10b      	cbz	r3, 80099ae <__sflush_r+0x42>
 80099aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099ac:	1ad2      	subs	r2, r2, r3
 80099ae:	2300      	movs	r3, #0
 80099b0:	4628      	mov	r0, r5
 80099b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099b4:	6a21      	ldr	r1, [r4, #32]
 80099b6:	47b0      	blx	r6
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	d106      	bne.n	80099cc <__sflush_r+0x60>
 80099be:	6829      	ldr	r1, [r5, #0]
 80099c0:	291d      	cmp	r1, #29
 80099c2:	d82b      	bhi.n	8009a1c <__sflush_r+0xb0>
 80099c4:	4a28      	ldr	r2, [pc, #160]	@ (8009a68 <__sflush_r+0xfc>)
 80099c6:	410a      	asrs	r2, r1
 80099c8:	07d6      	lsls	r6, r2, #31
 80099ca:	d427      	bmi.n	8009a1c <__sflush_r+0xb0>
 80099cc:	2200      	movs	r2, #0
 80099ce:	6062      	str	r2, [r4, #4]
 80099d0:	6922      	ldr	r2, [r4, #16]
 80099d2:	04d9      	lsls	r1, r3, #19
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	d504      	bpl.n	80099e2 <__sflush_r+0x76>
 80099d8:	1c42      	adds	r2, r0, #1
 80099da:	d101      	bne.n	80099e0 <__sflush_r+0x74>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b903      	cbnz	r3, 80099e2 <__sflush_r+0x76>
 80099e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80099e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099e4:	602f      	str	r7, [r5, #0]
 80099e6:	b1b9      	cbz	r1, 8009a18 <__sflush_r+0xac>
 80099e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099ec:	4299      	cmp	r1, r3
 80099ee:	d002      	beq.n	80099f6 <__sflush_r+0x8a>
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7ff f9e5 	bl	8008dc0 <_free_r>
 80099f6:	2300      	movs	r3, #0
 80099f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80099fa:	e00d      	b.n	8009a18 <__sflush_r+0xac>
 80099fc:	2301      	movs	r3, #1
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b0      	blx	r6
 8009a02:	4602      	mov	r2, r0
 8009a04:	1c50      	adds	r0, r2, #1
 8009a06:	d1c9      	bne.n	800999c <__sflush_r+0x30>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0c6      	beq.n	800999c <__sflush_r+0x30>
 8009a0e:	2b1d      	cmp	r3, #29
 8009a10:	d001      	beq.n	8009a16 <__sflush_r+0xaa>
 8009a12:	2b16      	cmp	r3, #22
 8009a14:	d11d      	bne.n	8009a52 <__sflush_r+0xe6>
 8009a16:	602f      	str	r7, [r5, #0]
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e021      	b.n	8009a60 <__sflush_r+0xf4>
 8009a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a20:	b21b      	sxth	r3, r3
 8009a22:	e01a      	b.n	8009a5a <__sflush_r+0xee>
 8009a24:	690f      	ldr	r7, [r1, #16]
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	d0f6      	beq.n	8009a18 <__sflush_r+0xac>
 8009a2a:	0793      	lsls	r3, r2, #30
 8009a2c:	bf18      	it	ne
 8009a2e:	2300      	movne	r3, #0
 8009a30:	680e      	ldr	r6, [r1, #0]
 8009a32:	bf08      	it	eq
 8009a34:	694b      	ldreq	r3, [r1, #20]
 8009a36:	1bf6      	subs	r6, r6, r7
 8009a38:	600f      	str	r7, [r1, #0]
 8009a3a:	608b      	str	r3, [r1, #8]
 8009a3c:	2e00      	cmp	r6, #0
 8009a3e:	ddeb      	ble.n	8009a18 <__sflush_r+0xac>
 8009a40:	4633      	mov	r3, r6
 8009a42:	463a      	mov	r2, r7
 8009a44:	4628      	mov	r0, r5
 8009a46:	6a21      	ldr	r1, [r4, #32]
 8009a48:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009a4c:	47e0      	blx	ip
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	dc07      	bgt.n	8009a62 <__sflush_r+0xf6>
 8009a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a62:	4407      	add	r7, r0
 8009a64:	1a36      	subs	r6, r6, r0
 8009a66:	e7e9      	b.n	8009a3c <__sflush_r+0xd0>
 8009a68:	dfbffffe 	.word	0xdfbffffe

08009a6c <_fflush_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	690b      	ldr	r3, [r1, #16]
 8009a70:	4605      	mov	r5, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	b913      	cbnz	r3, 8009a7c <_fflush_r+0x10>
 8009a76:	2500      	movs	r5, #0
 8009a78:	4628      	mov	r0, r5
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	b118      	cbz	r0, 8009a86 <_fflush_r+0x1a>
 8009a7e:	6a03      	ldr	r3, [r0, #32]
 8009a80:	b90b      	cbnz	r3, 8009a86 <_fflush_r+0x1a>
 8009a82:	f7fe f9ef 	bl	8007e64 <__sinit>
 8009a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0f3      	beq.n	8009a76 <_fflush_r+0xa>
 8009a8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a90:	07d0      	lsls	r0, r2, #31
 8009a92:	d404      	bmi.n	8009a9e <_fflush_r+0x32>
 8009a94:	0599      	lsls	r1, r3, #22
 8009a96:	d402      	bmi.n	8009a9e <_fflush_r+0x32>
 8009a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a9a:	f7fe fb2e 	bl	80080fa <__retarget_lock_acquire_recursive>
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f7ff ff63 	bl	800996c <__sflush_r>
 8009aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	07da      	lsls	r2, r3, #31
 8009aac:	d4e4      	bmi.n	8009a78 <_fflush_r+0xc>
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	059b      	lsls	r3, r3, #22
 8009ab2:	d4e1      	bmi.n	8009a78 <_fflush_r+0xc>
 8009ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ab6:	f7fe fb21 	bl	80080fc <__retarget_lock_release_recursive>
 8009aba:	e7dd      	b.n	8009a78 <_fflush_r+0xc>

08009abc <memmove>:
 8009abc:	4288      	cmp	r0, r1
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	eb01 0402 	add.w	r4, r1, r2
 8009ac4:	d902      	bls.n	8009acc <memmove+0x10>
 8009ac6:	4284      	cmp	r4, r0
 8009ac8:	4623      	mov	r3, r4
 8009aca:	d807      	bhi.n	8009adc <memmove+0x20>
 8009acc:	1e43      	subs	r3, r0, #1
 8009ace:	42a1      	cmp	r1, r4
 8009ad0:	d008      	beq.n	8009ae4 <memmove+0x28>
 8009ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ada:	e7f8      	b.n	8009ace <memmove+0x12>
 8009adc:	4601      	mov	r1, r0
 8009ade:	4402      	add	r2, r0
 8009ae0:	428a      	cmp	r2, r1
 8009ae2:	d100      	bne.n	8009ae6 <memmove+0x2a>
 8009ae4:	bd10      	pop	{r4, pc}
 8009ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aee:	e7f7      	b.n	8009ae0 <memmove+0x24>

08009af0 <_sbrk_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	2300      	movs	r3, #0
 8009af4:	4d05      	ldr	r5, [pc, #20]	@ (8009b0c <_sbrk_r+0x1c>)
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	f7f8 fdb2 	bl	8002664 <_sbrk>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d102      	bne.n	8009b0a <_sbrk_r+0x1a>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	b103      	cbz	r3, 8009b0a <_sbrk_r+0x1a>
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	20000894 	.word	0x20000894

08009b10 <memcpy>:
 8009b10:	440a      	add	r2, r1
 8009b12:	4291      	cmp	r1, r2
 8009b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b18:	d100      	bne.n	8009b1c <memcpy+0xc>
 8009b1a:	4770      	bx	lr
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b22:	4291      	cmp	r1, r2
 8009b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b28:	d1f9      	bne.n	8009b1e <memcpy+0xe>
 8009b2a:	bd10      	pop	{r4, pc}

08009b2c <__assert_func>:
 8009b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2e:	4614      	mov	r4, r2
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b09      	ldr	r3, [pc, #36]	@ (8009b58 <__assert_func+0x2c>)
 8009b34:	4605      	mov	r5, r0
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68d8      	ldr	r0, [r3, #12]
 8009b3a:	b954      	cbnz	r4, 8009b52 <__assert_func+0x26>
 8009b3c:	4b07      	ldr	r3, [pc, #28]	@ (8009b5c <__assert_func+0x30>)
 8009b3e:	461c      	mov	r4, r3
 8009b40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b44:	9100      	str	r1, [sp, #0]
 8009b46:	462b      	mov	r3, r5
 8009b48:	4905      	ldr	r1, [pc, #20]	@ (8009b60 <__assert_func+0x34>)
 8009b4a:	f000 f86f 	bl	8009c2c <fiprintf>
 8009b4e:	f000 f87f 	bl	8009c50 <abort>
 8009b52:	4b04      	ldr	r3, [pc, #16]	@ (8009b64 <__assert_func+0x38>)
 8009b54:	e7f4      	b.n	8009b40 <__assert_func+0x14>
 8009b56:	bf00      	nop
 8009b58:	200000d4 	.word	0x200000d4
 8009b5c:	0800a50e 	.word	0x0800a50e
 8009b60:	0800a4e0 	.word	0x0800a4e0
 8009b64:	0800a4d3 	.word	0x0800a4d3

08009b68 <_calloc_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	fba1 5402 	umull	r5, r4, r1, r2
 8009b6e:	b93c      	cbnz	r4, 8009b80 <_calloc_r+0x18>
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7ff f997 	bl	8008ea4 <_malloc_r>
 8009b76:	4606      	mov	r6, r0
 8009b78:	b928      	cbnz	r0, 8009b86 <_calloc_r+0x1e>
 8009b7a:	2600      	movs	r6, #0
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	220c      	movs	r2, #12
 8009b82:	6002      	str	r2, [r0, #0]
 8009b84:	e7f9      	b.n	8009b7a <_calloc_r+0x12>
 8009b86:	462a      	mov	r2, r5
 8009b88:	4621      	mov	r1, r4
 8009b8a:	f7fe fa38 	bl	8007ffe <memset>
 8009b8e:	e7f5      	b.n	8009b7c <_calloc_r+0x14>

08009b90 <__ascii_mbtowc>:
 8009b90:	b082      	sub	sp, #8
 8009b92:	b901      	cbnz	r1, 8009b96 <__ascii_mbtowc+0x6>
 8009b94:	a901      	add	r1, sp, #4
 8009b96:	b142      	cbz	r2, 8009baa <__ascii_mbtowc+0x1a>
 8009b98:	b14b      	cbz	r3, 8009bae <__ascii_mbtowc+0x1e>
 8009b9a:	7813      	ldrb	r3, [r2, #0]
 8009b9c:	600b      	str	r3, [r1, #0]
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	1e10      	subs	r0, r2, #0
 8009ba2:	bf18      	it	ne
 8009ba4:	2001      	movne	r0, #1
 8009ba6:	b002      	add	sp, #8
 8009ba8:	4770      	bx	lr
 8009baa:	4610      	mov	r0, r2
 8009bac:	e7fb      	b.n	8009ba6 <__ascii_mbtowc+0x16>
 8009bae:	f06f 0001 	mvn.w	r0, #1
 8009bb2:	e7f8      	b.n	8009ba6 <__ascii_mbtowc+0x16>

08009bb4 <_realloc_r>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4615      	mov	r5, r2
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	b921      	cbnz	r1, 8009bca <_realloc_r+0x16>
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc6:	f7ff b96d 	b.w	8008ea4 <_malloc_r>
 8009bca:	b92a      	cbnz	r2, 8009bd8 <_realloc_r+0x24>
 8009bcc:	f7ff f8f8 	bl	8008dc0 <_free_r>
 8009bd0:	2400      	movs	r4, #0
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd8:	f000 f841 	bl	8009c5e <_malloc_usable_size_r>
 8009bdc:	4285      	cmp	r5, r0
 8009bde:	4606      	mov	r6, r0
 8009be0:	d802      	bhi.n	8009be8 <_realloc_r+0x34>
 8009be2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009be6:	d8f4      	bhi.n	8009bd2 <_realloc_r+0x1e>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4640      	mov	r0, r8
 8009bec:	f7ff f95a 	bl	8008ea4 <_malloc_r>
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0ec      	beq.n	8009bd0 <_realloc_r+0x1c>
 8009bf6:	42b5      	cmp	r5, r6
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	bf28      	it	cs
 8009bfe:	4632      	movcs	r2, r6
 8009c00:	f7ff ff86 	bl	8009b10 <memcpy>
 8009c04:	4621      	mov	r1, r4
 8009c06:	4640      	mov	r0, r8
 8009c08:	f7ff f8da 	bl	8008dc0 <_free_r>
 8009c0c:	463c      	mov	r4, r7
 8009c0e:	e7e0      	b.n	8009bd2 <_realloc_r+0x1e>

08009c10 <__ascii_wctomb>:
 8009c10:	4603      	mov	r3, r0
 8009c12:	4608      	mov	r0, r1
 8009c14:	b141      	cbz	r1, 8009c28 <__ascii_wctomb+0x18>
 8009c16:	2aff      	cmp	r2, #255	@ 0xff
 8009c18:	d904      	bls.n	8009c24 <__ascii_wctomb+0x14>
 8009c1a:	228a      	movs	r2, #138	@ 0x8a
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	4770      	bx	lr
 8009c24:	2001      	movs	r0, #1
 8009c26:	700a      	strb	r2, [r1, #0]
 8009c28:	4770      	bx	lr
	...

08009c2c <fiprintf>:
 8009c2c:	b40e      	push	{r1, r2, r3}
 8009c2e:	b503      	push	{r0, r1, lr}
 8009c30:	4601      	mov	r1, r0
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	4805      	ldr	r0, [pc, #20]	@ (8009c4c <fiprintf+0x20>)
 8009c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	f000 f83d 	bl	8009cbc <_vfiprintf_r>
 8009c42:	b002      	add	sp, #8
 8009c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c48:	b003      	add	sp, #12
 8009c4a:	4770      	bx	lr
 8009c4c:	200000d4 	.word	0x200000d4

08009c50 <abort>:
 8009c50:	2006      	movs	r0, #6
 8009c52:	b508      	push	{r3, lr}
 8009c54:	f000 fa06 	bl	800a064 <raise>
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f7f8 fc8e 	bl	800257a <_exit>

08009c5e <_malloc_usable_size_r>:
 8009c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c62:	1f18      	subs	r0, r3, #4
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbc      	itt	lt
 8009c68:	580b      	ldrlt	r3, [r1, r0]
 8009c6a:	18c0      	addlt	r0, r0, r3
 8009c6c:	4770      	bx	lr

08009c6e <__sfputc_r>:
 8009c6e:	6893      	ldr	r3, [r2, #8]
 8009c70:	b410      	push	{r4}
 8009c72:	3b01      	subs	r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	6093      	str	r3, [r2, #8]
 8009c78:	da07      	bge.n	8009c8a <__sfputc_r+0x1c>
 8009c7a:	6994      	ldr	r4, [r2, #24]
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	db01      	blt.n	8009c84 <__sfputc_r+0x16>
 8009c80:	290a      	cmp	r1, #10
 8009c82:	d102      	bne.n	8009c8a <__sfputc_r+0x1c>
 8009c84:	bc10      	pop	{r4}
 8009c86:	f000 b931 	b.w	8009eec <__swbuf_r>
 8009c8a:	6813      	ldr	r3, [r2, #0]
 8009c8c:	1c58      	adds	r0, r3, #1
 8009c8e:	6010      	str	r0, [r2, #0]
 8009c90:	7019      	strb	r1, [r3, #0]
 8009c92:	4608      	mov	r0, r1
 8009c94:	bc10      	pop	{r4}
 8009c96:	4770      	bx	lr

08009c98 <__sfputs_r>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460f      	mov	r7, r1
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	18d5      	adds	r5, r2, r3
 8009ca2:	42ac      	cmp	r4, r5
 8009ca4:	d101      	bne.n	8009caa <__sfputs_r+0x12>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e007      	b.n	8009cba <__sfputs_r+0x22>
 8009caa:	463a      	mov	r2, r7
 8009cac:	4630      	mov	r0, r6
 8009cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb2:	f7ff ffdc 	bl	8009c6e <__sfputc_r>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d1f3      	bne.n	8009ca2 <__sfputs_r+0xa>
 8009cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cbc <_vfiprintf_r>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	4698      	mov	r8, r3
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	b09d      	sub	sp, #116	@ 0x74
 8009cca:	b118      	cbz	r0, 8009cd4 <_vfiprintf_r+0x18>
 8009ccc:	6a03      	ldr	r3, [r0, #32]
 8009cce:	b90b      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x18>
 8009cd0:	f7fe f8c8 	bl	8007e64 <__sinit>
 8009cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cd6:	07d9      	lsls	r1, r3, #31
 8009cd8:	d405      	bmi.n	8009ce6 <_vfiprintf_r+0x2a>
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	059a      	lsls	r2, r3, #22
 8009cde:	d402      	bmi.n	8009ce6 <_vfiprintf_r+0x2a>
 8009ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ce2:	f7fe fa0a 	bl	80080fa <__retarget_lock_acquire_recursive>
 8009ce6:	89ab      	ldrh	r3, [r5, #12]
 8009ce8:	071b      	lsls	r3, r3, #28
 8009cea:	d501      	bpl.n	8009cf0 <_vfiprintf_r+0x34>
 8009cec:	692b      	ldr	r3, [r5, #16]
 8009cee:	b99b      	cbnz	r3, 8009d18 <_vfiprintf_r+0x5c>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 f938 	bl	8009f68 <__swsetup_r>
 8009cf8:	b170      	cbz	r0, 8009d18 <_vfiprintf_r+0x5c>
 8009cfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cfc:	07dc      	lsls	r4, r3, #31
 8009cfe:	d504      	bpl.n	8009d0a <_vfiprintf_r+0x4e>
 8009d00:	f04f 30ff 	mov.w	r0, #4294967295
 8009d04:	b01d      	add	sp, #116	@ 0x74
 8009d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0a:	89ab      	ldrh	r3, [r5, #12]
 8009d0c:	0598      	lsls	r0, r3, #22
 8009d0e:	d4f7      	bmi.n	8009d00 <_vfiprintf_r+0x44>
 8009d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d12:	f7fe f9f3 	bl	80080fc <__retarget_lock_release_recursive>
 8009d16:	e7f3      	b.n	8009d00 <_vfiprintf_r+0x44>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d22:	2330      	movs	r3, #48	@ 0x30
 8009d24:	f04f 0901 	mov.w	r9, #1
 8009d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009ed8 <_vfiprintf_r+0x21c>
 8009d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d34:	4623      	mov	r3, r4
 8009d36:	469a      	mov	sl, r3
 8009d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3c:	b10a      	cbz	r2, 8009d42 <_vfiprintf_r+0x86>
 8009d3e:	2a25      	cmp	r2, #37	@ 0x25
 8009d40:	d1f9      	bne.n	8009d36 <_vfiprintf_r+0x7a>
 8009d42:	ebba 0b04 	subs.w	fp, sl, r4
 8009d46:	d00b      	beq.n	8009d60 <_vfiprintf_r+0xa4>
 8009d48:	465b      	mov	r3, fp
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f7ff ffa2 	bl	8009c98 <__sfputs_r>
 8009d54:	3001      	adds	r0, #1
 8009d56:	f000 80a7 	beq.w	8009ea8 <_vfiprintf_r+0x1ec>
 8009d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d5c:	445a      	add	r2, fp
 8009d5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d60:	f89a 3000 	ldrb.w	r3, [sl]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 809f 	beq.w	8009ea8 <_vfiprintf_r+0x1ec>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d74:	f10a 0a01 	add.w	sl, sl, #1
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	9307      	str	r3, [sp, #28]
 8009d7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d80:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d82:	4654      	mov	r4, sl
 8009d84:	2205      	movs	r2, #5
 8009d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8a:	4853      	ldr	r0, [pc, #332]	@ (8009ed8 <_vfiprintf_r+0x21c>)
 8009d8c:	f7fe f9b7 	bl	80080fe <memchr>
 8009d90:	9a04      	ldr	r2, [sp, #16]
 8009d92:	b9d8      	cbnz	r0, 8009dcc <_vfiprintf_r+0x110>
 8009d94:	06d1      	lsls	r1, r2, #27
 8009d96:	bf44      	itt	mi
 8009d98:	2320      	movmi	r3, #32
 8009d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d9e:	0713      	lsls	r3, r2, #28
 8009da0:	bf44      	itt	mi
 8009da2:	232b      	movmi	r3, #43	@ 0x2b
 8009da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dae:	d015      	beq.n	8009ddc <_vfiprintf_r+0x120>
 8009db0:	4654      	mov	r4, sl
 8009db2:	2000      	movs	r0, #0
 8009db4:	f04f 0c0a 	mov.w	ip, #10
 8009db8:	9a07      	ldr	r2, [sp, #28]
 8009dba:	4621      	mov	r1, r4
 8009dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc0:	3b30      	subs	r3, #48	@ 0x30
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	d94b      	bls.n	8009e5e <_vfiprintf_r+0x1a2>
 8009dc6:	b1b0      	cbz	r0, 8009df6 <_vfiprintf_r+0x13a>
 8009dc8:	9207      	str	r2, [sp, #28]
 8009dca:	e014      	b.n	8009df6 <_vfiprintf_r+0x13a>
 8009dcc:	eba0 0308 	sub.w	r3, r0, r8
 8009dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	46a2      	mov	sl, r4
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	e7d2      	b.n	8009d82 <_vfiprintf_r+0xc6>
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	1d19      	adds	r1, r3, #4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	9103      	str	r1, [sp, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	bfbb      	ittet	lt
 8009de8:	425b      	neglt	r3, r3
 8009dea:	f042 0202 	orrlt.w	r2, r2, #2
 8009dee:	9307      	strge	r3, [sp, #28]
 8009df0:	9307      	strlt	r3, [sp, #28]
 8009df2:	bfb8      	it	lt
 8009df4:	9204      	strlt	r2, [sp, #16]
 8009df6:	7823      	ldrb	r3, [r4, #0]
 8009df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dfa:	d10a      	bne.n	8009e12 <_vfiprintf_r+0x156>
 8009dfc:	7863      	ldrb	r3, [r4, #1]
 8009dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e00:	d132      	bne.n	8009e68 <_vfiprintf_r+0x1ac>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	3402      	adds	r4, #2
 8009e06:	1d1a      	adds	r2, r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	9203      	str	r2, [sp, #12]
 8009e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009edc <_vfiprintf_r+0x220>
 8009e16:	2203      	movs	r2, #3
 8009e18:	4650      	mov	r0, sl
 8009e1a:	7821      	ldrb	r1, [r4, #0]
 8009e1c:	f7fe f96f 	bl	80080fe <memchr>
 8009e20:	b138      	cbz	r0, 8009e32 <_vfiprintf_r+0x176>
 8009e22:	2240      	movs	r2, #64	@ 0x40
 8009e24:	9b04      	ldr	r3, [sp, #16]
 8009e26:	eba0 000a 	sub.w	r0, r0, sl
 8009e2a:	4082      	lsls	r2, r0
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	3401      	adds	r4, #1
 8009e30:	9304      	str	r3, [sp, #16]
 8009e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e36:	2206      	movs	r2, #6
 8009e38:	4829      	ldr	r0, [pc, #164]	@ (8009ee0 <_vfiprintf_r+0x224>)
 8009e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e3e:	f7fe f95e 	bl	80080fe <memchr>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d03f      	beq.n	8009ec6 <_vfiprintf_r+0x20a>
 8009e46:	4b27      	ldr	r3, [pc, #156]	@ (8009ee4 <_vfiprintf_r+0x228>)
 8009e48:	bb1b      	cbnz	r3, 8009e92 <_vfiprintf_r+0x1d6>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	3307      	adds	r3, #7
 8009e4e:	f023 0307 	bic.w	r3, r3, #7
 8009e52:	3308      	adds	r3, #8
 8009e54:	9303      	str	r3, [sp, #12]
 8009e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e58:	443b      	add	r3, r7
 8009e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e5c:	e76a      	b.n	8009d34 <_vfiprintf_r+0x78>
 8009e5e:	460c      	mov	r4, r1
 8009e60:	2001      	movs	r0, #1
 8009e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e66:	e7a8      	b.n	8009dba <_vfiprintf_r+0xfe>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4619      	mov	r1, r3
 8009e70:	3401      	adds	r4, #1
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	4620      	mov	r0, r4
 8009e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e7a:	3a30      	subs	r2, #48	@ 0x30
 8009e7c:	2a09      	cmp	r2, #9
 8009e7e:	d903      	bls.n	8009e88 <_vfiprintf_r+0x1cc>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d0c6      	beq.n	8009e12 <_vfiprintf_r+0x156>
 8009e84:	9105      	str	r1, [sp, #20]
 8009e86:	e7c4      	b.n	8009e12 <_vfiprintf_r+0x156>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e90:	e7f0      	b.n	8009e74 <_vfiprintf_r+0x1b8>
 8009e92:	ab03      	add	r3, sp, #12
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	462a      	mov	r2, r5
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4b13      	ldr	r3, [pc, #76]	@ (8009ee8 <_vfiprintf_r+0x22c>)
 8009e9c:	a904      	add	r1, sp, #16
 8009e9e:	f7fd fb97 	bl	80075d0 <_printf_float>
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	1c78      	adds	r0, r7, #1
 8009ea6:	d1d6      	bne.n	8009e56 <_vfiprintf_r+0x19a>
 8009ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009eaa:	07d9      	lsls	r1, r3, #31
 8009eac:	d405      	bmi.n	8009eba <_vfiprintf_r+0x1fe>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	059a      	lsls	r2, r3, #22
 8009eb2:	d402      	bmi.n	8009eba <_vfiprintf_r+0x1fe>
 8009eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eb6:	f7fe f921 	bl	80080fc <__retarget_lock_release_recursive>
 8009eba:	89ab      	ldrh	r3, [r5, #12]
 8009ebc:	065b      	lsls	r3, r3, #25
 8009ebe:	f53f af1f 	bmi.w	8009d00 <_vfiprintf_r+0x44>
 8009ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ec4:	e71e      	b.n	8009d04 <_vfiprintf_r+0x48>
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	462a      	mov	r2, r5
 8009ecc:	4630      	mov	r0, r6
 8009ece:	4b06      	ldr	r3, [pc, #24]	@ (8009ee8 <_vfiprintf_r+0x22c>)
 8009ed0:	a904      	add	r1, sp, #16
 8009ed2:	f7fd fe1b 	bl	8007b0c <_printf_i>
 8009ed6:	e7e4      	b.n	8009ea2 <_vfiprintf_r+0x1e6>
 8009ed8:	0800a4b8 	.word	0x0800a4b8
 8009edc:	0800a4be 	.word	0x0800a4be
 8009ee0:	0800a4c2 	.word	0x0800a4c2
 8009ee4:	080075d1 	.word	0x080075d1
 8009ee8:	08009c99 	.word	0x08009c99

08009eec <__swbuf_r>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	460e      	mov	r6, r1
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	b118      	cbz	r0, 8009efe <__swbuf_r+0x12>
 8009ef6:	6a03      	ldr	r3, [r0, #32]
 8009ef8:	b90b      	cbnz	r3, 8009efe <__swbuf_r+0x12>
 8009efa:	f7fd ffb3 	bl	8007e64 <__sinit>
 8009efe:	69a3      	ldr	r3, [r4, #24]
 8009f00:	60a3      	str	r3, [r4, #8]
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	071a      	lsls	r2, r3, #28
 8009f06:	d501      	bpl.n	8009f0c <__swbuf_r+0x20>
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	b943      	cbnz	r3, 8009f1e <__swbuf_r+0x32>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 f82a 	bl	8009f68 <__swsetup_r>
 8009f14:	b118      	cbz	r0, 8009f1e <__swbuf_r+0x32>
 8009f16:	f04f 37ff 	mov.w	r7, #4294967295
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	6922      	ldr	r2, [r4, #16]
 8009f22:	b2f6      	uxtb	r6, r6
 8009f24:	1a98      	subs	r0, r3, r2
 8009f26:	6963      	ldr	r3, [r4, #20]
 8009f28:	4637      	mov	r7, r6
 8009f2a:	4283      	cmp	r3, r0
 8009f2c:	dc05      	bgt.n	8009f3a <__swbuf_r+0x4e>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f7ff fd9b 	bl	8009a6c <_fflush_r>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d1ed      	bne.n	8009f16 <__swbuf_r+0x2a>
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	60a3      	str	r3, [r4, #8]
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	701e      	strb	r6, [r3, #0]
 8009f48:	6962      	ldr	r2, [r4, #20]
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d004      	beq.n	8009f5a <__swbuf_r+0x6e>
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	07db      	lsls	r3, r3, #31
 8009f54:	d5e1      	bpl.n	8009f1a <__swbuf_r+0x2e>
 8009f56:	2e0a      	cmp	r6, #10
 8009f58:	d1df      	bne.n	8009f1a <__swbuf_r+0x2e>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7ff fd85 	bl	8009a6c <_fflush_r>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d0d9      	beq.n	8009f1a <__swbuf_r+0x2e>
 8009f66:	e7d6      	b.n	8009f16 <__swbuf_r+0x2a>

08009f68 <__swsetup_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4b29      	ldr	r3, [pc, #164]	@ (800a010 <__swsetup_r+0xa8>)
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	460c      	mov	r4, r1
 8009f72:	b118      	cbz	r0, 8009f7c <__swsetup_r+0x14>
 8009f74:	6a03      	ldr	r3, [r0, #32]
 8009f76:	b90b      	cbnz	r3, 8009f7c <__swsetup_r+0x14>
 8009f78:	f7fd ff74 	bl	8007e64 <__sinit>
 8009f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f80:	0719      	lsls	r1, r3, #28
 8009f82:	d422      	bmi.n	8009fca <__swsetup_r+0x62>
 8009f84:	06da      	lsls	r2, r3, #27
 8009f86:	d407      	bmi.n	8009f98 <__swsetup_r+0x30>
 8009f88:	2209      	movs	r2, #9
 8009f8a:	602a      	str	r2, [r5, #0]
 8009f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	e033      	b.n	800a000 <__swsetup_r+0x98>
 8009f98:	0758      	lsls	r0, r3, #29
 8009f9a:	d512      	bpl.n	8009fc2 <__swsetup_r+0x5a>
 8009f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f9e:	b141      	cbz	r1, 8009fb2 <__swsetup_r+0x4a>
 8009fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fa4:	4299      	cmp	r1, r3
 8009fa6:	d002      	beq.n	8009fae <__swsetup_r+0x46>
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f7fe ff09 	bl	8008dc0 <_free_r>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fb8:	81a3      	strh	r3, [r4, #12]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	6063      	str	r3, [r4, #4]
 8009fbe:	6923      	ldr	r3, [r4, #16]
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	f043 0308 	orr.w	r3, r3, #8
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	b94b      	cbnz	r3, 8009fe2 <__swsetup_r+0x7a>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd8:	d003      	beq.n	8009fe2 <__swsetup_r+0x7a>
 8009fda:	4621      	mov	r1, r4
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f000 f882 	bl	800a0e6 <__smakebuf_r>
 8009fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe6:	f013 0201 	ands.w	r2, r3, #1
 8009fea:	d00a      	beq.n	800a002 <__swsetup_r+0x9a>
 8009fec:	2200      	movs	r2, #0
 8009fee:	60a2      	str	r2, [r4, #8]
 8009ff0:	6962      	ldr	r2, [r4, #20]
 8009ff2:	4252      	negs	r2, r2
 8009ff4:	61a2      	str	r2, [r4, #24]
 8009ff6:	6922      	ldr	r2, [r4, #16]
 8009ff8:	b942      	cbnz	r2, 800a00c <__swsetup_r+0xa4>
 8009ffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ffe:	d1c5      	bne.n	8009f8c <__swsetup_r+0x24>
 800a000:	bd38      	pop	{r3, r4, r5, pc}
 800a002:	0799      	lsls	r1, r3, #30
 800a004:	bf58      	it	pl
 800a006:	6962      	ldrpl	r2, [r4, #20]
 800a008:	60a2      	str	r2, [r4, #8]
 800a00a:	e7f4      	b.n	8009ff6 <__swsetup_r+0x8e>
 800a00c:	2000      	movs	r0, #0
 800a00e:	e7f7      	b.n	800a000 <__swsetup_r+0x98>
 800a010:	200000d4 	.word	0x200000d4

0800a014 <_raise_r>:
 800a014:	291f      	cmp	r1, #31
 800a016:	b538      	push	{r3, r4, r5, lr}
 800a018:	4605      	mov	r5, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	d904      	bls.n	800a028 <_raise_r+0x14>
 800a01e:	2316      	movs	r3, #22
 800a020:	6003      	str	r3, [r0, #0]
 800a022:	f04f 30ff 	mov.w	r0, #4294967295
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a02a:	b112      	cbz	r2, 800a032 <_raise_r+0x1e>
 800a02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a030:	b94b      	cbnz	r3, 800a046 <_raise_r+0x32>
 800a032:	4628      	mov	r0, r5
 800a034:	f000 f830 	bl	800a098 <_getpid_r>
 800a038:	4622      	mov	r2, r4
 800a03a:	4601      	mov	r1, r0
 800a03c:	4628      	mov	r0, r5
 800a03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a042:	f000 b817 	b.w	800a074 <_kill_r>
 800a046:	2b01      	cmp	r3, #1
 800a048:	d00a      	beq.n	800a060 <_raise_r+0x4c>
 800a04a:	1c59      	adds	r1, r3, #1
 800a04c:	d103      	bne.n	800a056 <_raise_r+0x42>
 800a04e:	2316      	movs	r3, #22
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	2001      	movs	r0, #1
 800a054:	e7e7      	b.n	800a026 <_raise_r+0x12>
 800a056:	2100      	movs	r1, #0
 800a058:	4620      	mov	r0, r4
 800a05a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a05e:	4798      	blx	r3
 800a060:	2000      	movs	r0, #0
 800a062:	e7e0      	b.n	800a026 <_raise_r+0x12>

0800a064 <raise>:
 800a064:	4b02      	ldr	r3, [pc, #8]	@ (800a070 <raise+0xc>)
 800a066:	4601      	mov	r1, r0
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	f7ff bfd3 	b.w	800a014 <_raise_r>
 800a06e:	bf00      	nop
 800a070:	200000d4 	.word	0x200000d4

0800a074 <_kill_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	2300      	movs	r3, #0
 800a078:	4d06      	ldr	r5, [pc, #24]	@ (800a094 <_kill_r+0x20>)
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	4611      	mov	r1, r2
 800a080:	602b      	str	r3, [r5, #0]
 800a082:	f7f8 fa6a 	bl	800255a <_kill>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d102      	bne.n	800a090 <_kill_r+0x1c>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	b103      	cbz	r3, 800a090 <_kill_r+0x1c>
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	20000894 	.word	0x20000894

0800a098 <_getpid_r>:
 800a098:	f7f8 ba58 	b.w	800254c <_getpid>

0800a09c <__swhatbuf_r>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	460c      	mov	r4, r1
 800a0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a4:	4615      	mov	r5, r2
 800a0a6:	2900      	cmp	r1, #0
 800a0a8:	461e      	mov	r6, r3
 800a0aa:	b096      	sub	sp, #88	@ 0x58
 800a0ac:	da0c      	bge.n	800a0c8 <__swhatbuf_r+0x2c>
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0b6:	bf14      	ite	ne
 800a0b8:	2340      	movne	r3, #64	@ 0x40
 800a0ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0be:	2000      	movs	r0, #0
 800a0c0:	6031      	str	r1, [r6, #0]
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	b016      	add	sp, #88	@ 0x58
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	466a      	mov	r2, sp
 800a0ca:	f000 f849 	bl	800a160 <_fstat_r>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	dbed      	blt.n	800a0ae <__swhatbuf_r+0x12>
 800a0d2:	9901      	ldr	r1, [sp, #4]
 800a0d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0dc:	4259      	negs	r1, r3
 800a0de:	4159      	adcs	r1, r3
 800a0e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0e4:	e7eb      	b.n	800a0be <__swhatbuf_r+0x22>

0800a0e6 <__smakebuf_r>:
 800a0e6:	898b      	ldrh	r3, [r1, #12]
 800a0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ea:	079d      	lsls	r5, r3, #30
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	d507      	bpl.n	800a102 <__smakebuf_r+0x1c>
 800a0f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	6163      	str	r3, [r4, #20]
 800a0fe:	b003      	add	sp, #12
 800a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a102:	466a      	mov	r2, sp
 800a104:	ab01      	add	r3, sp, #4
 800a106:	f7ff ffc9 	bl	800a09c <__swhatbuf_r>
 800a10a:	9f00      	ldr	r7, [sp, #0]
 800a10c:	4605      	mov	r5, r0
 800a10e:	4639      	mov	r1, r7
 800a110:	4630      	mov	r0, r6
 800a112:	f7fe fec7 	bl	8008ea4 <_malloc_r>
 800a116:	b948      	cbnz	r0, 800a12c <__smakebuf_r+0x46>
 800a118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a11c:	059a      	lsls	r2, r3, #22
 800a11e:	d4ee      	bmi.n	800a0fe <__smakebuf_r+0x18>
 800a120:	f023 0303 	bic.w	r3, r3, #3
 800a124:	f043 0302 	orr.w	r3, r3, #2
 800a128:	81a3      	strh	r3, [r4, #12]
 800a12a:	e7e2      	b.n	800a0f2 <__smakebuf_r+0xc>
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	9b01      	ldr	r3, [sp, #4]
 800a13a:	6020      	str	r0, [r4, #0]
 800a13c:	b15b      	cbz	r3, 800a156 <__smakebuf_r+0x70>
 800a13e:	4630      	mov	r0, r6
 800a140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a144:	f000 f81e 	bl	800a184 <_isatty_r>
 800a148:	b128      	cbz	r0, 800a156 <__smakebuf_r+0x70>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	81a3      	strh	r3, [r4, #12]
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	431d      	orrs	r5, r3
 800a15a:	81a5      	strh	r5, [r4, #12]
 800a15c:	e7cf      	b.n	800a0fe <__smakebuf_r+0x18>
	...

0800a160 <_fstat_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	2300      	movs	r3, #0
 800a164:	4d06      	ldr	r5, [pc, #24]	@ (800a180 <_fstat_r+0x20>)
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	4611      	mov	r1, r2
 800a16c:	602b      	str	r3, [r5, #0]
 800a16e:	f7f8 fa53 	bl	8002618 <_fstat>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d102      	bne.n	800a17c <_fstat_r+0x1c>
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	b103      	cbz	r3, 800a17c <_fstat_r+0x1c>
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	bd38      	pop	{r3, r4, r5, pc}
 800a17e:	bf00      	nop
 800a180:	20000894 	.word	0x20000894

0800a184 <_isatty_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	2300      	movs	r3, #0
 800a188:	4d05      	ldr	r5, [pc, #20]	@ (800a1a0 <_isatty_r+0x1c>)
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7f8 fa51 	bl	8002636 <_isatty>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_isatty_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_isatty_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	20000894 	.word	0x20000894

0800a1a4 <_init>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr

0800a1b0 <_fini>:
 800a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b2:	bf00      	nop
 800a1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b6:	bc08      	pop	{r3}
 800a1b8:	469e      	mov	lr, r3
 800a1ba:	4770      	bx	lr
